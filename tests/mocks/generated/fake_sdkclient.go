// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
	"github.com/inference-gateway/sdk"
)

type FakeSDKClient struct {
	GenerateContentStub        func(context.Context, sdk.Provider, string, []sdk.Message) (*sdk.CreateChatCompletionResponse, error)
	generateContentMutex       sync.RWMutex
	generateContentArgsForCall []struct {
		arg1 context.Context
		arg2 sdk.Provider
		arg3 string
		arg4 []sdk.Message
	}
	generateContentReturns struct {
		result1 *sdk.CreateChatCompletionResponse
		result2 error
	}
	generateContentReturnsOnCall map[int]struct {
		result1 *sdk.CreateChatCompletionResponse
		result2 error
	}
	WithMiddlewareOptionsStub        func(*sdk.MiddlewareOptions) domain.SDKClient
	withMiddlewareOptionsMutex       sync.RWMutex
	withMiddlewareOptionsArgsForCall []struct {
		arg1 *sdk.MiddlewareOptions
	}
	withMiddlewareOptionsReturns struct {
		result1 domain.SDKClient
	}
	withMiddlewareOptionsReturnsOnCall map[int]struct {
		result1 domain.SDKClient
	}
	WithOptionsStub        func(*sdk.CreateChatCompletionRequest) domain.SDKClient
	withOptionsMutex       sync.RWMutex
	withOptionsArgsForCall []struct {
		arg1 *sdk.CreateChatCompletionRequest
	}
	withOptionsReturns struct {
		result1 domain.SDKClient
	}
	withOptionsReturnsOnCall map[int]struct {
		result1 domain.SDKClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSDKClient) GenerateContent(arg1 context.Context, arg2 sdk.Provider, arg3 string, arg4 []sdk.Message) (*sdk.CreateChatCompletionResponse, error) {
	var arg4Copy []sdk.Message
	if arg4 != nil {
		arg4Copy = make([]sdk.Message, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.generateContentMutex.Lock()
	ret, specificReturn := fake.generateContentReturnsOnCall[len(fake.generateContentArgsForCall)]
	fake.generateContentArgsForCall = append(fake.generateContentArgsForCall, struct {
		arg1 context.Context
		arg2 sdk.Provider
		arg3 string
		arg4 []sdk.Message
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.GenerateContentStub
	fakeReturns := fake.generateContentReturns
	fake.recordInvocation("GenerateContent", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.generateContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSDKClient) GenerateContentCallCount() int {
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	return len(fake.generateContentArgsForCall)
}

func (fake *FakeSDKClient) GenerateContentCalls(stub func(context.Context, sdk.Provider, string, []sdk.Message) (*sdk.CreateChatCompletionResponse, error)) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = stub
}

func (fake *FakeSDKClient) GenerateContentArgsForCall(i int) (context.Context, sdk.Provider, string, []sdk.Message) {
	fake.generateContentMutex.RLock()
	defer fake.generateContentMutex.RUnlock()
	argsForCall := fake.generateContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSDKClient) GenerateContentReturns(result1 *sdk.CreateChatCompletionResponse, result2 error) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = nil
	fake.generateContentReturns = struct {
		result1 *sdk.CreateChatCompletionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSDKClient) GenerateContentReturnsOnCall(i int, result1 *sdk.CreateChatCompletionResponse, result2 error) {
	fake.generateContentMutex.Lock()
	defer fake.generateContentMutex.Unlock()
	fake.GenerateContentStub = nil
	if fake.generateContentReturnsOnCall == nil {
		fake.generateContentReturnsOnCall = make(map[int]struct {
			result1 *sdk.CreateChatCompletionResponse
			result2 error
		})
	}
	fake.generateContentReturnsOnCall[i] = struct {
		result1 *sdk.CreateChatCompletionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeSDKClient) WithMiddlewareOptions(arg1 *sdk.MiddlewareOptions) domain.SDKClient {
	fake.withMiddlewareOptionsMutex.Lock()
	ret, specificReturn := fake.withMiddlewareOptionsReturnsOnCall[len(fake.withMiddlewareOptionsArgsForCall)]
	fake.withMiddlewareOptionsArgsForCall = append(fake.withMiddlewareOptionsArgsForCall, struct {
		arg1 *sdk.MiddlewareOptions
	}{arg1})
	stub := fake.WithMiddlewareOptionsStub
	fakeReturns := fake.withMiddlewareOptionsReturns
	fake.recordInvocation("WithMiddlewareOptions", []interface{}{arg1})
	fake.withMiddlewareOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSDKClient) WithMiddlewareOptionsCallCount() int {
	fake.withMiddlewareOptionsMutex.RLock()
	defer fake.withMiddlewareOptionsMutex.RUnlock()
	return len(fake.withMiddlewareOptionsArgsForCall)
}

func (fake *FakeSDKClient) WithMiddlewareOptionsCalls(stub func(*sdk.MiddlewareOptions) domain.SDKClient) {
	fake.withMiddlewareOptionsMutex.Lock()
	defer fake.withMiddlewareOptionsMutex.Unlock()
	fake.WithMiddlewareOptionsStub = stub
}

func (fake *FakeSDKClient) WithMiddlewareOptionsArgsForCall(i int) *sdk.MiddlewareOptions {
	fake.withMiddlewareOptionsMutex.RLock()
	defer fake.withMiddlewareOptionsMutex.RUnlock()
	argsForCall := fake.withMiddlewareOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSDKClient) WithMiddlewareOptionsReturns(result1 domain.SDKClient) {
	fake.withMiddlewareOptionsMutex.Lock()
	defer fake.withMiddlewareOptionsMutex.Unlock()
	fake.WithMiddlewareOptionsStub = nil
	fake.withMiddlewareOptionsReturns = struct {
		result1 domain.SDKClient
	}{result1}
}

func (fake *FakeSDKClient) WithMiddlewareOptionsReturnsOnCall(i int, result1 domain.SDKClient) {
	fake.withMiddlewareOptionsMutex.Lock()
	defer fake.withMiddlewareOptionsMutex.Unlock()
	fake.WithMiddlewareOptionsStub = nil
	if fake.withMiddlewareOptionsReturnsOnCall == nil {
		fake.withMiddlewareOptionsReturnsOnCall = make(map[int]struct {
			result1 domain.SDKClient
		})
	}
	fake.withMiddlewareOptionsReturnsOnCall[i] = struct {
		result1 domain.SDKClient
	}{result1}
}

func (fake *FakeSDKClient) WithOptions(arg1 *sdk.CreateChatCompletionRequest) domain.SDKClient {
	fake.withOptionsMutex.Lock()
	ret, specificReturn := fake.withOptionsReturnsOnCall[len(fake.withOptionsArgsForCall)]
	fake.withOptionsArgsForCall = append(fake.withOptionsArgsForCall, struct {
		arg1 *sdk.CreateChatCompletionRequest
	}{arg1})
	stub := fake.WithOptionsStub
	fakeReturns := fake.withOptionsReturns
	fake.recordInvocation("WithOptions", []interface{}{arg1})
	fake.withOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSDKClient) WithOptionsCallCount() int {
	fake.withOptionsMutex.RLock()
	defer fake.withOptionsMutex.RUnlock()
	return len(fake.withOptionsArgsForCall)
}

func (fake *FakeSDKClient) WithOptionsCalls(stub func(*sdk.CreateChatCompletionRequest) domain.SDKClient) {
	fake.withOptionsMutex.Lock()
	defer fake.withOptionsMutex.Unlock()
	fake.WithOptionsStub = stub
}

func (fake *FakeSDKClient) WithOptionsArgsForCall(i int) *sdk.CreateChatCompletionRequest {
	fake.withOptionsMutex.RLock()
	defer fake.withOptionsMutex.RUnlock()
	argsForCall := fake.withOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSDKClient) WithOptionsReturns(result1 domain.SDKClient) {
	fake.withOptionsMutex.Lock()
	defer fake.withOptionsMutex.Unlock()
	fake.WithOptionsStub = nil
	fake.withOptionsReturns = struct {
		result1 domain.SDKClient
	}{result1}
}

func (fake *FakeSDKClient) WithOptionsReturnsOnCall(i int, result1 domain.SDKClient) {
	fake.withOptionsMutex.Lock()
	defer fake.withOptionsMutex.Unlock()
	fake.WithOptionsStub = nil
	if fake.withOptionsReturnsOnCall == nil {
		fake.withOptionsReturnsOnCall = make(map[int]struct {
			result1 domain.SDKClient
		})
	}
	fake.withOptionsReturnsOnCall[i] = struct {
		result1 domain.SDKClient
	}{result1}
}

func (fake *FakeSDKClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSDKClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.SDKClient = new(FakeSDKClient)
