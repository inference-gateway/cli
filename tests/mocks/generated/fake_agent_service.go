// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeAgentService struct {
	CancelRequestStub        func(string) error
	cancelRequestMutex       sync.RWMutex
	cancelRequestArgsForCall []struct {
		arg1 string
	}
	cancelRequestReturns struct {
		result1 error
	}
	cancelRequestReturnsOnCall map[int]struct {
		result1 error
	}
	GetMetricsStub        func(string) *domain.ChatMetrics
	getMetricsMutex       sync.RWMutex
	getMetricsArgsForCall []struct {
		arg1 string
	}
	getMetricsReturns struct {
		result1 *domain.ChatMetrics
	}
	getMetricsReturnsOnCall map[int]struct {
		result1 *domain.ChatMetrics
	}
	RunStub        func(context.Context, *domain.AgentRequest) (*domain.ChatSyncResponse, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 context.Context
		arg2 *domain.AgentRequest
	}
	runReturns struct {
		result1 *domain.ChatSyncResponse
		result2 error
	}
	runReturnsOnCall map[int]struct {
		result1 *domain.ChatSyncResponse
		result2 error
	}
	RunWithStreamStub        func(context.Context, *domain.AgentRequest) (<-chan domain.ChatEvent, error)
	runWithStreamMutex       sync.RWMutex
	runWithStreamArgsForCall []struct {
		arg1 context.Context
		arg2 *domain.AgentRequest
	}
	runWithStreamReturns struct {
		result1 <-chan domain.ChatEvent
		result2 error
	}
	runWithStreamReturnsOnCall map[int]struct {
		result1 <-chan domain.ChatEvent
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgentService) CancelRequest(arg1 string) error {
	fake.cancelRequestMutex.Lock()
	ret, specificReturn := fake.cancelRequestReturnsOnCall[len(fake.cancelRequestArgsForCall)]
	fake.cancelRequestArgsForCall = append(fake.cancelRequestArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CancelRequestStub
	fakeReturns := fake.cancelRequestReturns
	fake.recordInvocation("CancelRequest", []interface{}{arg1})
	fake.cancelRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentService) CancelRequestCallCount() int {
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	return len(fake.cancelRequestArgsForCall)
}

func (fake *FakeAgentService) CancelRequestCalls(stub func(string) error) {
	fake.cancelRequestMutex.Lock()
	defer fake.cancelRequestMutex.Unlock()
	fake.CancelRequestStub = stub
}

func (fake *FakeAgentService) CancelRequestArgsForCall(i int) string {
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	argsForCall := fake.cancelRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentService) CancelRequestReturns(result1 error) {
	fake.cancelRequestMutex.Lock()
	defer fake.cancelRequestMutex.Unlock()
	fake.CancelRequestStub = nil
	fake.cancelRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentService) CancelRequestReturnsOnCall(i int, result1 error) {
	fake.cancelRequestMutex.Lock()
	defer fake.cancelRequestMutex.Unlock()
	fake.CancelRequestStub = nil
	if fake.cancelRequestReturnsOnCall == nil {
		fake.cancelRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgentService) GetMetrics(arg1 string) *domain.ChatMetrics {
	fake.getMetricsMutex.Lock()
	ret, specificReturn := fake.getMetricsReturnsOnCall[len(fake.getMetricsArgsForCall)]
	fake.getMetricsArgsForCall = append(fake.getMetricsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetMetricsStub
	fakeReturns := fake.getMetricsReturns
	fake.recordInvocation("GetMetrics", []interface{}{arg1})
	fake.getMetricsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentService) GetMetricsCallCount() int {
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	return len(fake.getMetricsArgsForCall)
}

func (fake *FakeAgentService) GetMetricsCalls(stub func(string) *domain.ChatMetrics) {
	fake.getMetricsMutex.Lock()
	defer fake.getMetricsMutex.Unlock()
	fake.GetMetricsStub = stub
}

func (fake *FakeAgentService) GetMetricsArgsForCall(i int) string {
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	argsForCall := fake.getMetricsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentService) GetMetricsReturns(result1 *domain.ChatMetrics) {
	fake.getMetricsMutex.Lock()
	defer fake.getMetricsMutex.Unlock()
	fake.GetMetricsStub = nil
	fake.getMetricsReturns = struct {
		result1 *domain.ChatMetrics
	}{result1}
}

func (fake *FakeAgentService) GetMetricsReturnsOnCall(i int, result1 *domain.ChatMetrics) {
	fake.getMetricsMutex.Lock()
	defer fake.getMetricsMutex.Unlock()
	fake.GetMetricsStub = nil
	if fake.getMetricsReturnsOnCall == nil {
		fake.getMetricsReturnsOnCall = make(map[int]struct {
			result1 *domain.ChatMetrics
		})
	}
	fake.getMetricsReturnsOnCall[i] = struct {
		result1 *domain.ChatMetrics
	}{result1}
}

func (fake *FakeAgentService) Run(arg1 context.Context, arg2 *domain.AgentRequest) (*domain.ChatSyncResponse, error) {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 context.Context
		arg2 *domain.AgentRequest
	}{arg1, arg2})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1, arg2})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAgentService) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeAgentService) RunCalls(stub func(context.Context, *domain.AgentRequest) (*domain.ChatSyncResponse, error)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeAgentService) RunArgsForCall(i int) (context.Context, *domain.AgentRequest) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAgentService) RunReturns(result1 *domain.ChatSyncResponse, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 *domain.ChatSyncResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentService) RunReturnsOnCall(i int, result1 *domain.ChatSyncResponse, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 *domain.ChatSyncResponse
			result2 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 *domain.ChatSyncResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentService) RunWithStream(arg1 context.Context, arg2 *domain.AgentRequest) (<-chan domain.ChatEvent, error) {
	fake.runWithStreamMutex.Lock()
	ret, specificReturn := fake.runWithStreamReturnsOnCall[len(fake.runWithStreamArgsForCall)]
	fake.runWithStreamArgsForCall = append(fake.runWithStreamArgsForCall, struct {
		arg1 context.Context
		arg2 *domain.AgentRequest
	}{arg1, arg2})
	stub := fake.RunWithStreamStub
	fakeReturns := fake.runWithStreamReturns
	fake.recordInvocation("RunWithStream", []interface{}{arg1, arg2})
	fake.runWithStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAgentService) RunWithStreamCallCount() int {
	fake.runWithStreamMutex.RLock()
	defer fake.runWithStreamMutex.RUnlock()
	return len(fake.runWithStreamArgsForCall)
}

func (fake *FakeAgentService) RunWithStreamCalls(stub func(context.Context, *domain.AgentRequest) (<-chan domain.ChatEvent, error)) {
	fake.runWithStreamMutex.Lock()
	defer fake.runWithStreamMutex.Unlock()
	fake.RunWithStreamStub = stub
}

func (fake *FakeAgentService) RunWithStreamArgsForCall(i int) (context.Context, *domain.AgentRequest) {
	fake.runWithStreamMutex.RLock()
	defer fake.runWithStreamMutex.RUnlock()
	argsForCall := fake.runWithStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAgentService) RunWithStreamReturns(result1 <-chan domain.ChatEvent, result2 error) {
	fake.runWithStreamMutex.Lock()
	defer fake.runWithStreamMutex.Unlock()
	fake.RunWithStreamStub = nil
	fake.runWithStreamReturns = struct {
		result1 <-chan domain.ChatEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentService) RunWithStreamReturnsOnCall(i int, result1 <-chan domain.ChatEvent, result2 error) {
	fake.runWithStreamMutex.Lock()
	defer fake.runWithStreamMutex.Unlock()
	fake.RunWithStreamStub = nil
	if fake.runWithStreamReturnsOnCall == nil {
		fake.runWithStreamReturnsOnCall = make(map[int]struct {
			result1 <-chan domain.ChatEvent
			result2 error
		})
	}
	fake.runWithStreamReturnsOnCall[i] = struct {
		result1 <-chan domain.ChatEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgentService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.AgentService = new(FakeAgentService)
