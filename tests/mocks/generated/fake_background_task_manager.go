// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"
	"time"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeBackgroundTaskManager struct {
	CancelTaskStub        func(string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		arg1 string
	}
	cancelTaskReturns struct {
		result1 error
	}
	cancelTaskReturnsOnCall map[int]struct {
		result1 error
	}
	CleanupOldTasksStub        func(time.Duration) int
	cleanupOldTasksMutex       sync.RWMutex
	cleanupOldTasksArgsForCall []struct {
		arg1 time.Duration
	}
	cleanupOldTasksReturns struct {
		result1 int
	}
	cleanupOldTasksReturnsOnCall map[int]struct {
		result1 int
	}
	GetActiveTaskCountStub        func() int
	getActiveTaskCountMutex       sync.RWMutex
	getActiveTaskCountArgsForCall []struct {
	}
	getActiveTaskCountReturns struct {
		result1 int
	}
	getActiveTaskCountReturnsOnCall map[int]struct {
		result1 int
	}
	GetActiveTasksStub        func() []*domain.BackgroundTask
	getActiveTasksMutex       sync.RWMutex
	getActiveTasksArgsForCall []struct {
	}
	getActiveTasksReturns struct {
		result1 []*domain.BackgroundTask
	}
	getActiveTasksReturnsOnCall map[int]struct {
		result1 []*domain.BackgroundTask
	}
	GetAllTasksStub        func() []*domain.BackgroundTask
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct {
	}
	getAllTasksReturns struct {
		result1 []*domain.BackgroundTask
	}
	getAllTasksReturnsOnCall map[int]struct {
		result1 []*domain.BackgroundTask
	}
	GetTaskStub        func(string) (*domain.BackgroundTask, bool)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		arg1 string
	}
	getTaskReturns struct {
		result1 *domain.BackgroundTask
		result2 bool
	}
	getTaskReturnsOnCall map[int]struct {
		result1 *domain.BackgroundTask
		result2 bool
	}
	SetEventChannelStub        func(chan<- domain.UIEvent)
	setEventChannelMutex       sync.RWMutex
	setEventChannelArgsForCall []struct {
		arg1 chan<- domain.UIEvent
	}
	SubmitTaskStub        func(context.Context, string, string, map[string]any) (*domain.BackgroundTask, error)
	submitTaskMutex       sync.RWMutex
	submitTaskArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 map[string]any
	}
	submitTaskReturns struct {
		result1 *domain.BackgroundTask
		result2 error
	}
	submitTaskReturnsOnCall map[int]struct {
		result1 *domain.BackgroundTask
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackgroundTaskManager) CancelTask(arg1 string) error {
	fake.cancelTaskMutex.Lock()
	ret, specificReturn := fake.cancelTaskReturnsOnCall[len(fake.cancelTaskArgsForCall)]
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CancelTaskStub
	fakeReturns := fake.cancelTaskReturns
	fake.recordInvocation("CancelTask", []interface{}{arg1})
	fake.cancelTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackgroundTaskManager) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeBackgroundTaskManager) CancelTaskCalls(stub func(string) error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = stub
}

func (fake *FakeBackgroundTaskManager) CancelTaskArgsForCall(i int) string {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	argsForCall := fake.cancelTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBackgroundTaskManager) CancelTaskReturns(result1 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackgroundTaskManager) CancelTaskReturnsOnCall(i int, result1 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	if fake.cancelTaskReturnsOnCall == nil {
		fake.cancelTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackgroundTaskManager) CleanupOldTasks(arg1 time.Duration) int {
	fake.cleanupOldTasksMutex.Lock()
	ret, specificReturn := fake.cleanupOldTasksReturnsOnCall[len(fake.cleanupOldTasksArgsForCall)]
	fake.cleanupOldTasksArgsForCall = append(fake.cleanupOldTasksArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.CleanupOldTasksStub
	fakeReturns := fake.cleanupOldTasksReturns
	fake.recordInvocation("CleanupOldTasks", []interface{}{arg1})
	fake.cleanupOldTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackgroundTaskManager) CleanupOldTasksCallCount() int {
	fake.cleanupOldTasksMutex.RLock()
	defer fake.cleanupOldTasksMutex.RUnlock()
	return len(fake.cleanupOldTasksArgsForCall)
}

func (fake *FakeBackgroundTaskManager) CleanupOldTasksCalls(stub func(time.Duration) int) {
	fake.cleanupOldTasksMutex.Lock()
	defer fake.cleanupOldTasksMutex.Unlock()
	fake.CleanupOldTasksStub = stub
}

func (fake *FakeBackgroundTaskManager) CleanupOldTasksArgsForCall(i int) time.Duration {
	fake.cleanupOldTasksMutex.RLock()
	defer fake.cleanupOldTasksMutex.RUnlock()
	argsForCall := fake.cleanupOldTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBackgroundTaskManager) CleanupOldTasksReturns(result1 int) {
	fake.cleanupOldTasksMutex.Lock()
	defer fake.cleanupOldTasksMutex.Unlock()
	fake.CleanupOldTasksStub = nil
	fake.cleanupOldTasksReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeBackgroundTaskManager) CleanupOldTasksReturnsOnCall(i int, result1 int) {
	fake.cleanupOldTasksMutex.Lock()
	defer fake.cleanupOldTasksMutex.Unlock()
	fake.CleanupOldTasksStub = nil
	if fake.cleanupOldTasksReturnsOnCall == nil {
		fake.cleanupOldTasksReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.cleanupOldTasksReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetActiveTaskCount() int {
	fake.getActiveTaskCountMutex.Lock()
	ret, specificReturn := fake.getActiveTaskCountReturnsOnCall[len(fake.getActiveTaskCountArgsForCall)]
	fake.getActiveTaskCountArgsForCall = append(fake.getActiveTaskCountArgsForCall, struct {
	}{})
	stub := fake.GetActiveTaskCountStub
	fakeReturns := fake.getActiveTaskCountReturns
	fake.recordInvocation("GetActiveTaskCount", []interface{}{})
	fake.getActiveTaskCountMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackgroundTaskManager) GetActiveTaskCountCallCount() int {
	fake.getActiveTaskCountMutex.RLock()
	defer fake.getActiveTaskCountMutex.RUnlock()
	return len(fake.getActiveTaskCountArgsForCall)
}

func (fake *FakeBackgroundTaskManager) GetActiveTaskCountCalls(stub func() int) {
	fake.getActiveTaskCountMutex.Lock()
	defer fake.getActiveTaskCountMutex.Unlock()
	fake.GetActiveTaskCountStub = stub
}

func (fake *FakeBackgroundTaskManager) GetActiveTaskCountReturns(result1 int) {
	fake.getActiveTaskCountMutex.Lock()
	defer fake.getActiveTaskCountMutex.Unlock()
	fake.GetActiveTaskCountStub = nil
	fake.getActiveTaskCountReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetActiveTaskCountReturnsOnCall(i int, result1 int) {
	fake.getActiveTaskCountMutex.Lock()
	defer fake.getActiveTaskCountMutex.Unlock()
	fake.GetActiveTaskCountStub = nil
	if fake.getActiveTaskCountReturnsOnCall == nil {
		fake.getActiveTaskCountReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getActiveTaskCountReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetActiveTasks() []*domain.BackgroundTask {
	fake.getActiveTasksMutex.Lock()
	ret, specificReturn := fake.getActiveTasksReturnsOnCall[len(fake.getActiveTasksArgsForCall)]
	fake.getActiveTasksArgsForCall = append(fake.getActiveTasksArgsForCall, struct {
	}{})
	stub := fake.GetActiveTasksStub
	fakeReturns := fake.getActiveTasksReturns
	fake.recordInvocation("GetActiveTasks", []interface{}{})
	fake.getActiveTasksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackgroundTaskManager) GetActiveTasksCallCount() int {
	fake.getActiveTasksMutex.RLock()
	defer fake.getActiveTasksMutex.RUnlock()
	return len(fake.getActiveTasksArgsForCall)
}

func (fake *FakeBackgroundTaskManager) GetActiveTasksCalls(stub func() []*domain.BackgroundTask) {
	fake.getActiveTasksMutex.Lock()
	defer fake.getActiveTasksMutex.Unlock()
	fake.GetActiveTasksStub = stub
}

func (fake *FakeBackgroundTaskManager) GetActiveTasksReturns(result1 []*domain.BackgroundTask) {
	fake.getActiveTasksMutex.Lock()
	defer fake.getActiveTasksMutex.Unlock()
	fake.GetActiveTasksStub = nil
	fake.getActiveTasksReturns = struct {
		result1 []*domain.BackgroundTask
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetActiveTasksReturnsOnCall(i int, result1 []*domain.BackgroundTask) {
	fake.getActiveTasksMutex.Lock()
	defer fake.getActiveTasksMutex.Unlock()
	fake.GetActiveTasksStub = nil
	if fake.getActiveTasksReturnsOnCall == nil {
		fake.getActiveTasksReturnsOnCall = make(map[int]struct {
			result1 []*domain.BackgroundTask
		})
	}
	fake.getActiveTasksReturnsOnCall[i] = struct {
		result1 []*domain.BackgroundTask
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetAllTasks() []*domain.BackgroundTask {
	fake.getAllTasksMutex.Lock()
	ret, specificReturn := fake.getAllTasksReturnsOnCall[len(fake.getAllTasksArgsForCall)]
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct {
	}{})
	stub := fake.GetAllTasksStub
	fakeReturns := fake.getAllTasksReturns
	fake.recordInvocation("GetAllTasks", []interface{}{})
	fake.getAllTasksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBackgroundTaskManager) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeBackgroundTaskManager) GetAllTasksCalls(stub func() []*domain.BackgroundTask) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = stub
}

func (fake *FakeBackgroundTaskManager) GetAllTasksReturns(result1 []*domain.BackgroundTask) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []*domain.BackgroundTask
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetAllTasksReturnsOnCall(i int, result1 []*domain.BackgroundTask) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.GetAllTasksStub = nil
	if fake.getAllTasksReturnsOnCall == nil {
		fake.getAllTasksReturnsOnCall = make(map[int]struct {
			result1 []*domain.BackgroundTask
		})
	}
	fake.getAllTasksReturnsOnCall[i] = struct {
		result1 []*domain.BackgroundTask
	}{result1}
}

func (fake *FakeBackgroundTaskManager) GetTask(arg1 string) (*domain.BackgroundTask, bool) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetTaskStub
	fakeReturns := fake.getTaskReturns
	fake.recordInvocation("GetTask", []interface{}{arg1})
	fake.getTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBackgroundTaskManager) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeBackgroundTaskManager) GetTaskCalls(stub func(string) (*domain.BackgroundTask, bool)) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = stub
}

func (fake *FakeBackgroundTaskManager) GetTaskArgsForCall(i int) string {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	argsForCall := fake.getTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBackgroundTaskManager) GetTaskReturns(result1 *domain.BackgroundTask, result2 bool) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 *domain.BackgroundTask
		result2 bool
	}{result1, result2}
}

func (fake *FakeBackgroundTaskManager) GetTaskReturnsOnCall(i int, result1 *domain.BackgroundTask, result2 bool) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 *domain.BackgroundTask
			result2 bool
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 *domain.BackgroundTask
		result2 bool
	}{result1, result2}
}

func (fake *FakeBackgroundTaskManager) SetEventChannel(arg1 chan<- domain.UIEvent) {
	fake.setEventChannelMutex.Lock()
	fake.setEventChannelArgsForCall = append(fake.setEventChannelArgsForCall, struct {
		arg1 chan<- domain.UIEvent
	}{arg1})
	stub := fake.SetEventChannelStub
	fake.recordInvocation("SetEventChannel", []interface{}{arg1})
	fake.setEventChannelMutex.Unlock()
	if stub != nil {
		fake.SetEventChannelStub(arg1)
	}
}

func (fake *FakeBackgroundTaskManager) SetEventChannelCallCount() int {
	fake.setEventChannelMutex.RLock()
	defer fake.setEventChannelMutex.RUnlock()
	return len(fake.setEventChannelArgsForCall)
}

func (fake *FakeBackgroundTaskManager) SetEventChannelCalls(stub func(chan<- domain.UIEvent)) {
	fake.setEventChannelMutex.Lock()
	defer fake.setEventChannelMutex.Unlock()
	fake.SetEventChannelStub = stub
}

func (fake *FakeBackgroundTaskManager) SetEventChannelArgsForCall(i int) chan<- domain.UIEvent {
	fake.setEventChannelMutex.RLock()
	defer fake.setEventChannelMutex.RUnlock()
	argsForCall := fake.setEventChannelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBackgroundTaskManager) SubmitTask(arg1 context.Context, arg2 string, arg3 string, arg4 map[string]any) (*domain.BackgroundTask, error) {
	fake.submitTaskMutex.Lock()
	ret, specificReturn := fake.submitTaskReturnsOnCall[len(fake.submitTaskArgsForCall)]
	fake.submitTaskArgsForCall = append(fake.submitTaskArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 map[string]any
	}{arg1, arg2, arg3, arg4})
	stub := fake.SubmitTaskStub
	fakeReturns := fake.submitTaskReturns
	fake.recordInvocation("SubmitTask", []interface{}{arg1, arg2, arg3, arg4})
	fake.submitTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBackgroundTaskManager) SubmitTaskCallCount() int {
	fake.submitTaskMutex.RLock()
	defer fake.submitTaskMutex.RUnlock()
	return len(fake.submitTaskArgsForCall)
}

func (fake *FakeBackgroundTaskManager) SubmitTaskCalls(stub func(context.Context, string, string, map[string]any) (*domain.BackgroundTask, error)) {
	fake.submitTaskMutex.Lock()
	defer fake.submitTaskMutex.Unlock()
	fake.SubmitTaskStub = stub
}

func (fake *FakeBackgroundTaskManager) SubmitTaskArgsForCall(i int) (context.Context, string, string, map[string]any) {
	fake.submitTaskMutex.RLock()
	defer fake.submitTaskMutex.RUnlock()
	argsForCall := fake.submitTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeBackgroundTaskManager) SubmitTaskReturns(result1 *domain.BackgroundTask, result2 error) {
	fake.submitTaskMutex.Lock()
	defer fake.submitTaskMutex.Unlock()
	fake.SubmitTaskStub = nil
	fake.submitTaskReturns = struct {
		result1 *domain.BackgroundTask
		result2 error
	}{result1, result2}
}

func (fake *FakeBackgroundTaskManager) SubmitTaskReturnsOnCall(i int, result1 *domain.BackgroundTask, result2 error) {
	fake.submitTaskMutex.Lock()
	defer fake.submitTaskMutex.Unlock()
	fake.SubmitTaskStub = nil
	if fake.submitTaskReturnsOnCall == nil {
		fake.submitTaskReturnsOnCall = make(map[int]struct {
			result1 *domain.BackgroundTask
			result2 error
		})
	}
	fake.submitTaskReturnsOnCall[i] = struct {
		result1 *domain.BackgroundTask
		result2 error
	}{result1, result2}
}

func (fake *FakeBackgroundTaskManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBackgroundTaskManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.BackgroundTaskManager = new(FakeBackgroundTaskManager)
