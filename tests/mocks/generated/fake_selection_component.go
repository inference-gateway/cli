// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/ui"
)

type FakeSelectionComponent struct {
	GetOptionsStub        func() []string
	getOptionsMutex       sync.RWMutex
	getOptionsArgsForCall []struct {
	}
	getOptionsReturns struct {
		result1 []string
	}
	getOptionsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetSelectedStub        func() string
	getSelectedMutex       sync.RWMutex
	getSelectedArgsForCall []struct {
	}
	getSelectedReturns struct {
		result1 string
	}
	getSelectedReturnsOnCall map[int]struct {
		result1 string
	}
	GetSelectedIndexStub        func() int
	getSelectedIndexMutex       sync.RWMutex
	getSelectedIndexArgsForCall []struct {
	}
	getSelectedIndexReturns struct {
		result1 int
	}
	getSelectedIndexReturnsOnCall map[int]struct {
		result1 int
	}
	IsCancelledStub        func() bool
	isCancelledMutex       sync.RWMutex
	isCancelledArgsForCall []struct {
	}
	isCancelledReturns struct {
		result1 bool
	}
	isCancelledReturnsOnCall map[int]struct {
		result1 bool
	}
	IsSelectedStub        func() bool
	isSelectedMutex       sync.RWMutex
	isSelectedArgsForCall []struct {
	}
	isSelectedReturns struct {
		result1 bool
	}
	isSelectedReturnsOnCall map[int]struct {
		result1 bool
	}
	RenderStub        func() string
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
	}
	renderReturns struct {
		result1 string
	}
	renderReturnsOnCall map[int]struct {
		result1 string
	}
	SetHeightStub        func(int)
	setHeightMutex       sync.RWMutex
	setHeightArgsForCall []struct {
		arg1 int
	}
	SetOptionsStub        func([]string)
	setOptionsMutex       sync.RWMutex
	setOptionsArgsForCall []struct {
		arg1 []string
	}
	SetSelectedStub        func(int)
	setSelectedMutex       sync.RWMutex
	setSelectedArgsForCall []struct {
		arg1 int
	}
	SetWidthStub        func(int)
	setWidthMutex       sync.RWMutex
	setWidthArgsForCall []struct {
		arg1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSelectionComponent) GetOptions() []string {
	fake.getOptionsMutex.Lock()
	ret, specificReturn := fake.getOptionsReturnsOnCall[len(fake.getOptionsArgsForCall)]
	fake.getOptionsArgsForCall = append(fake.getOptionsArgsForCall, struct {
	}{})
	stub := fake.GetOptionsStub
	fakeReturns := fake.getOptionsReturns
	fake.recordInvocation("GetOptions", []interface{}{})
	fake.getOptionsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelectionComponent) GetOptionsCallCount() int {
	fake.getOptionsMutex.RLock()
	defer fake.getOptionsMutex.RUnlock()
	return len(fake.getOptionsArgsForCall)
}

func (fake *FakeSelectionComponent) GetOptionsCalls(stub func() []string) {
	fake.getOptionsMutex.Lock()
	defer fake.getOptionsMutex.Unlock()
	fake.GetOptionsStub = stub
}

func (fake *FakeSelectionComponent) GetOptionsReturns(result1 []string) {
	fake.getOptionsMutex.Lock()
	defer fake.getOptionsMutex.Unlock()
	fake.GetOptionsStub = nil
	fake.getOptionsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSelectionComponent) GetOptionsReturnsOnCall(i int, result1 []string) {
	fake.getOptionsMutex.Lock()
	defer fake.getOptionsMutex.Unlock()
	fake.GetOptionsStub = nil
	if fake.getOptionsReturnsOnCall == nil {
		fake.getOptionsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getOptionsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSelectionComponent) GetSelected() string {
	fake.getSelectedMutex.Lock()
	ret, specificReturn := fake.getSelectedReturnsOnCall[len(fake.getSelectedArgsForCall)]
	fake.getSelectedArgsForCall = append(fake.getSelectedArgsForCall, struct {
	}{})
	stub := fake.GetSelectedStub
	fakeReturns := fake.getSelectedReturns
	fake.recordInvocation("GetSelected", []interface{}{})
	fake.getSelectedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelectionComponent) GetSelectedCallCount() int {
	fake.getSelectedMutex.RLock()
	defer fake.getSelectedMutex.RUnlock()
	return len(fake.getSelectedArgsForCall)
}

func (fake *FakeSelectionComponent) GetSelectedCalls(stub func() string) {
	fake.getSelectedMutex.Lock()
	defer fake.getSelectedMutex.Unlock()
	fake.GetSelectedStub = stub
}

func (fake *FakeSelectionComponent) GetSelectedReturns(result1 string) {
	fake.getSelectedMutex.Lock()
	defer fake.getSelectedMutex.Unlock()
	fake.GetSelectedStub = nil
	fake.getSelectedReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSelectionComponent) GetSelectedReturnsOnCall(i int, result1 string) {
	fake.getSelectedMutex.Lock()
	defer fake.getSelectedMutex.Unlock()
	fake.GetSelectedStub = nil
	if fake.getSelectedReturnsOnCall == nil {
		fake.getSelectedReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getSelectedReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSelectionComponent) GetSelectedIndex() int {
	fake.getSelectedIndexMutex.Lock()
	ret, specificReturn := fake.getSelectedIndexReturnsOnCall[len(fake.getSelectedIndexArgsForCall)]
	fake.getSelectedIndexArgsForCall = append(fake.getSelectedIndexArgsForCall, struct {
	}{})
	stub := fake.GetSelectedIndexStub
	fakeReturns := fake.getSelectedIndexReturns
	fake.recordInvocation("GetSelectedIndex", []interface{}{})
	fake.getSelectedIndexMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelectionComponent) GetSelectedIndexCallCount() int {
	fake.getSelectedIndexMutex.RLock()
	defer fake.getSelectedIndexMutex.RUnlock()
	return len(fake.getSelectedIndexArgsForCall)
}

func (fake *FakeSelectionComponent) GetSelectedIndexCalls(stub func() int) {
	fake.getSelectedIndexMutex.Lock()
	defer fake.getSelectedIndexMutex.Unlock()
	fake.GetSelectedIndexStub = stub
}

func (fake *FakeSelectionComponent) GetSelectedIndexReturns(result1 int) {
	fake.getSelectedIndexMutex.Lock()
	defer fake.getSelectedIndexMutex.Unlock()
	fake.GetSelectedIndexStub = nil
	fake.getSelectedIndexReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeSelectionComponent) GetSelectedIndexReturnsOnCall(i int, result1 int) {
	fake.getSelectedIndexMutex.Lock()
	defer fake.getSelectedIndexMutex.Unlock()
	fake.GetSelectedIndexStub = nil
	if fake.getSelectedIndexReturnsOnCall == nil {
		fake.getSelectedIndexReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getSelectedIndexReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeSelectionComponent) IsCancelled() bool {
	fake.isCancelledMutex.Lock()
	ret, specificReturn := fake.isCancelledReturnsOnCall[len(fake.isCancelledArgsForCall)]
	fake.isCancelledArgsForCall = append(fake.isCancelledArgsForCall, struct {
	}{})
	stub := fake.IsCancelledStub
	fakeReturns := fake.isCancelledReturns
	fake.recordInvocation("IsCancelled", []interface{}{})
	fake.isCancelledMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelectionComponent) IsCancelledCallCount() int {
	fake.isCancelledMutex.RLock()
	defer fake.isCancelledMutex.RUnlock()
	return len(fake.isCancelledArgsForCall)
}

func (fake *FakeSelectionComponent) IsCancelledCalls(stub func() bool) {
	fake.isCancelledMutex.Lock()
	defer fake.isCancelledMutex.Unlock()
	fake.IsCancelledStub = stub
}

func (fake *FakeSelectionComponent) IsCancelledReturns(result1 bool) {
	fake.isCancelledMutex.Lock()
	defer fake.isCancelledMutex.Unlock()
	fake.IsCancelledStub = nil
	fake.isCancelledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSelectionComponent) IsCancelledReturnsOnCall(i int, result1 bool) {
	fake.isCancelledMutex.Lock()
	defer fake.isCancelledMutex.Unlock()
	fake.IsCancelledStub = nil
	if fake.isCancelledReturnsOnCall == nil {
		fake.isCancelledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isCancelledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSelectionComponent) IsSelected() bool {
	fake.isSelectedMutex.Lock()
	ret, specificReturn := fake.isSelectedReturnsOnCall[len(fake.isSelectedArgsForCall)]
	fake.isSelectedArgsForCall = append(fake.isSelectedArgsForCall, struct {
	}{})
	stub := fake.IsSelectedStub
	fakeReturns := fake.isSelectedReturns
	fake.recordInvocation("IsSelected", []interface{}{})
	fake.isSelectedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelectionComponent) IsSelectedCallCount() int {
	fake.isSelectedMutex.RLock()
	defer fake.isSelectedMutex.RUnlock()
	return len(fake.isSelectedArgsForCall)
}

func (fake *FakeSelectionComponent) IsSelectedCalls(stub func() bool) {
	fake.isSelectedMutex.Lock()
	defer fake.isSelectedMutex.Unlock()
	fake.IsSelectedStub = stub
}

func (fake *FakeSelectionComponent) IsSelectedReturns(result1 bool) {
	fake.isSelectedMutex.Lock()
	defer fake.isSelectedMutex.Unlock()
	fake.IsSelectedStub = nil
	fake.isSelectedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSelectionComponent) IsSelectedReturnsOnCall(i int, result1 bool) {
	fake.isSelectedMutex.Lock()
	defer fake.isSelectedMutex.Unlock()
	fake.IsSelectedStub = nil
	if fake.isSelectedReturnsOnCall == nil {
		fake.isSelectedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isSelectedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSelectionComponent) Render() string {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
	}{})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSelectionComponent) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeSelectionComponent) RenderCalls(stub func() string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeSelectionComponent) RenderReturns(result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSelectionComponent) RenderReturnsOnCall(i int, result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSelectionComponent) SetHeight(arg1 int) {
	fake.setHeightMutex.Lock()
	fake.setHeightArgsForCall = append(fake.setHeightArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetHeightStub
	fake.recordInvocation("SetHeight", []interface{}{arg1})
	fake.setHeightMutex.Unlock()
	if stub != nil {
		fake.SetHeightStub(arg1)
	}
}

func (fake *FakeSelectionComponent) SetHeightCallCount() int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	return len(fake.setHeightArgsForCall)
}

func (fake *FakeSelectionComponent) SetHeightCalls(stub func(int)) {
	fake.setHeightMutex.Lock()
	defer fake.setHeightMutex.Unlock()
	fake.SetHeightStub = stub
}

func (fake *FakeSelectionComponent) SetHeightArgsForCall(i int) int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	argsForCall := fake.setHeightArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSelectionComponent) SetOptions(arg1 []string) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setOptionsMutex.Lock()
	fake.setOptionsArgsForCall = append(fake.setOptionsArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.SetOptionsStub
	fake.recordInvocation("SetOptions", []interface{}{arg1Copy})
	fake.setOptionsMutex.Unlock()
	if stub != nil {
		fake.SetOptionsStub(arg1)
	}
}

func (fake *FakeSelectionComponent) SetOptionsCallCount() int {
	fake.setOptionsMutex.RLock()
	defer fake.setOptionsMutex.RUnlock()
	return len(fake.setOptionsArgsForCall)
}

func (fake *FakeSelectionComponent) SetOptionsCalls(stub func([]string)) {
	fake.setOptionsMutex.Lock()
	defer fake.setOptionsMutex.Unlock()
	fake.SetOptionsStub = stub
}

func (fake *FakeSelectionComponent) SetOptionsArgsForCall(i int) []string {
	fake.setOptionsMutex.RLock()
	defer fake.setOptionsMutex.RUnlock()
	argsForCall := fake.setOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSelectionComponent) SetSelected(arg1 int) {
	fake.setSelectedMutex.Lock()
	fake.setSelectedArgsForCall = append(fake.setSelectedArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetSelectedStub
	fake.recordInvocation("SetSelected", []interface{}{arg1})
	fake.setSelectedMutex.Unlock()
	if stub != nil {
		fake.SetSelectedStub(arg1)
	}
}

func (fake *FakeSelectionComponent) SetSelectedCallCount() int {
	fake.setSelectedMutex.RLock()
	defer fake.setSelectedMutex.RUnlock()
	return len(fake.setSelectedArgsForCall)
}

func (fake *FakeSelectionComponent) SetSelectedCalls(stub func(int)) {
	fake.setSelectedMutex.Lock()
	defer fake.setSelectedMutex.Unlock()
	fake.SetSelectedStub = stub
}

func (fake *FakeSelectionComponent) SetSelectedArgsForCall(i int) int {
	fake.setSelectedMutex.RLock()
	defer fake.setSelectedMutex.RUnlock()
	argsForCall := fake.setSelectedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSelectionComponent) SetWidth(arg1 int) {
	fake.setWidthMutex.Lock()
	fake.setWidthArgsForCall = append(fake.setWidthArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetWidthStub
	fake.recordInvocation("SetWidth", []interface{}{arg1})
	fake.setWidthMutex.Unlock()
	if stub != nil {
		fake.SetWidthStub(arg1)
	}
}

func (fake *FakeSelectionComponent) SetWidthCallCount() int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	return len(fake.setWidthArgsForCall)
}

func (fake *FakeSelectionComponent) SetWidthCalls(stub func(int)) {
	fake.setWidthMutex.Lock()
	defer fake.setWidthMutex.Unlock()
	fake.SetWidthStub = stub
}

func (fake *FakeSelectionComponent) SetWidthArgsForCall(i int) int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	argsForCall := fake.setWidthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSelectionComponent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSelectionComponent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.SelectionComponent = new(FakeSelectionComponent)
