// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeWebSearchService struct {
	IsEnabledStub        func() bool
	isEnabledMutex       sync.RWMutex
	isEnabledArgsForCall []struct {
	}
	isEnabledReturns struct {
		result1 bool
	}
	isEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	SearchDuckDuckGoStub        func(context.Context, string, int) (*domain.WebSearchResponse, error)
	searchDuckDuckGoMutex       sync.RWMutex
	searchDuckDuckGoArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	searchDuckDuckGoReturns struct {
		result1 *domain.WebSearchResponse
		result2 error
	}
	searchDuckDuckGoReturnsOnCall map[int]struct {
		result1 *domain.WebSearchResponse
		result2 error
	}
	SearchGoogleStub        func(context.Context, string, int) (*domain.WebSearchResponse, error)
	searchGoogleMutex       sync.RWMutex
	searchGoogleArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	searchGoogleReturns struct {
		result1 *domain.WebSearchResponse
		result2 error
	}
	searchGoogleReturnsOnCall map[int]struct {
		result1 *domain.WebSearchResponse
		result2 error
	}
	SetEnabledStub        func(bool)
	setEnabledMutex       sync.RWMutex
	setEnabledArgsForCall []struct {
		arg1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWebSearchService) IsEnabled() bool {
	fake.isEnabledMutex.Lock()
	ret, specificReturn := fake.isEnabledReturnsOnCall[len(fake.isEnabledArgsForCall)]
	fake.isEnabledArgsForCall = append(fake.isEnabledArgsForCall, struct {
	}{})
	stub := fake.IsEnabledStub
	fakeReturns := fake.isEnabledReturns
	fake.recordInvocation("IsEnabled", []interface{}{})
	fake.isEnabledMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWebSearchService) IsEnabledCallCount() int {
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	return len(fake.isEnabledArgsForCall)
}

func (fake *FakeWebSearchService) IsEnabledCalls(stub func() bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = stub
}

func (fake *FakeWebSearchService) IsEnabledReturns(result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	fake.isEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeWebSearchService) IsEnabledReturnsOnCall(i int, result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	if fake.isEnabledReturnsOnCall == nil {
		fake.isEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeWebSearchService) SearchDuckDuckGo(arg1 context.Context, arg2 string, arg3 int) (*domain.WebSearchResponse, error) {
	fake.searchDuckDuckGoMutex.Lock()
	ret, specificReturn := fake.searchDuckDuckGoReturnsOnCall[len(fake.searchDuckDuckGoArgsForCall)]
	fake.searchDuckDuckGoArgsForCall = append(fake.searchDuckDuckGoArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SearchDuckDuckGoStub
	fakeReturns := fake.searchDuckDuckGoReturns
	fake.recordInvocation("SearchDuckDuckGo", []interface{}{arg1, arg2, arg3})
	fake.searchDuckDuckGoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWebSearchService) SearchDuckDuckGoCallCount() int {
	fake.searchDuckDuckGoMutex.RLock()
	defer fake.searchDuckDuckGoMutex.RUnlock()
	return len(fake.searchDuckDuckGoArgsForCall)
}

func (fake *FakeWebSearchService) SearchDuckDuckGoCalls(stub func(context.Context, string, int) (*domain.WebSearchResponse, error)) {
	fake.searchDuckDuckGoMutex.Lock()
	defer fake.searchDuckDuckGoMutex.Unlock()
	fake.SearchDuckDuckGoStub = stub
}

func (fake *FakeWebSearchService) SearchDuckDuckGoArgsForCall(i int) (context.Context, string, int) {
	fake.searchDuckDuckGoMutex.RLock()
	defer fake.searchDuckDuckGoMutex.RUnlock()
	argsForCall := fake.searchDuckDuckGoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWebSearchService) SearchDuckDuckGoReturns(result1 *domain.WebSearchResponse, result2 error) {
	fake.searchDuckDuckGoMutex.Lock()
	defer fake.searchDuckDuckGoMutex.Unlock()
	fake.SearchDuckDuckGoStub = nil
	fake.searchDuckDuckGoReturns = struct {
		result1 *domain.WebSearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeWebSearchService) SearchDuckDuckGoReturnsOnCall(i int, result1 *domain.WebSearchResponse, result2 error) {
	fake.searchDuckDuckGoMutex.Lock()
	defer fake.searchDuckDuckGoMutex.Unlock()
	fake.SearchDuckDuckGoStub = nil
	if fake.searchDuckDuckGoReturnsOnCall == nil {
		fake.searchDuckDuckGoReturnsOnCall = make(map[int]struct {
			result1 *domain.WebSearchResponse
			result2 error
		})
	}
	fake.searchDuckDuckGoReturnsOnCall[i] = struct {
		result1 *domain.WebSearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeWebSearchService) SearchGoogle(arg1 context.Context, arg2 string, arg3 int) (*domain.WebSearchResponse, error) {
	fake.searchGoogleMutex.Lock()
	ret, specificReturn := fake.searchGoogleReturnsOnCall[len(fake.searchGoogleArgsForCall)]
	fake.searchGoogleArgsForCall = append(fake.searchGoogleArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SearchGoogleStub
	fakeReturns := fake.searchGoogleReturns
	fake.recordInvocation("SearchGoogle", []interface{}{arg1, arg2, arg3})
	fake.searchGoogleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWebSearchService) SearchGoogleCallCount() int {
	fake.searchGoogleMutex.RLock()
	defer fake.searchGoogleMutex.RUnlock()
	return len(fake.searchGoogleArgsForCall)
}

func (fake *FakeWebSearchService) SearchGoogleCalls(stub func(context.Context, string, int) (*domain.WebSearchResponse, error)) {
	fake.searchGoogleMutex.Lock()
	defer fake.searchGoogleMutex.Unlock()
	fake.SearchGoogleStub = stub
}

func (fake *FakeWebSearchService) SearchGoogleArgsForCall(i int) (context.Context, string, int) {
	fake.searchGoogleMutex.RLock()
	defer fake.searchGoogleMutex.RUnlock()
	argsForCall := fake.searchGoogleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWebSearchService) SearchGoogleReturns(result1 *domain.WebSearchResponse, result2 error) {
	fake.searchGoogleMutex.Lock()
	defer fake.searchGoogleMutex.Unlock()
	fake.SearchGoogleStub = nil
	fake.searchGoogleReturns = struct {
		result1 *domain.WebSearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeWebSearchService) SearchGoogleReturnsOnCall(i int, result1 *domain.WebSearchResponse, result2 error) {
	fake.searchGoogleMutex.Lock()
	defer fake.searchGoogleMutex.Unlock()
	fake.SearchGoogleStub = nil
	if fake.searchGoogleReturnsOnCall == nil {
		fake.searchGoogleReturnsOnCall = make(map[int]struct {
			result1 *domain.WebSearchResponse
			result2 error
		})
	}
	fake.searchGoogleReturnsOnCall[i] = struct {
		result1 *domain.WebSearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeWebSearchService) SetEnabled(arg1 bool) {
	fake.setEnabledMutex.Lock()
	fake.setEnabledArgsForCall = append(fake.setEnabledArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.SetEnabledStub
	fake.recordInvocation("SetEnabled", []interface{}{arg1})
	fake.setEnabledMutex.Unlock()
	if stub != nil {
		fake.SetEnabledStub(arg1)
	}
}

func (fake *FakeWebSearchService) SetEnabledCallCount() int {
	fake.setEnabledMutex.RLock()
	defer fake.setEnabledMutex.RUnlock()
	return len(fake.setEnabledArgsForCall)
}

func (fake *FakeWebSearchService) SetEnabledCalls(stub func(bool)) {
	fake.setEnabledMutex.Lock()
	defer fake.setEnabledMutex.Unlock()
	fake.SetEnabledStub = stub
}

func (fake *FakeWebSearchService) SetEnabledArgsForCall(i int) bool {
	fake.setEnabledMutex.RLock()
	defer fake.setEnabledMutex.RUnlock()
	argsForCall := fake.setEnabledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWebSearchService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWebSearchService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.WebSearchService = new(FakeWebSearchService)
