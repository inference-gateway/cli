// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeModelService struct {
	GetCurrentModelStub        func() string
	getCurrentModelMutex       sync.RWMutex
	getCurrentModelArgsForCall []struct {
	}
	getCurrentModelReturns struct {
		result1 string
	}
	getCurrentModelReturnsOnCall map[int]struct {
		result1 string
	}
	IsModelAvailableStub        func(string) bool
	isModelAvailableMutex       sync.RWMutex
	isModelAvailableArgsForCall []struct {
		arg1 string
	}
	isModelAvailableReturns struct {
		result1 bool
	}
	isModelAvailableReturnsOnCall map[int]struct {
		result1 bool
	}
	ListModelsStub        func(context.Context) ([]string, error)
	listModelsMutex       sync.RWMutex
	listModelsArgsForCall []struct {
		arg1 context.Context
	}
	listModelsReturns struct {
		result1 []string
		result2 error
	}
	listModelsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	SelectModelStub        func(string) error
	selectModelMutex       sync.RWMutex
	selectModelArgsForCall []struct {
		arg1 string
	}
	selectModelReturns struct {
		result1 error
	}
	selectModelReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateModelStub        func(string) error
	validateModelMutex       sync.RWMutex
	validateModelArgsForCall []struct {
		arg1 string
	}
	validateModelReturns struct {
		result1 error
	}
	validateModelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeModelService) GetCurrentModel() string {
	fake.getCurrentModelMutex.Lock()
	ret, specificReturn := fake.getCurrentModelReturnsOnCall[len(fake.getCurrentModelArgsForCall)]
	fake.getCurrentModelArgsForCall = append(fake.getCurrentModelArgsForCall, struct {
	}{})
	stub := fake.GetCurrentModelStub
	fakeReturns := fake.getCurrentModelReturns
	fake.recordInvocation("GetCurrentModel", []interface{}{})
	fake.getCurrentModelMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeModelService) GetCurrentModelCallCount() int {
	fake.getCurrentModelMutex.RLock()
	defer fake.getCurrentModelMutex.RUnlock()
	return len(fake.getCurrentModelArgsForCall)
}

func (fake *FakeModelService) GetCurrentModelCalls(stub func() string) {
	fake.getCurrentModelMutex.Lock()
	defer fake.getCurrentModelMutex.Unlock()
	fake.GetCurrentModelStub = stub
}

func (fake *FakeModelService) GetCurrentModelReturns(result1 string) {
	fake.getCurrentModelMutex.Lock()
	defer fake.getCurrentModelMutex.Unlock()
	fake.GetCurrentModelStub = nil
	fake.getCurrentModelReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeModelService) GetCurrentModelReturnsOnCall(i int, result1 string) {
	fake.getCurrentModelMutex.Lock()
	defer fake.getCurrentModelMutex.Unlock()
	fake.GetCurrentModelStub = nil
	if fake.getCurrentModelReturnsOnCall == nil {
		fake.getCurrentModelReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCurrentModelReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeModelService) IsModelAvailable(arg1 string) bool {
	fake.isModelAvailableMutex.Lock()
	ret, specificReturn := fake.isModelAvailableReturnsOnCall[len(fake.isModelAvailableArgsForCall)]
	fake.isModelAvailableArgsForCall = append(fake.isModelAvailableArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsModelAvailableStub
	fakeReturns := fake.isModelAvailableReturns
	fake.recordInvocation("IsModelAvailable", []interface{}{arg1})
	fake.isModelAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeModelService) IsModelAvailableCallCount() int {
	fake.isModelAvailableMutex.RLock()
	defer fake.isModelAvailableMutex.RUnlock()
	return len(fake.isModelAvailableArgsForCall)
}

func (fake *FakeModelService) IsModelAvailableCalls(stub func(string) bool) {
	fake.isModelAvailableMutex.Lock()
	defer fake.isModelAvailableMutex.Unlock()
	fake.IsModelAvailableStub = stub
}

func (fake *FakeModelService) IsModelAvailableArgsForCall(i int) string {
	fake.isModelAvailableMutex.RLock()
	defer fake.isModelAvailableMutex.RUnlock()
	argsForCall := fake.isModelAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModelService) IsModelAvailableReturns(result1 bool) {
	fake.isModelAvailableMutex.Lock()
	defer fake.isModelAvailableMutex.Unlock()
	fake.IsModelAvailableStub = nil
	fake.isModelAvailableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeModelService) IsModelAvailableReturnsOnCall(i int, result1 bool) {
	fake.isModelAvailableMutex.Lock()
	defer fake.isModelAvailableMutex.Unlock()
	fake.IsModelAvailableStub = nil
	if fake.isModelAvailableReturnsOnCall == nil {
		fake.isModelAvailableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isModelAvailableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeModelService) ListModels(arg1 context.Context) ([]string, error) {
	fake.listModelsMutex.Lock()
	ret, specificReturn := fake.listModelsReturnsOnCall[len(fake.listModelsArgsForCall)]
	fake.listModelsArgsForCall = append(fake.listModelsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListModelsStub
	fakeReturns := fake.listModelsReturns
	fake.recordInvocation("ListModels", []interface{}{arg1})
	fake.listModelsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeModelService) ListModelsCallCount() int {
	fake.listModelsMutex.RLock()
	defer fake.listModelsMutex.RUnlock()
	return len(fake.listModelsArgsForCall)
}

func (fake *FakeModelService) ListModelsCalls(stub func(context.Context) ([]string, error)) {
	fake.listModelsMutex.Lock()
	defer fake.listModelsMutex.Unlock()
	fake.ListModelsStub = stub
}

func (fake *FakeModelService) ListModelsArgsForCall(i int) context.Context {
	fake.listModelsMutex.RLock()
	defer fake.listModelsMutex.RUnlock()
	argsForCall := fake.listModelsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModelService) ListModelsReturns(result1 []string, result2 error) {
	fake.listModelsMutex.Lock()
	defer fake.listModelsMutex.Unlock()
	fake.ListModelsStub = nil
	fake.listModelsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeModelService) ListModelsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listModelsMutex.Lock()
	defer fake.listModelsMutex.Unlock()
	fake.ListModelsStub = nil
	if fake.listModelsReturnsOnCall == nil {
		fake.listModelsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listModelsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeModelService) SelectModel(arg1 string) error {
	fake.selectModelMutex.Lock()
	ret, specificReturn := fake.selectModelReturnsOnCall[len(fake.selectModelArgsForCall)]
	fake.selectModelArgsForCall = append(fake.selectModelArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SelectModelStub
	fakeReturns := fake.selectModelReturns
	fake.recordInvocation("SelectModel", []interface{}{arg1})
	fake.selectModelMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeModelService) SelectModelCallCount() int {
	fake.selectModelMutex.RLock()
	defer fake.selectModelMutex.RUnlock()
	return len(fake.selectModelArgsForCall)
}

func (fake *FakeModelService) SelectModelCalls(stub func(string) error) {
	fake.selectModelMutex.Lock()
	defer fake.selectModelMutex.Unlock()
	fake.SelectModelStub = stub
}

func (fake *FakeModelService) SelectModelArgsForCall(i int) string {
	fake.selectModelMutex.RLock()
	defer fake.selectModelMutex.RUnlock()
	argsForCall := fake.selectModelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModelService) SelectModelReturns(result1 error) {
	fake.selectModelMutex.Lock()
	defer fake.selectModelMutex.Unlock()
	fake.SelectModelStub = nil
	fake.selectModelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeModelService) SelectModelReturnsOnCall(i int, result1 error) {
	fake.selectModelMutex.Lock()
	defer fake.selectModelMutex.Unlock()
	fake.SelectModelStub = nil
	if fake.selectModelReturnsOnCall == nil {
		fake.selectModelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.selectModelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeModelService) ValidateModel(arg1 string) error {
	fake.validateModelMutex.Lock()
	ret, specificReturn := fake.validateModelReturnsOnCall[len(fake.validateModelArgsForCall)]
	fake.validateModelArgsForCall = append(fake.validateModelArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateModelStub
	fakeReturns := fake.validateModelReturns
	fake.recordInvocation("ValidateModel", []interface{}{arg1})
	fake.validateModelMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeModelService) ValidateModelCallCount() int {
	fake.validateModelMutex.RLock()
	defer fake.validateModelMutex.RUnlock()
	return len(fake.validateModelArgsForCall)
}

func (fake *FakeModelService) ValidateModelCalls(stub func(string) error) {
	fake.validateModelMutex.Lock()
	defer fake.validateModelMutex.Unlock()
	fake.ValidateModelStub = stub
}

func (fake *FakeModelService) ValidateModelArgsForCall(i int) string {
	fake.validateModelMutex.RLock()
	defer fake.validateModelMutex.RUnlock()
	argsForCall := fake.validateModelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeModelService) ValidateModelReturns(result1 error) {
	fake.validateModelMutex.Lock()
	defer fake.validateModelMutex.Unlock()
	fake.ValidateModelStub = nil
	fake.validateModelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeModelService) ValidateModelReturnsOnCall(i int, result1 error) {
	fake.validateModelMutex.Lock()
	defer fake.validateModelMutex.Unlock()
	fake.ValidateModelStub = nil
	if fake.validateModelReturnsOnCall == nil {
		fake.validateModelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateModelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeModelService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeModelService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ModelService = new(FakeModelService)
