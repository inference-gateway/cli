// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
	"github.com/inference-gateway/cli/internal/infra/storage"
)

type FakeConversationStorage struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteConversationStub        func(context.Context, string) error
	deleteConversationMutex       sync.RWMutex
	deleteConversationArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteConversationReturns struct {
		result1 error
	}
	deleteConversationReturnsOnCall map[int]struct {
		result1 error
	}
	HealthStub        func(context.Context) error
	healthMutex       sync.RWMutex
	healthArgsForCall []struct {
		arg1 context.Context
	}
	healthReturns struct {
		result1 error
	}
	healthReturnsOnCall map[int]struct {
		result1 error
	}
	ListConversationsStub        func(context.Context, int, int) ([]storage.ConversationSummary, error)
	listConversationsMutex       sync.RWMutex
	listConversationsArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	listConversationsReturns struct {
		result1 []storage.ConversationSummary
		result2 error
	}
	listConversationsReturnsOnCall map[int]struct {
		result1 []storage.ConversationSummary
		result2 error
	}
	ListConversationsNeedingTitlesStub        func(context.Context, int) ([]storage.ConversationSummary, error)
	listConversationsNeedingTitlesMutex       sync.RWMutex
	listConversationsNeedingTitlesArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	listConversationsNeedingTitlesReturns struct {
		result1 []storage.ConversationSummary
		result2 error
	}
	listConversationsNeedingTitlesReturnsOnCall map[int]struct {
		result1 []storage.ConversationSummary
		result2 error
	}
	LoadConversationStub        func(context.Context, string) ([]domain.ConversationEntry, storage.ConversationMetadata, error)
	loadConversationMutex       sync.RWMutex
	loadConversationArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	loadConversationReturns struct {
		result1 []domain.ConversationEntry
		result2 storage.ConversationMetadata
		result3 error
	}
	loadConversationReturnsOnCall map[int]struct {
		result1 []domain.ConversationEntry
		result2 storage.ConversationMetadata
		result3 error
	}
	SaveConversationStub        func(context.Context, string, []domain.ConversationEntry, storage.ConversationMetadata) error
	saveConversationMutex       sync.RWMutex
	saveConversationArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []domain.ConversationEntry
		arg4 storage.ConversationMetadata
	}
	saveConversationReturns struct {
		result1 error
	}
	saveConversationReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateConversationMetadataStub        func(context.Context, string, storage.ConversationMetadata) error
	updateConversationMetadataMutex       sync.RWMutex
	updateConversationMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 storage.ConversationMetadata
	}
	updateConversationMetadataReturns struct {
		result1 error
	}
	updateConversationMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConversationStorage) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationStorage) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeConversationStorage) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeConversationStorage) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) DeleteConversation(arg1 context.Context, arg2 string) error {
	fake.deleteConversationMutex.Lock()
	ret, specificReturn := fake.deleteConversationReturnsOnCall[len(fake.deleteConversationArgsForCall)]
	fake.deleteConversationArgsForCall = append(fake.deleteConversationArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteConversationStub
	fakeReturns := fake.deleteConversationReturns
	fake.recordInvocation("DeleteConversation", []interface{}{arg1, arg2})
	fake.deleteConversationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationStorage) DeleteConversationCallCount() int {
	fake.deleteConversationMutex.RLock()
	defer fake.deleteConversationMutex.RUnlock()
	return len(fake.deleteConversationArgsForCall)
}

func (fake *FakeConversationStorage) DeleteConversationCalls(stub func(context.Context, string) error) {
	fake.deleteConversationMutex.Lock()
	defer fake.deleteConversationMutex.Unlock()
	fake.DeleteConversationStub = stub
}

func (fake *FakeConversationStorage) DeleteConversationArgsForCall(i int) (context.Context, string) {
	fake.deleteConversationMutex.RLock()
	defer fake.deleteConversationMutex.RUnlock()
	argsForCall := fake.deleteConversationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConversationStorage) DeleteConversationReturns(result1 error) {
	fake.deleteConversationMutex.Lock()
	defer fake.deleteConversationMutex.Unlock()
	fake.DeleteConversationStub = nil
	fake.deleteConversationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) DeleteConversationReturnsOnCall(i int, result1 error) {
	fake.deleteConversationMutex.Lock()
	defer fake.deleteConversationMutex.Unlock()
	fake.DeleteConversationStub = nil
	if fake.deleteConversationReturnsOnCall == nil {
		fake.deleteConversationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteConversationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) Health(arg1 context.Context) error {
	fake.healthMutex.Lock()
	ret, specificReturn := fake.healthReturnsOnCall[len(fake.healthArgsForCall)]
	fake.healthArgsForCall = append(fake.healthArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.HealthStub
	fakeReturns := fake.healthReturns
	fake.recordInvocation("Health", []interface{}{arg1})
	fake.healthMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationStorage) HealthCallCount() int {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	return len(fake.healthArgsForCall)
}

func (fake *FakeConversationStorage) HealthCalls(stub func(context.Context) error) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = stub
}

func (fake *FakeConversationStorage) HealthArgsForCall(i int) context.Context {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	argsForCall := fake.healthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConversationStorage) HealthReturns(result1 error) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = nil
	fake.healthReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) HealthReturnsOnCall(i int, result1 error) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = nil
	if fake.healthReturnsOnCall == nil {
		fake.healthReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.healthReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) ListConversations(arg1 context.Context, arg2 int, arg3 int) ([]storage.ConversationSummary, error) {
	fake.listConversationsMutex.Lock()
	ret, specificReturn := fake.listConversationsReturnsOnCall[len(fake.listConversationsArgsForCall)]
	fake.listConversationsArgsForCall = append(fake.listConversationsArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ListConversationsStub
	fakeReturns := fake.listConversationsReturns
	fake.recordInvocation("ListConversations", []interface{}{arg1, arg2, arg3})
	fake.listConversationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConversationStorage) ListConversationsCallCount() int {
	fake.listConversationsMutex.RLock()
	defer fake.listConversationsMutex.RUnlock()
	return len(fake.listConversationsArgsForCall)
}

func (fake *FakeConversationStorage) ListConversationsCalls(stub func(context.Context, int, int) ([]storage.ConversationSummary, error)) {
	fake.listConversationsMutex.Lock()
	defer fake.listConversationsMutex.Unlock()
	fake.ListConversationsStub = stub
}

func (fake *FakeConversationStorage) ListConversationsArgsForCall(i int) (context.Context, int, int) {
	fake.listConversationsMutex.RLock()
	defer fake.listConversationsMutex.RUnlock()
	argsForCall := fake.listConversationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeConversationStorage) ListConversationsReturns(result1 []storage.ConversationSummary, result2 error) {
	fake.listConversationsMutex.Lock()
	defer fake.listConversationsMutex.Unlock()
	fake.ListConversationsStub = nil
	fake.listConversationsReturns = struct {
		result1 []storage.ConversationSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeConversationStorage) ListConversationsReturnsOnCall(i int, result1 []storage.ConversationSummary, result2 error) {
	fake.listConversationsMutex.Lock()
	defer fake.listConversationsMutex.Unlock()
	fake.ListConversationsStub = nil
	if fake.listConversationsReturnsOnCall == nil {
		fake.listConversationsReturnsOnCall = make(map[int]struct {
			result1 []storage.ConversationSummary
			result2 error
		})
	}
	fake.listConversationsReturnsOnCall[i] = struct {
		result1 []storage.ConversationSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeConversationStorage) ListConversationsNeedingTitles(arg1 context.Context, arg2 int) ([]storage.ConversationSummary, error) {
	fake.listConversationsNeedingTitlesMutex.Lock()
	ret, specificReturn := fake.listConversationsNeedingTitlesReturnsOnCall[len(fake.listConversationsNeedingTitlesArgsForCall)]
	fake.listConversationsNeedingTitlesArgsForCall = append(fake.listConversationsNeedingTitlesArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.ListConversationsNeedingTitlesStub
	fakeReturns := fake.listConversationsNeedingTitlesReturns
	fake.recordInvocation("ListConversationsNeedingTitles", []interface{}{arg1, arg2})
	fake.listConversationsNeedingTitlesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConversationStorage) ListConversationsNeedingTitlesCallCount() int {
	fake.listConversationsNeedingTitlesMutex.RLock()
	defer fake.listConversationsNeedingTitlesMutex.RUnlock()
	return len(fake.listConversationsNeedingTitlesArgsForCall)
}

func (fake *FakeConversationStorage) ListConversationsNeedingTitlesCalls(stub func(context.Context, int) ([]storage.ConversationSummary, error)) {
	fake.listConversationsNeedingTitlesMutex.Lock()
	defer fake.listConversationsNeedingTitlesMutex.Unlock()
	fake.ListConversationsNeedingTitlesStub = stub
}

func (fake *FakeConversationStorage) ListConversationsNeedingTitlesArgsForCall(i int) (context.Context, int) {
	fake.listConversationsNeedingTitlesMutex.RLock()
	defer fake.listConversationsNeedingTitlesMutex.RUnlock()
	argsForCall := fake.listConversationsNeedingTitlesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConversationStorage) ListConversationsNeedingTitlesReturns(result1 []storage.ConversationSummary, result2 error) {
	fake.listConversationsNeedingTitlesMutex.Lock()
	defer fake.listConversationsNeedingTitlesMutex.Unlock()
	fake.ListConversationsNeedingTitlesStub = nil
	fake.listConversationsNeedingTitlesReturns = struct {
		result1 []storage.ConversationSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeConversationStorage) ListConversationsNeedingTitlesReturnsOnCall(i int, result1 []storage.ConversationSummary, result2 error) {
	fake.listConversationsNeedingTitlesMutex.Lock()
	defer fake.listConversationsNeedingTitlesMutex.Unlock()
	fake.ListConversationsNeedingTitlesStub = nil
	if fake.listConversationsNeedingTitlesReturnsOnCall == nil {
		fake.listConversationsNeedingTitlesReturnsOnCall = make(map[int]struct {
			result1 []storage.ConversationSummary
			result2 error
		})
	}
	fake.listConversationsNeedingTitlesReturnsOnCall[i] = struct {
		result1 []storage.ConversationSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeConversationStorage) LoadConversation(arg1 context.Context, arg2 string) ([]domain.ConversationEntry, storage.ConversationMetadata, error) {
	fake.loadConversationMutex.Lock()
	ret, specificReturn := fake.loadConversationReturnsOnCall[len(fake.loadConversationArgsForCall)]
	fake.loadConversationArgsForCall = append(fake.loadConversationArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.LoadConversationStub
	fakeReturns := fake.loadConversationReturns
	fake.recordInvocation("LoadConversation", []interface{}{arg1, arg2})
	fake.loadConversationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeConversationStorage) LoadConversationCallCount() int {
	fake.loadConversationMutex.RLock()
	defer fake.loadConversationMutex.RUnlock()
	return len(fake.loadConversationArgsForCall)
}

func (fake *FakeConversationStorage) LoadConversationCalls(stub func(context.Context, string) ([]domain.ConversationEntry, storage.ConversationMetadata, error)) {
	fake.loadConversationMutex.Lock()
	defer fake.loadConversationMutex.Unlock()
	fake.LoadConversationStub = stub
}

func (fake *FakeConversationStorage) LoadConversationArgsForCall(i int) (context.Context, string) {
	fake.loadConversationMutex.RLock()
	defer fake.loadConversationMutex.RUnlock()
	argsForCall := fake.loadConversationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConversationStorage) LoadConversationReturns(result1 []domain.ConversationEntry, result2 storage.ConversationMetadata, result3 error) {
	fake.loadConversationMutex.Lock()
	defer fake.loadConversationMutex.Unlock()
	fake.LoadConversationStub = nil
	fake.loadConversationReturns = struct {
		result1 []domain.ConversationEntry
		result2 storage.ConversationMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeConversationStorage) LoadConversationReturnsOnCall(i int, result1 []domain.ConversationEntry, result2 storage.ConversationMetadata, result3 error) {
	fake.loadConversationMutex.Lock()
	defer fake.loadConversationMutex.Unlock()
	fake.LoadConversationStub = nil
	if fake.loadConversationReturnsOnCall == nil {
		fake.loadConversationReturnsOnCall = make(map[int]struct {
			result1 []domain.ConversationEntry
			result2 storage.ConversationMetadata
			result3 error
		})
	}
	fake.loadConversationReturnsOnCall[i] = struct {
		result1 []domain.ConversationEntry
		result2 storage.ConversationMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeConversationStorage) SaveConversation(arg1 context.Context, arg2 string, arg3 []domain.ConversationEntry, arg4 storage.ConversationMetadata) error {
	var arg3Copy []domain.ConversationEntry
	if arg3 != nil {
		arg3Copy = make([]domain.ConversationEntry, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.saveConversationMutex.Lock()
	ret, specificReturn := fake.saveConversationReturnsOnCall[len(fake.saveConversationArgsForCall)]
	fake.saveConversationArgsForCall = append(fake.saveConversationArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []domain.ConversationEntry
		arg4 storage.ConversationMetadata
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.SaveConversationStub
	fakeReturns := fake.saveConversationReturns
	fake.recordInvocation("SaveConversation", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.saveConversationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationStorage) SaveConversationCallCount() int {
	fake.saveConversationMutex.RLock()
	defer fake.saveConversationMutex.RUnlock()
	return len(fake.saveConversationArgsForCall)
}

func (fake *FakeConversationStorage) SaveConversationCalls(stub func(context.Context, string, []domain.ConversationEntry, storage.ConversationMetadata) error) {
	fake.saveConversationMutex.Lock()
	defer fake.saveConversationMutex.Unlock()
	fake.SaveConversationStub = stub
}

func (fake *FakeConversationStorage) SaveConversationArgsForCall(i int) (context.Context, string, []domain.ConversationEntry, storage.ConversationMetadata) {
	fake.saveConversationMutex.RLock()
	defer fake.saveConversationMutex.RUnlock()
	argsForCall := fake.saveConversationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeConversationStorage) SaveConversationReturns(result1 error) {
	fake.saveConversationMutex.Lock()
	defer fake.saveConversationMutex.Unlock()
	fake.SaveConversationStub = nil
	fake.saveConversationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) SaveConversationReturnsOnCall(i int, result1 error) {
	fake.saveConversationMutex.Lock()
	defer fake.saveConversationMutex.Unlock()
	fake.SaveConversationStub = nil
	if fake.saveConversationReturnsOnCall == nil {
		fake.saveConversationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveConversationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) UpdateConversationMetadata(arg1 context.Context, arg2 string, arg3 storage.ConversationMetadata) error {
	fake.updateConversationMetadataMutex.Lock()
	ret, specificReturn := fake.updateConversationMetadataReturnsOnCall[len(fake.updateConversationMetadataArgsForCall)]
	fake.updateConversationMetadataArgsForCall = append(fake.updateConversationMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 storage.ConversationMetadata
	}{arg1, arg2, arg3})
	stub := fake.UpdateConversationMetadataStub
	fakeReturns := fake.updateConversationMetadataReturns
	fake.recordInvocation("UpdateConversationMetadata", []interface{}{arg1, arg2, arg3})
	fake.updateConversationMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationStorage) UpdateConversationMetadataCallCount() int {
	fake.updateConversationMetadataMutex.RLock()
	defer fake.updateConversationMetadataMutex.RUnlock()
	return len(fake.updateConversationMetadataArgsForCall)
}

func (fake *FakeConversationStorage) UpdateConversationMetadataCalls(stub func(context.Context, string, storage.ConversationMetadata) error) {
	fake.updateConversationMetadataMutex.Lock()
	defer fake.updateConversationMetadataMutex.Unlock()
	fake.UpdateConversationMetadataStub = stub
}

func (fake *FakeConversationStorage) UpdateConversationMetadataArgsForCall(i int) (context.Context, string, storage.ConversationMetadata) {
	fake.updateConversationMetadataMutex.RLock()
	defer fake.updateConversationMetadataMutex.RUnlock()
	argsForCall := fake.updateConversationMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeConversationStorage) UpdateConversationMetadataReturns(result1 error) {
	fake.updateConversationMetadataMutex.Lock()
	defer fake.updateConversationMetadataMutex.Unlock()
	fake.UpdateConversationMetadataStub = nil
	fake.updateConversationMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) UpdateConversationMetadataReturnsOnCall(i int, result1 error) {
	fake.updateConversationMetadataMutex.Lock()
	defer fake.updateConversationMetadataMutex.Unlock()
	fake.UpdateConversationMetadataStub = nil
	if fake.updateConversationMetadataReturnsOnCall == nil {
		fake.updateConversationMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateConversationMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConversationStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.ConversationStorage = new(FakeConversationStorage)
