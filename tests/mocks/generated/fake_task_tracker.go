// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeTaskTracker struct {
	AddTaskStub        func(string, string)
	addTaskMutex       sync.RWMutex
	addTaskArgsForCall []struct {
		arg1 string
		arg2 string
	}
	ClearAllAgentsStub        func()
	clearAllAgentsMutex       sync.RWMutex
	clearAllAgentsArgsForCall []struct {
	}
	GetAgentForContextStub        func(string) string
	getAgentForContextMutex       sync.RWMutex
	getAgentForContextArgsForCall []struct {
		arg1 string
	}
	getAgentForContextReturns struct {
		result1 string
	}
	getAgentForContextReturnsOnCall map[int]struct {
		result1 string
	}
	GetAllAgentsStub        func() []string
	getAllAgentsMutex       sync.RWMutex
	getAllAgentsArgsForCall []struct {
	}
	getAllAgentsReturns struct {
		result1 []string
	}
	getAllAgentsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetAllContextsStub        func() []string
	getAllContextsMutex       sync.RWMutex
	getAllContextsArgsForCall []struct {
	}
	getAllContextsReturns struct {
		result1 []string
	}
	getAllContextsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetAllPollingTasksStub        func() []string
	getAllPollingTasksMutex       sync.RWMutex
	getAllPollingTasksArgsForCall []struct {
	}
	getAllPollingTasksReturns struct {
		result1 []string
	}
	getAllPollingTasksReturnsOnCall map[int]struct {
		result1 []string
	}
	GetContextForTaskStub        func(string) string
	getContextForTaskMutex       sync.RWMutex
	getContextForTaskArgsForCall []struct {
		arg1 string
	}
	getContextForTaskReturns struct {
		result1 string
	}
	getContextForTaskReturnsOnCall map[int]struct {
		result1 string
	}
	GetContextsForAgentStub        func(string) []string
	getContextsForAgentMutex       sync.RWMutex
	getContextsForAgentArgsForCall []struct {
		arg1 string
	}
	getContextsForAgentReturns struct {
		result1 []string
	}
	getContextsForAgentReturnsOnCall map[int]struct {
		result1 []string
	}
	GetLatestContextForAgentStub        func(string) string
	getLatestContextForAgentMutex       sync.RWMutex
	getLatestContextForAgentArgsForCall []struct {
		arg1 string
	}
	getLatestContextForAgentReturns struct {
		result1 string
	}
	getLatestContextForAgentReturnsOnCall map[int]struct {
		result1 string
	}
	GetLatestTaskForContextStub        func(string) string
	getLatestTaskForContextMutex       sync.RWMutex
	getLatestTaskForContextArgsForCall []struct {
		arg1 string
	}
	getLatestTaskForContextReturns struct {
		result1 string
	}
	getLatestTaskForContextReturnsOnCall map[int]struct {
		result1 string
	}
	GetPollingStateStub        func(string) *domain.TaskPollingState
	getPollingStateMutex       sync.RWMutex
	getPollingStateArgsForCall []struct {
		arg1 string
	}
	getPollingStateReturns struct {
		result1 *domain.TaskPollingState
	}
	getPollingStateReturnsOnCall map[int]struct {
		result1 *domain.TaskPollingState
	}
	GetPollingTasksForContextStub        func(string) []string
	getPollingTasksForContextMutex       sync.RWMutex
	getPollingTasksForContextArgsForCall []struct {
		arg1 string
	}
	getPollingTasksForContextReturns struct {
		result1 []string
	}
	getPollingTasksForContextReturnsOnCall map[int]struct {
		result1 []string
	}
	GetTasksForContextStub        func(string) []string
	getTasksForContextMutex       sync.RWMutex
	getTasksForContextArgsForCall []struct {
		arg1 string
	}
	getTasksForContextReturns struct {
		result1 []string
	}
	getTasksForContextReturnsOnCall map[int]struct {
		result1 []string
	}
	HasContextStub        func(string) bool
	hasContextMutex       sync.RWMutex
	hasContextArgsForCall []struct {
		arg1 string
	}
	hasContextReturns struct {
		result1 bool
	}
	hasContextReturnsOnCall map[int]struct {
		result1 bool
	}
	HasTaskStub        func(string) bool
	hasTaskMutex       sync.RWMutex
	hasTaskArgsForCall []struct {
		arg1 string
	}
	hasTaskReturns struct {
		result1 bool
	}
	hasTaskReturnsOnCall map[int]struct {
		result1 bool
	}
	IsPollingStub        func(string) bool
	isPollingMutex       sync.RWMutex
	isPollingArgsForCall []struct {
		arg1 string
	}
	isPollingReturns struct {
		result1 bool
	}
	isPollingReturnsOnCall map[int]struct {
		result1 bool
	}
	RegisterContextStub        func(string, string)
	registerContextMutex       sync.RWMutex
	registerContextArgsForCall []struct {
		arg1 string
		arg2 string
	}
	RemoveContextStub        func(string)
	removeContextMutex       sync.RWMutex
	removeContextArgsForCall []struct {
		arg1 string
	}
	RemoveTaskStub        func(string)
	removeTaskMutex       sync.RWMutex
	removeTaskArgsForCall []struct {
		arg1 string
	}
	StartPollingStub        func(string, *domain.TaskPollingState)
	startPollingMutex       sync.RWMutex
	startPollingArgsForCall []struct {
		arg1 string
		arg2 *domain.TaskPollingState
	}
	StopPollingStub        func(string)
	stopPollingMutex       sync.RWMutex
	stopPollingArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskTracker) AddTask(arg1 string, arg2 string) {
	fake.addTaskMutex.Lock()
	fake.addTaskArgsForCall = append(fake.addTaskArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddTaskStub
	fake.recordInvocation("AddTask", []interface{}{arg1, arg2})
	fake.addTaskMutex.Unlock()
	if stub != nil {
		fake.AddTaskStub(arg1, arg2)
	}
}

func (fake *FakeTaskTracker) AddTaskCallCount() int {
	fake.addTaskMutex.RLock()
	defer fake.addTaskMutex.RUnlock()
	return len(fake.addTaskArgsForCall)
}

func (fake *FakeTaskTracker) AddTaskCalls(stub func(string, string)) {
	fake.addTaskMutex.Lock()
	defer fake.addTaskMutex.Unlock()
	fake.AddTaskStub = stub
}

func (fake *FakeTaskTracker) AddTaskArgsForCall(i int) (string, string) {
	fake.addTaskMutex.RLock()
	defer fake.addTaskMutex.RUnlock()
	argsForCall := fake.addTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskTracker) ClearAllAgents() {
	fake.clearAllAgentsMutex.Lock()
	fake.clearAllAgentsArgsForCall = append(fake.clearAllAgentsArgsForCall, struct {
	}{})
	stub := fake.ClearAllAgentsStub
	fake.recordInvocation("ClearAllAgents", []interface{}{})
	fake.clearAllAgentsMutex.Unlock()
	if stub != nil {
		fake.ClearAllAgentsStub()
	}
}

func (fake *FakeTaskTracker) ClearAllAgentsCallCount() int {
	fake.clearAllAgentsMutex.RLock()
	defer fake.clearAllAgentsMutex.RUnlock()
	return len(fake.clearAllAgentsArgsForCall)
}

func (fake *FakeTaskTracker) ClearAllAgentsCalls(stub func()) {
	fake.clearAllAgentsMutex.Lock()
	defer fake.clearAllAgentsMutex.Unlock()
	fake.ClearAllAgentsStub = stub
}

func (fake *FakeTaskTracker) GetAgentForContext(arg1 string) string {
	fake.getAgentForContextMutex.Lock()
	ret, specificReturn := fake.getAgentForContextReturnsOnCall[len(fake.getAgentForContextArgsForCall)]
	fake.getAgentForContextArgsForCall = append(fake.getAgentForContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAgentForContextStub
	fakeReturns := fake.getAgentForContextReturns
	fake.recordInvocation("GetAgentForContext", []interface{}{arg1})
	fake.getAgentForContextMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetAgentForContextCallCount() int {
	fake.getAgentForContextMutex.RLock()
	defer fake.getAgentForContextMutex.RUnlock()
	return len(fake.getAgentForContextArgsForCall)
}

func (fake *FakeTaskTracker) GetAgentForContextCalls(stub func(string) string) {
	fake.getAgentForContextMutex.Lock()
	defer fake.getAgentForContextMutex.Unlock()
	fake.GetAgentForContextStub = stub
}

func (fake *FakeTaskTracker) GetAgentForContextArgsForCall(i int) string {
	fake.getAgentForContextMutex.RLock()
	defer fake.getAgentForContextMutex.RUnlock()
	argsForCall := fake.getAgentForContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetAgentForContextReturns(result1 string) {
	fake.getAgentForContextMutex.Lock()
	defer fake.getAgentForContextMutex.Unlock()
	fake.GetAgentForContextStub = nil
	fake.getAgentForContextReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetAgentForContextReturnsOnCall(i int, result1 string) {
	fake.getAgentForContextMutex.Lock()
	defer fake.getAgentForContextMutex.Unlock()
	fake.GetAgentForContextStub = nil
	if fake.getAgentForContextReturnsOnCall == nil {
		fake.getAgentForContextReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAgentForContextReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetAllAgents() []string {
	fake.getAllAgentsMutex.Lock()
	ret, specificReturn := fake.getAllAgentsReturnsOnCall[len(fake.getAllAgentsArgsForCall)]
	fake.getAllAgentsArgsForCall = append(fake.getAllAgentsArgsForCall, struct {
	}{})
	stub := fake.GetAllAgentsStub
	fakeReturns := fake.getAllAgentsReturns
	fake.recordInvocation("GetAllAgents", []interface{}{})
	fake.getAllAgentsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetAllAgentsCallCount() int {
	fake.getAllAgentsMutex.RLock()
	defer fake.getAllAgentsMutex.RUnlock()
	return len(fake.getAllAgentsArgsForCall)
}

func (fake *FakeTaskTracker) GetAllAgentsCalls(stub func() []string) {
	fake.getAllAgentsMutex.Lock()
	defer fake.getAllAgentsMutex.Unlock()
	fake.GetAllAgentsStub = stub
}

func (fake *FakeTaskTracker) GetAllAgentsReturns(result1 []string) {
	fake.getAllAgentsMutex.Lock()
	defer fake.getAllAgentsMutex.Unlock()
	fake.GetAllAgentsStub = nil
	fake.getAllAgentsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetAllAgentsReturnsOnCall(i int, result1 []string) {
	fake.getAllAgentsMutex.Lock()
	defer fake.getAllAgentsMutex.Unlock()
	fake.GetAllAgentsStub = nil
	if fake.getAllAgentsReturnsOnCall == nil {
		fake.getAllAgentsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getAllAgentsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetAllContexts() []string {
	fake.getAllContextsMutex.Lock()
	ret, specificReturn := fake.getAllContextsReturnsOnCall[len(fake.getAllContextsArgsForCall)]
	fake.getAllContextsArgsForCall = append(fake.getAllContextsArgsForCall, struct {
	}{})
	stub := fake.GetAllContextsStub
	fakeReturns := fake.getAllContextsReturns
	fake.recordInvocation("GetAllContexts", []interface{}{})
	fake.getAllContextsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetAllContextsCallCount() int {
	fake.getAllContextsMutex.RLock()
	defer fake.getAllContextsMutex.RUnlock()
	return len(fake.getAllContextsArgsForCall)
}

func (fake *FakeTaskTracker) GetAllContextsCalls(stub func() []string) {
	fake.getAllContextsMutex.Lock()
	defer fake.getAllContextsMutex.Unlock()
	fake.GetAllContextsStub = stub
}

func (fake *FakeTaskTracker) GetAllContextsReturns(result1 []string) {
	fake.getAllContextsMutex.Lock()
	defer fake.getAllContextsMutex.Unlock()
	fake.GetAllContextsStub = nil
	fake.getAllContextsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetAllContextsReturnsOnCall(i int, result1 []string) {
	fake.getAllContextsMutex.Lock()
	defer fake.getAllContextsMutex.Unlock()
	fake.GetAllContextsStub = nil
	if fake.getAllContextsReturnsOnCall == nil {
		fake.getAllContextsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getAllContextsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetAllPollingTasks() []string {
	fake.getAllPollingTasksMutex.Lock()
	ret, specificReturn := fake.getAllPollingTasksReturnsOnCall[len(fake.getAllPollingTasksArgsForCall)]
	fake.getAllPollingTasksArgsForCall = append(fake.getAllPollingTasksArgsForCall, struct {
	}{})
	stub := fake.GetAllPollingTasksStub
	fakeReturns := fake.getAllPollingTasksReturns
	fake.recordInvocation("GetAllPollingTasks", []interface{}{})
	fake.getAllPollingTasksMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetAllPollingTasksCallCount() int {
	fake.getAllPollingTasksMutex.RLock()
	defer fake.getAllPollingTasksMutex.RUnlock()
	return len(fake.getAllPollingTasksArgsForCall)
}

func (fake *FakeTaskTracker) GetAllPollingTasksCalls(stub func() []string) {
	fake.getAllPollingTasksMutex.Lock()
	defer fake.getAllPollingTasksMutex.Unlock()
	fake.GetAllPollingTasksStub = stub
}

func (fake *FakeTaskTracker) GetAllPollingTasksReturns(result1 []string) {
	fake.getAllPollingTasksMutex.Lock()
	defer fake.getAllPollingTasksMutex.Unlock()
	fake.GetAllPollingTasksStub = nil
	fake.getAllPollingTasksReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetAllPollingTasksReturnsOnCall(i int, result1 []string) {
	fake.getAllPollingTasksMutex.Lock()
	defer fake.getAllPollingTasksMutex.Unlock()
	fake.GetAllPollingTasksStub = nil
	if fake.getAllPollingTasksReturnsOnCall == nil {
		fake.getAllPollingTasksReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getAllPollingTasksReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetContextForTask(arg1 string) string {
	fake.getContextForTaskMutex.Lock()
	ret, specificReturn := fake.getContextForTaskReturnsOnCall[len(fake.getContextForTaskArgsForCall)]
	fake.getContextForTaskArgsForCall = append(fake.getContextForTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetContextForTaskStub
	fakeReturns := fake.getContextForTaskReturns
	fake.recordInvocation("GetContextForTask", []interface{}{arg1})
	fake.getContextForTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetContextForTaskCallCount() int {
	fake.getContextForTaskMutex.RLock()
	defer fake.getContextForTaskMutex.RUnlock()
	return len(fake.getContextForTaskArgsForCall)
}

func (fake *FakeTaskTracker) GetContextForTaskCalls(stub func(string) string) {
	fake.getContextForTaskMutex.Lock()
	defer fake.getContextForTaskMutex.Unlock()
	fake.GetContextForTaskStub = stub
}

func (fake *FakeTaskTracker) GetContextForTaskArgsForCall(i int) string {
	fake.getContextForTaskMutex.RLock()
	defer fake.getContextForTaskMutex.RUnlock()
	argsForCall := fake.getContextForTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetContextForTaskReturns(result1 string) {
	fake.getContextForTaskMutex.Lock()
	defer fake.getContextForTaskMutex.Unlock()
	fake.GetContextForTaskStub = nil
	fake.getContextForTaskReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetContextForTaskReturnsOnCall(i int, result1 string) {
	fake.getContextForTaskMutex.Lock()
	defer fake.getContextForTaskMutex.Unlock()
	fake.GetContextForTaskStub = nil
	if fake.getContextForTaskReturnsOnCall == nil {
		fake.getContextForTaskReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getContextForTaskReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetContextsForAgent(arg1 string) []string {
	fake.getContextsForAgentMutex.Lock()
	ret, specificReturn := fake.getContextsForAgentReturnsOnCall[len(fake.getContextsForAgentArgsForCall)]
	fake.getContextsForAgentArgsForCall = append(fake.getContextsForAgentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetContextsForAgentStub
	fakeReturns := fake.getContextsForAgentReturns
	fake.recordInvocation("GetContextsForAgent", []interface{}{arg1})
	fake.getContextsForAgentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetContextsForAgentCallCount() int {
	fake.getContextsForAgentMutex.RLock()
	defer fake.getContextsForAgentMutex.RUnlock()
	return len(fake.getContextsForAgentArgsForCall)
}

func (fake *FakeTaskTracker) GetContextsForAgentCalls(stub func(string) []string) {
	fake.getContextsForAgentMutex.Lock()
	defer fake.getContextsForAgentMutex.Unlock()
	fake.GetContextsForAgentStub = stub
}

func (fake *FakeTaskTracker) GetContextsForAgentArgsForCall(i int) string {
	fake.getContextsForAgentMutex.RLock()
	defer fake.getContextsForAgentMutex.RUnlock()
	argsForCall := fake.getContextsForAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetContextsForAgentReturns(result1 []string) {
	fake.getContextsForAgentMutex.Lock()
	defer fake.getContextsForAgentMutex.Unlock()
	fake.GetContextsForAgentStub = nil
	fake.getContextsForAgentReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetContextsForAgentReturnsOnCall(i int, result1 []string) {
	fake.getContextsForAgentMutex.Lock()
	defer fake.getContextsForAgentMutex.Unlock()
	fake.GetContextsForAgentStub = nil
	if fake.getContextsForAgentReturnsOnCall == nil {
		fake.getContextsForAgentReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getContextsForAgentReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetLatestContextForAgent(arg1 string) string {
	fake.getLatestContextForAgentMutex.Lock()
	ret, specificReturn := fake.getLatestContextForAgentReturnsOnCall[len(fake.getLatestContextForAgentArgsForCall)]
	fake.getLatestContextForAgentArgsForCall = append(fake.getLatestContextForAgentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLatestContextForAgentStub
	fakeReturns := fake.getLatestContextForAgentReturns
	fake.recordInvocation("GetLatestContextForAgent", []interface{}{arg1})
	fake.getLatestContextForAgentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetLatestContextForAgentCallCount() int {
	fake.getLatestContextForAgentMutex.RLock()
	defer fake.getLatestContextForAgentMutex.RUnlock()
	return len(fake.getLatestContextForAgentArgsForCall)
}

func (fake *FakeTaskTracker) GetLatestContextForAgentCalls(stub func(string) string) {
	fake.getLatestContextForAgentMutex.Lock()
	defer fake.getLatestContextForAgentMutex.Unlock()
	fake.GetLatestContextForAgentStub = stub
}

func (fake *FakeTaskTracker) GetLatestContextForAgentArgsForCall(i int) string {
	fake.getLatestContextForAgentMutex.RLock()
	defer fake.getLatestContextForAgentMutex.RUnlock()
	argsForCall := fake.getLatestContextForAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetLatestContextForAgentReturns(result1 string) {
	fake.getLatestContextForAgentMutex.Lock()
	defer fake.getLatestContextForAgentMutex.Unlock()
	fake.GetLatestContextForAgentStub = nil
	fake.getLatestContextForAgentReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetLatestContextForAgentReturnsOnCall(i int, result1 string) {
	fake.getLatestContextForAgentMutex.Lock()
	defer fake.getLatestContextForAgentMutex.Unlock()
	fake.GetLatestContextForAgentStub = nil
	if fake.getLatestContextForAgentReturnsOnCall == nil {
		fake.getLatestContextForAgentReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getLatestContextForAgentReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetLatestTaskForContext(arg1 string) string {
	fake.getLatestTaskForContextMutex.Lock()
	ret, specificReturn := fake.getLatestTaskForContextReturnsOnCall[len(fake.getLatestTaskForContextArgsForCall)]
	fake.getLatestTaskForContextArgsForCall = append(fake.getLatestTaskForContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLatestTaskForContextStub
	fakeReturns := fake.getLatestTaskForContextReturns
	fake.recordInvocation("GetLatestTaskForContext", []interface{}{arg1})
	fake.getLatestTaskForContextMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetLatestTaskForContextCallCount() int {
	fake.getLatestTaskForContextMutex.RLock()
	defer fake.getLatestTaskForContextMutex.RUnlock()
	return len(fake.getLatestTaskForContextArgsForCall)
}

func (fake *FakeTaskTracker) GetLatestTaskForContextCalls(stub func(string) string) {
	fake.getLatestTaskForContextMutex.Lock()
	defer fake.getLatestTaskForContextMutex.Unlock()
	fake.GetLatestTaskForContextStub = stub
}

func (fake *FakeTaskTracker) GetLatestTaskForContextArgsForCall(i int) string {
	fake.getLatestTaskForContextMutex.RLock()
	defer fake.getLatestTaskForContextMutex.RUnlock()
	argsForCall := fake.getLatestTaskForContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetLatestTaskForContextReturns(result1 string) {
	fake.getLatestTaskForContextMutex.Lock()
	defer fake.getLatestTaskForContextMutex.Unlock()
	fake.GetLatestTaskForContextStub = nil
	fake.getLatestTaskForContextReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetLatestTaskForContextReturnsOnCall(i int, result1 string) {
	fake.getLatestTaskForContextMutex.Lock()
	defer fake.getLatestTaskForContextMutex.Unlock()
	fake.GetLatestTaskForContextStub = nil
	if fake.getLatestTaskForContextReturnsOnCall == nil {
		fake.getLatestTaskForContextReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getLatestTaskForContextReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTaskTracker) GetPollingState(arg1 string) *domain.TaskPollingState {
	fake.getPollingStateMutex.Lock()
	ret, specificReturn := fake.getPollingStateReturnsOnCall[len(fake.getPollingStateArgsForCall)]
	fake.getPollingStateArgsForCall = append(fake.getPollingStateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetPollingStateStub
	fakeReturns := fake.getPollingStateReturns
	fake.recordInvocation("GetPollingState", []interface{}{arg1})
	fake.getPollingStateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetPollingStateCallCount() int {
	fake.getPollingStateMutex.RLock()
	defer fake.getPollingStateMutex.RUnlock()
	return len(fake.getPollingStateArgsForCall)
}

func (fake *FakeTaskTracker) GetPollingStateCalls(stub func(string) *domain.TaskPollingState) {
	fake.getPollingStateMutex.Lock()
	defer fake.getPollingStateMutex.Unlock()
	fake.GetPollingStateStub = stub
}

func (fake *FakeTaskTracker) GetPollingStateArgsForCall(i int) string {
	fake.getPollingStateMutex.RLock()
	defer fake.getPollingStateMutex.RUnlock()
	argsForCall := fake.getPollingStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetPollingStateReturns(result1 *domain.TaskPollingState) {
	fake.getPollingStateMutex.Lock()
	defer fake.getPollingStateMutex.Unlock()
	fake.GetPollingStateStub = nil
	fake.getPollingStateReturns = struct {
		result1 *domain.TaskPollingState
	}{result1}
}

func (fake *FakeTaskTracker) GetPollingStateReturnsOnCall(i int, result1 *domain.TaskPollingState) {
	fake.getPollingStateMutex.Lock()
	defer fake.getPollingStateMutex.Unlock()
	fake.GetPollingStateStub = nil
	if fake.getPollingStateReturnsOnCall == nil {
		fake.getPollingStateReturnsOnCall = make(map[int]struct {
			result1 *domain.TaskPollingState
		})
	}
	fake.getPollingStateReturnsOnCall[i] = struct {
		result1 *domain.TaskPollingState
	}{result1}
}

func (fake *FakeTaskTracker) GetPollingTasksForContext(arg1 string) []string {
	fake.getPollingTasksForContextMutex.Lock()
	ret, specificReturn := fake.getPollingTasksForContextReturnsOnCall[len(fake.getPollingTasksForContextArgsForCall)]
	fake.getPollingTasksForContextArgsForCall = append(fake.getPollingTasksForContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetPollingTasksForContextStub
	fakeReturns := fake.getPollingTasksForContextReturns
	fake.recordInvocation("GetPollingTasksForContext", []interface{}{arg1})
	fake.getPollingTasksForContextMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetPollingTasksForContextCallCount() int {
	fake.getPollingTasksForContextMutex.RLock()
	defer fake.getPollingTasksForContextMutex.RUnlock()
	return len(fake.getPollingTasksForContextArgsForCall)
}

func (fake *FakeTaskTracker) GetPollingTasksForContextCalls(stub func(string) []string) {
	fake.getPollingTasksForContextMutex.Lock()
	defer fake.getPollingTasksForContextMutex.Unlock()
	fake.GetPollingTasksForContextStub = stub
}

func (fake *FakeTaskTracker) GetPollingTasksForContextArgsForCall(i int) string {
	fake.getPollingTasksForContextMutex.RLock()
	defer fake.getPollingTasksForContextMutex.RUnlock()
	argsForCall := fake.getPollingTasksForContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetPollingTasksForContextReturns(result1 []string) {
	fake.getPollingTasksForContextMutex.Lock()
	defer fake.getPollingTasksForContextMutex.Unlock()
	fake.GetPollingTasksForContextStub = nil
	fake.getPollingTasksForContextReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetPollingTasksForContextReturnsOnCall(i int, result1 []string) {
	fake.getPollingTasksForContextMutex.Lock()
	defer fake.getPollingTasksForContextMutex.Unlock()
	fake.GetPollingTasksForContextStub = nil
	if fake.getPollingTasksForContextReturnsOnCall == nil {
		fake.getPollingTasksForContextReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getPollingTasksForContextReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetTasksForContext(arg1 string) []string {
	fake.getTasksForContextMutex.Lock()
	ret, specificReturn := fake.getTasksForContextReturnsOnCall[len(fake.getTasksForContextArgsForCall)]
	fake.getTasksForContextArgsForCall = append(fake.getTasksForContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetTasksForContextStub
	fakeReturns := fake.getTasksForContextReturns
	fake.recordInvocation("GetTasksForContext", []interface{}{arg1})
	fake.getTasksForContextMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) GetTasksForContextCallCount() int {
	fake.getTasksForContextMutex.RLock()
	defer fake.getTasksForContextMutex.RUnlock()
	return len(fake.getTasksForContextArgsForCall)
}

func (fake *FakeTaskTracker) GetTasksForContextCalls(stub func(string) []string) {
	fake.getTasksForContextMutex.Lock()
	defer fake.getTasksForContextMutex.Unlock()
	fake.GetTasksForContextStub = stub
}

func (fake *FakeTaskTracker) GetTasksForContextArgsForCall(i int) string {
	fake.getTasksForContextMutex.RLock()
	defer fake.getTasksForContextMutex.RUnlock()
	argsForCall := fake.getTasksForContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) GetTasksForContextReturns(result1 []string) {
	fake.getTasksForContextMutex.Lock()
	defer fake.getTasksForContextMutex.Unlock()
	fake.GetTasksForContextStub = nil
	fake.getTasksForContextReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) GetTasksForContextReturnsOnCall(i int, result1 []string) {
	fake.getTasksForContextMutex.Lock()
	defer fake.getTasksForContextMutex.Unlock()
	fake.GetTasksForContextStub = nil
	if fake.getTasksForContextReturnsOnCall == nil {
		fake.getTasksForContextReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getTasksForContextReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeTaskTracker) HasContext(arg1 string) bool {
	fake.hasContextMutex.Lock()
	ret, specificReturn := fake.hasContextReturnsOnCall[len(fake.hasContextArgsForCall)]
	fake.hasContextArgsForCall = append(fake.hasContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HasContextStub
	fakeReturns := fake.hasContextReturns
	fake.recordInvocation("HasContext", []interface{}{arg1})
	fake.hasContextMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) HasContextCallCount() int {
	fake.hasContextMutex.RLock()
	defer fake.hasContextMutex.RUnlock()
	return len(fake.hasContextArgsForCall)
}

func (fake *FakeTaskTracker) HasContextCalls(stub func(string) bool) {
	fake.hasContextMutex.Lock()
	defer fake.hasContextMutex.Unlock()
	fake.HasContextStub = stub
}

func (fake *FakeTaskTracker) HasContextArgsForCall(i int) string {
	fake.hasContextMutex.RLock()
	defer fake.hasContextMutex.RUnlock()
	argsForCall := fake.hasContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) HasContextReturns(result1 bool) {
	fake.hasContextMutex.Lock()
	defer fake.hasContextMutex.Unlock()
	fake.HasContextStub = nil
	fake.hasContextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTaskTracker) HasContextReturnsOnCall(i int, result1 bool) {
	fake.hasContextMutex.Lock()
	defer fake.hasContextMutex.Unlock()
	fake.HasContextStub = nil
	if fake.hasContextReturnsOnCall == nil {
		fake.hasContextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasContextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTaskTracker) HasTask(arg1 string) bool {
	fake.hasTaskMutex.Lock()
	ret, specificReturn := fake.hasTaskReturnsOnCall[len(fake.hasTaskArgsForCall)]
	fake.hasTaskArgsForCall = append(fake.hasTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HasTaskStub
	fakeReturns := fake.hasTaskReturns
	fake.recordInvocation("HasTask", []interface{}{arg1})
	fake.hasTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) HasTaskCallCount() int {
	fake.hasTaskMutex.RLock()
	defer fake.hasTaskMutex.RUnlock()
	return len(fake.hasTaskArgsForCall)
}

func (fake *FakeTaskTracker) HasTaskCalls(stub func(string) bool) {
	fake.hasTaskMutex.Lock()
	defer fake.hasTaskMutex.Unlock()
	fake.HasTaskStub = stub
}

func (fake *FakeTaskTracker) HasTaskArgsForCall(i int) string {
	fake.hasTaskMutex.RLock()
	defer fake.hasTaskMutex.RUnlock()
	argsForCall := fake.hasTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) HasTaskReturns(result1 bool) {
	fake.hasTaskMutex.Lock()
	defer fake.hasTaskMutex.Unlock()
	fake.HasTaskStub = nil
	fake.hasTaskReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTaskTracker) HasTaskReturnsOnCall(i int, result1 bool) {
	fake.hasTaskMutex.Lock()
	defer fake.hasTaskMutex.Unlock()
	fake.HasTaskStub = nil
	if fake.hasTaskReturnsOnCall == nil {
		fake.hasTaskReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasTaskReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTaskTracker) IsPolling(arg1 string) bool {
	fake.isPollingMutex.Lock()
	ret, specificReturn := fake.isPollingReturnsOnCall[len(fake.isPollingArgsForCall)]
	fake.isPollingArgsForCall = append(fake.isPollingArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsPollingStub
	fakeReturns := fake.isPollingReturns
	fake.recordInvocation("IsPolling", []interface{}{arg1})
	fake.isPollingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskTracker) IsPollingCallCount() int {
	fake.isPollingMutex.RLock()
	defer fake.isPollingMutex.RUnlock()
	return len(fake.isPollingArgsForCall)
}

func (fake *FakeTaskTracker) IsPollingCalls(stub func(string) bool) {
	fake.isPollingMutex.Lock()
	defer fake.isPollingMutex.Unlock()
	fake.IsPollingStub = stub
}

func (fake *FakeTaskTracker) IsPollingArgsForCall(i int) string {
	fake.isPollingMutex.RLock()
	defer fake.isPollingMutex.RUnlock()
	argsForCall := fake.isPollingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) IsPollingReturns(result1 bool) {
	fake.isPollingMutex.Lock()
	defer fake.isPollingMutex.Unlock()
	fake.IsPollingStub = nil
	fake.isPollingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTaskTracker) IsPollingReturnsOnCall(i int, result1 bool) {
	fake.isPollingMutex.Lock()
	defer fake.isPollingMutex.Unlock()
	fake.IsPollingStub = nil
	if fake.isPollingReturnsOnCall == nil {
		fake.isPollingReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isPollingReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTaskTracker) RegisterContext(arg1 string, arg2 string) {
	fake.registerContextMutex.Lock()
	fake.registerContextArgsForCall = append(fake.registerContextArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.RegisterContextStub
	fake.recordInvocation("RegisterContext", []interface{}{arg1, arg2})
	fake.registerContextMutex.Unlock()
	if stub != nil {
		fake.RegisterContextStub(arg1, arg2)
	}
}

func (fake *FakeTaskTracker) RegisterContextCallCount() int {
	fake.registerContextMutex.RLock()
	defer fake.registerContextMutex.RUnlock()
	return len(fake.registerContextArgsForCall)
}

func (fake *FakeTaskTracker) RegisterContextCalls(stub func(string, string)) {
	fake.registerContextMutex.Lock()
	defer fake.registerContextMutex.Unlock()
	fake.RegisterContextStub = stub
}

func (fake *FakeTaskTracker) RegisterContextArgsForCall(i int) (string, string) {
	fake.registerContextMutex.RLock()
	defer fake.registerContextMutex.RUnlock()
	argsForCall := fake.registerContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskTracker) RemoveContext(arg1 string) {
	fake.removeContextMutex.Lock()
	fake.removeContextArgsForCall = append(fake.removeContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveContextStub
	fake.recordInvocation("RemoveContext", []interface{}{arg1})
	fake.removeContextMutex.Unlock()
	if stub != nil {
		fake.RemoveContextStub(arg1)
	}
}

func (fake *FakeTaskTracker) RemoveContextCallCount() int {
	fake.removeContextMutex.RLock()
	defer fake.removeContextMutex.RUnlock()
	return len(fake.removeContextArgsForCall)
}

func (fake *FakeTaskTracker) RemoveContextCalls(stub func(string)) {
	fake.removeContextMutex.Lock()
	defer fake.removeContextMutex.Unlock()
	fake.RemoveContextStub = stub
}

func (fake *FakeTaskTracker) RemoveContextArgsForCall(i int) string {
	fake.removeContextMutex.RLock()
	defer fake.removeContextMutex.RUnlock()
	argsForCall := fake.removeContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) RemoveTask(arg1 string) {
	fake.removeTaskMutex.Lock()
	fake.removeTaskArgsForCall = append(fake.removeTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveTaskStub
	fake.recordInvocation("RemoveTask", []interface{}{arg1})
	fake.removeTaskMutex.Unlock()
	if stub != nil {
		fake.RemoveTaskStub(arg1)
	}
}

func (fake *FakeTaskTracker) RemoveTaskCallCount() int {
	fake.removeTaskMutex.RLock()
	defer fake.removeTaskMutex.RUnlock()
	return len(fake.removeTaskArgsForCall)
}

func (fake *FakeTaskTracker) RemoveTaskCalls(stub func(string)) {
	fake.removeTaskMutex.Lock()
	defer fake.removeTaskMutex.Unlock()
	fake.RemoveTaskStub = stub
}

func (fake *FakeTaskTracker) RemoveTaskArgsForCall(i int) string {
	fake.removeTaskMutex.RLock()
	defer fake.removeTaskMutex.RUnlock()
	argsForCall := fake.removeTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) StartPolling(arg1 string, arg2 *domain.TaskPollingState) {
	fake.startPollingMutex.Lock()
	fake.startPollingArgsForCall = append(fake.startPollingArgsForCall, struct {
		arg1 string
		arg2 *domain.TaskPollingState
	}{arg1, arg2})
	stub := fake.StartPollingStub
	fake.recordInvocation("StartPolling", []interface{}{arg1, arg2})
	fake.startPollingMutex.Unlock()
	if stub != nil {
		fake.StartPollingStub(arg1, arg2)
	}
}

func (fake *FakeTaskTracker) StartPollingCallCount() int {
	fake.startPollingMutex.RLock()
	defer fake.startPollingMutex.RUnlock()
	return len(fake.startPollingArgsForCall)
}

func (fake *FakeTaskTracker) StartPollingCalls(stub func(string, *domain.TaskPollingState)) {
	fake.startPollingMutex.Lock()
	defer fake.startPollingMutex.Unlock()
	fake.StartPollingStub = stub
}

func (fake *FakeTaskTracker) StartPollingArgsForCall(i int) (string, *domain.TaskPollingState) {
	fake.startPollingMutex.RLock()
	defer fake.startPollingMutex.RUnlock()
	argsForCall := fake.startPollingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskTracker) StopPolling(arg1 string) {
	fake.stopPollingMutex.Lock()
	fake.stopPollingArgsForCall = append(fake.stopPollingArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.StopPollingStub
	fake.recordInvocation("StopPolling", []interface{}{arg1})
	fake.stopPollingMutex.Unlock()
	if stub != nil {
		fake.StopPollingStub(arg1)
	}
}

func (fake *FakeTaskTracker) StopPollingCallCount() int {
	fake.stopPollingMutex.RLock()
	defer fake.stopPollingMutex.RUnlock()
	return len(fake.stopPollingArgsForCall)
}

func (fake *FakeTaskTracker) StopPollingCalls(stub func(string)) {
	fake.stopPollingMutex.Lock()
	defer fake.stopPollingMutex.Unlock()
	fake.StopPollingStub = stub
}

func (fake *FakeTaskTracker) StopPollingArgsForCall(i int) string {
	fake.stopPollingMutex.RLock()
	defer fake.stopPollingMutex.RUnlock()
	argsForCall := fake.stopPollingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskTracker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskTracker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.TaskTracker = new(FakeTaskTracker)
