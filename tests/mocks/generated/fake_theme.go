// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/ui"
)

type FakeTheme struct {
	GetAccentColorStub        func() string
	getAccentColorMutex       sync.RWMutex
	getAccentColorArgsForCall []struct {
	}
	getAccentColorReturns struct {
		result1 string
	}
	getAccentColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetAssistantColorStub        func() string
	getAssistantColorMutex       sync.RWMutex
	getAssistantColorArgsForCall []struct {
	}
	getAssistantColorReturns struct {
		result1 string
	}
	getAssistantColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetBorderColorStub        func() string
	getBorderColorMutex       sync.RWMutex
	getBorderColorArgsForCall []struct {
	}
	getBorderColorReturns struct {
		result1 string
	}
	getBorderColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetDiffAddColorStub        func() string
	getDiffAddColorMutex       sync.RWMutex
	getDiffAddColorArgsForCall []struct {
	}
	getDiffAddColorReturns struct {
		result1 string
	}
	getDiffAddColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetDiffRemoveColorStub        func() string
	getDiffRemoveColorMutex       sync.RWMutex
	getDiffRemoveColorArgsForCall []struct {
	}
	getDiffRemoveColorReturns struct {
		result1 string
	}
	getDiffRemoveColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetDimColorStub        func() string
	getDimColorMutex       sync.RWMutex
	getDimColorArgsForCall []struct {
	}
	getDimColorReturns struct {
		result1 string
	}
	getDimColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetErrorColorStub        func() string
	getErrorColorMutex       sync.RWMutex
	getErrorColorArgsForCall []struct {
	}
	getErrorColorReturns struct {
		result1 string
	}
	getErrorColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetStatusColorStub        func() string
	getStatusColorMutex       sync.RWMutex
	getStatusColorArgsForCall []struct {
	}
	getStatusColorReturns struct {
		result1 string
	}
	getStatusColorReturnsOnCall map[int]struct {
		result1 string
	}
	GetUserColorStub        func() string
	getUserColorMutex       sync.RWMutex
	getUserColorArgsForCall []struct {
	}
	getUserColorReturns struct {
		result1 string
	}
	getUserColorReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTheme) GetAccentColor() string {
	fake.getAccentColorMutex.Lock()
	ret, specificReturn := fake.getAccentColorReturnsOnCall[len(fake.getAccentColorArgsForCall)]
	fake.getAccentColorArgsForCall = append(fake.getAccentColorArgsForCall, struct {
	}{})
	stub := fake.GetAccentColorStub
	fakeReturns := fake.getAccentColorReturns
	fake.recordInvocation("GetAccentColor", []interface{}{})
	fake.getAccentColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetAccentColorCallCount() int {
	fake.getAccentColorMutex.RLock()
	defer fake.getAccentColorMutex.RUnlock()
	return len(fake.getAccentColorArgsForCall)
}

func (fake *FakeTheme) GetAccentColorCalls(stub func() string) {
	fake.getAccentColorMutex.Lock()
	defer fake.getAccentColorMutex.Unlock()
	fake.GetAccentColorStub = stub
}

func (fake *FakeTheme) GetAccentColorReturns(result1 string) {
	fake.getAccentColorMutex.Lock()
	defer fake.getAccentColorMutex.Unlock()
	fake.GetAccentColorStub = nil
	fake.getAccentColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetAccentColorReturnsOnCall(i int, result1 string) {
	fake.getAccentColorMutex.Lock()
	defer fake.getAccentColorMutex.Unlock()
	fake.GetAccentColorStub = nil
	if fake.getAccentColorReturnsOnCall == nil {
		fake.getAccentColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAccentColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetAssistantColor() string {
	fake.getAssistantColorMutex.Lock()
	ret, specificReturn := fake.getAssistantColorReturnsOnCall[len(fake.getAssistantColorArgsForCall)]
	fake.getAssistantColorArgsForCall = append(fake.getAssistantColorArgsForCall, struct {
	}{})
	stub := fake.GetAssistantColorStub
	fakeReturns := fake.getAssistantColorReturns
	fake.recordInvocation("GetAssistantColor", []interface{}{})
	fake.getAssistantColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetAssistantColorCallCount() int {
	fake.getAssistantColorMutex.RLock()
	defer fake.getAssistantColorMutex.RUnlock()
	return len(fake.getAssistantColorArgsForCall)
}

func (fake *FakeTheme) GetAssistantColorCalls(stub func() string) {
	fake.getAssistantColorMutex.Lock()
	defer fake.getAssistantColorMutex.Unlock()
	fake.GetAssistantColorStub = stub
}

func (fake *FakeTheme) GetAssistantColorReturns(result1 string) {
	fake.getAssistantColorMutex.Lock()
	defer fake.getAssistantColorMutex.Unlock()
	fake.GetAssistantColorStub = nil
	fake.getAssistantColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetAssistantColorReturnsOnCall(i int, result1 string) {
	fake.getAssistantColorMutex.Lock()
	defer fake.getAssistantColorMutex.Unlock()
	fake.GetAssistantColorStub = nil
	if fake.getAssistantColorReturnsOnCall == nil {
		fake.getAssistantColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAssistantColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetBorderColor() string {
	fake.getBorderColorMutex.Lock()
	ret, specificReturn := fake.getBorderColorReturnsOnCall[len(fake.getBorderColorArgsForCall)]
	fake.getBorderColorArgsForCall = append(fake.getBorderColorArgsForCall, struct {
	}{})
	stub := fake.GetBorderColorStub
	fakeReturns := fake.getBorderColorReturns
	fake.recordInvocation("GetBorderColor", []interface{}{})
	fake.getBorderColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetBorderColorCallCount() int {
	fake.getBorderColorMutex.RLock()
	defer fake.getBorderColorMutex.RUnlock()
	return len(fake.getBorderColorArgsForCall)
}

func (fake *FakeTheme) GetBorderColorCalls(stub func() string) {
	fake.getBorderColorMutex.Lock()
	defer fake.getBorderColorMutex.Unlock()
	fake.GetBorderColorStub = stub
}

func (fake *FakeTheme) GetBorderColorReturns(result1 string) {
	fake.getBorderColorMutex.Lock()
	defer fake.getBorderColorMutex.Unlock()
	fake.GetBorderColorStub = nil
	fake.getBorderColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetBorderColorReturnsOnCall(i int, result1 string) {
	fake.getBorderColorMutex.Lock()
	defer fake.getBorderColorMutex.Unlock()
	fake.GetBorderColorStub = nil
	if fake.getBorderColorReturnsOnCall == nil {
		fake.getBorderColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBorderColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetDiffAddColor() string {
	fake.getDiffAddColorMutex.Lock()
	ret, specificReturn := fake.getDiffAddColorReturnsOnCall[len(fake.getDiffAddColorArgsForCall)]
	fake.getDiffAddColorArgsForCall = append(fake.getDiffAddColorArgsForCall, struct {
	}{})
	stub := fake.GetDiffAddColorStub
	fakeReturns := fake.getDiffAddColorReturns
	fake.recordInvocation("GetDiffAddColor", []interface{}{})
	fake.getDiffAddColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetDiffAddColorCallCount() int {
	fake.getDiffAddColorMutex.RLock()
	defer fake.getDiffAddColorMutex.RUnlock()
	return len(fake.getDiffAddColorArgsForCall)
}

func (fake *FakeTheme) GetDiffAddColorCalls(stub func() string) {
	fake.getDiffAddColorMutex.Lock()
	defer fake.getDiffAddColorMutex.Unlock()
	fake.GetDiffAddColorStub = stub
}

func (fake *FakeTheme) GetDiffAddColorReturns(result1 string) {
	fake.getDiffAddColorMutex.Lock()
	defer fake.getDiffAddColorMutex.Unlock()
	fake.GetDiffAddColorStub = nil
	fake.getDiffAddColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetDiffAddColorReturnsOnCall(i int, result1 string) {
	fake.getDiffAddColorMutex.Lock()
	defer fake.getDiffAddColorMutex.Unlock()
	fake.GetDiffAddColorStub = nil
	if fake.getDiffAddColorReturnsOnCall == nil {
		fake.getDiffAddColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDiffAddColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetDiffRemoveColor() string {
	fake.getDiffRemoveColorMutex.Lock()
	ret, specificReturn := fake.getDiffRemoveColorReturnsOnCall[len(fake.getDiffRemoveColorArgsForCall)]
	fake.getDiffRemoveColorArgsForCall = append(fake.getDiffRemoveColorArgsForCall, struct {
	}{})
	stub := fake.GetDiffRemoveColorStub
	fakeReturns := fake.getDiffRemoveColorReturns
	fake.recordInvocation("GetDiffRemoveColor", []interface{}{})
	fake.getDiffRemoveColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetDiffRemoveColorCallCount() int {
	fake.getDiffRemoveColorMutex.RLock()
	defer fake.getDiffRemoveColorMutex.RUnlock()
	return len(fake.getDiffRemoveColorArgsForCall)
}

func (fake *FakeTheme) GetDiffRemoveColorCalls(stub func() string) {
	fake.getDiffRemoveColorMutex.Lock()
	defer fake.getDiffRemoveColorMutex.Unlock()
	fake.GetDiffRemoveColorStub = stub
}

func (fake *FakeTheme) GetDiffRemoveColorReturns(result1 string) {
	fake.getDiffRemoveColorMutex.Lock()
	defer fake.getDiffRemoveColorMutex.Unlock()
	fake.GetDiffRemoveColorStub = nil
	fake.getDiffRemoveColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetDiffRemoveColorReturnsOnCall(i int, result1 string) {
	fake.getDiffRemoveColorMutex.Lock()
	defer fake.getDiffRemoveColorMutex.Unlock()
	fake.GetDiffRemoveColorStub = nil
	if fake.getDiffRemoveColorReturnsOnCall == nil {
		fake.getDiffRemoveColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDiffRemoveColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetDimColor() string {
	fake.getDimColorMutex.Lock()
	ret, specificReturn := fake.getDimColorReturnsOnCall[len(fake.getDimColorArgsForCall)]
	fake.getDimColorArgsForCall = append(fake.getDimColorArgsForCall, struct {
	}{})
	stub := fake.GetDimColorStub
	fakeReturns := fake.getDimColorReturns
	fake.recordInvocation("GetDimColor", []interface{}{})
	fake.getDimColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetDimColorCallCount() int {
	fake.getDimColorMutex.RLock()
	defer fake.getDimColorMutex.RUnlock()
	return len(fake.getDimColorArgsForCall)
}

func (fake *FakeTheme) GetDimColorCalls(stub func() string) {
	fake.getDimColorMutex.Lock()
	defer fake.getDimColorMutex.Unlock()
	fake.GetDimColorStub = stub
}

func (fake *FakeTheme) GetDimColorReturns(result1 string) {
	fake.getDimColorMutex.Lock()
	defer fake.getDimColorMutex.Unlock()
	fake.GetDimColorStub = nil
	fake.getDimColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetDimColorReturnsOnCall(i int, result1 string) {
	fake.getDimColorMutex.Lock()
	defer fake.getDimColorMutex.Unlock()
	fake.GetDimColorStub = nil
	if fake.getDimColorReturnsOnCall == nil {
		fake.getDimColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDimColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetErrorColor() string {
	fake.getErrorColorMutex.Lock()
	ret, specificReturn := fake.getErrorColorReturnsOnCall[len(fake.getErrorColorArgsForCall)]
	fake.getErrorColorArgsForCall = append(fake.getErrorColorArgsForCall, struct {
	}{})
	stub := fake.GetErrorColorStub
	fakeReturns := fake.getErrorColorReturns
	fake.recordInvocation("GetErrorColor", []interface{}{})
	fake.getErrorColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetErrorColorCallCount() int {
	fake.getErrorColorMutex.RLock()
	defer fake.getErrorColorMutex.RUnlock()
	return len(fake.getErrorColorArgsForCall)
}

func (fake *FakeTheme) GetErrorColorCalls(stub func() string) {
	fake.getErrorColorMutex.Lock()
	defer fake.getErrorColorMutex.Unlock()
	fake.GetErrorColorStub = stub
}

func (fake *FakeTheme) GetErrorColorReturns(result1 string) {
	fake.getErrorColorMutex.Lock()
	defer fake.getErrorColorMutex.Unlock()
	fake.GetErrorColorStub = nil
	fake.getErrorColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetErrorColorReturnsOnCall(i int, result1 string) {
	fake.getErrorColorMutex.Lock()
	defer fake.getErrorColorMutex.Unlock()
	fake.GetErrorColorStub = nil
	if fake.getErrorColorReturnsOnCall == nil {
		fake.getErrorColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getErrorColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetStatusColor() string {
	fake.getStatusColorMutex.Lock()
	ret, specificReturn := fake.getStatusColorReturnsOnCall[len(fake.getStatusColorArgsForCall)]
	fake.getStatusColorArgsForCall = append(fake.getStatusColorArgsForCall, struct {
	}{})
	stub := fake.GetStatusColorStub
	fakeReturns := fake.getStatusColorReturns
	fake.recordInvocation("GetStatusColor", []interface{}{})
	fake.getStatusColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetStatusColorCallCount() int {
	fake.getStatusColorMutex.RLock()
	defer fake.getStatusColorMutex.RUnlock()
	return len(fake.getStatusColorArgsForCall)
}

func (fake *FakeTheme) GetStatusColorCalls(stub func() string) {
	fake.getStatusColorMutex.Lock()
	defer fake.getStatusColorMutex.Unlock()
	fake.GetStatusColorStub = stub
}

func (fake *FakeTheme) GetStatusColorReturns(result1 string) {
	fake.getStatusColorMutex.Lock()
	defer fake.getStatusColorMutex.Unlock()
	fake.GetStatusColorStub = nil
	fake.getStatusColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetStatusColorReturnsOnCall(i int, result1 string) {
	fake.getStatusColorMutex.Lock()
	defer fake.getStatusColorMutex.Unlock()
	fake.GetStatusColorStub = nil
	if fake.getStatusColorReturnsOnCall == nil {
		fake.getStatusColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getStatusColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetUserColor() string {
	fake.getUserColorMutex.Lock()
	ret, specificReturn := fake.getUserColorReturnsOnCall[len(fake.getUserColorArgsForCall)]
	fake.getUserColorArgsForCall = append(fake.getUserColorArgsForCall, struct {
	}{})
	stub := fake.GetUserColorStub
	fakeReturns := fake.getUserColorReturns
	fake.recordInvocation("GetUserColor", []interface{}{})
	fake.getUserColorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTheme) GetUserColorCallCount() int {
	fake.getUserColorMutex.RLock()
	defer fake.getUserColorMutex.RUnlock()
	return len(fake.getUserColorArgsForCall)
}

func (fake *FakeTheme) GetUserColorCalls(stub func() string) {
	fake.getUserColorMutex.Lock()
	defer fake.getUserColorMutex.Unlock()
	fake.GetUserColorStub = stub
}

func (fake *FakeTheme) GetUserColorReturns(result1 string) {
	fake.getUserColorMutex.Lock()
	defer fake.getUserColorMutex.Unlock()
	fake.GetUserColorStub = nil
	fake.getUserColorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) GetUserColorReturnsOnCall(i int, result1 string) {
	fake.getUserColorMutex.Lock()
	defer fake.getUserColorMutex.Unlock()
	fake.GetUserColorStub = nil
	if fake.getUserColorReturnsOnCall == nil {
		fake.getUserColorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getUserColorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTheme) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTheme) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.Theme = new(FakeTheme)
