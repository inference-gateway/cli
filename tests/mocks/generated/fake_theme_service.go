// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeThemeService struct {
	GetCurrentThemeStub        func() domain.Theme
	getCurrentThemeMutex       sync.RWMutex
	getCurrentThemeArgsForCall []struct {
	}
	getCurrentThemeReturns struct {
		result1 domain.Theme
	}
	getCurrentThemeReturnsOnCall map[int]struct {
		result1 domain.Theme
	}
	GetCurrentThemeNameStub        func() string
	getCurrentThemeNameMutex       sync.RWMutex
	getCurrentThemeNameArgsForCall []struct {
	}
	getCurrentThemeNameReturns struct {
		result1 string
	}
	getCurrentThemeNameReturnsOnCall map[int]struct {
		result1 string
	}
	ListThemesStub        func() []string
	listThemesMutex       sync.RWMutex
	listThemesArgsForCall []struct {
	}
	listThemesReturns struct {
		result1 []string
	}
	listThemesReturnsOnCall map[int]struct {
		result1 []string
	}
	SetThemeStub        func(string) error
	setThemeMutex       sync.RWMutex
	setThemeArgsForCall []struct {
		arg1 string
	}
	setThemeReturns struct {
		result1 error
	}
	setThemeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeThemeService) GetCurrentTheme() domain.Theme {
	fake.getCurrentThemeMutex.Lock()
	ret, specificReturn := fake.getCurrentThemeReturnsOnCall[len(fake.getCurrentThemeArgsForCall)]
	fake.getCurrentThemeArgsForCall = append(fake.getCurrentThemeArgsForCall, struct {
	}{})
	stub := fake.GetCurrentThemeStub
	fakeReturns := fake.getCurrentThemeReturns
	fake.recordInvocation("GetCurrentTheme", []interface{}{})
	fake.getCurrentThemeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeThemeService) GetCurrentThemeCallCount() int {
	fake.getCurrentThemeMutex.RLock()
	defer fake.getCurrentThemeMutex.RUnlock()
	return len(fake.getCurrentThemeArgsForCall)
}

func (fake *FakeThemeService) GetCurrentThemeCalls(stub func() domain.Theme) {
	fake.getCurrentThemeMutex.Lock()
	defer fake.getCurrentThemeMutex.Unlock()
	fake.GetCurrentThemeStub = stub
}

func (fake *FakeThemeService) GetCurrentThemeReturns(result1 domain.Theme) {
	fake.getCurrentThemeMutex.Lock()
	defer fake.getCurrentThemeMutex.Unlock()
	fake.GetCurrentThemeStub = nil
	fake.getCurrentThemeReturns = struct {
		result1 domain.Theme
	}{result1}
}

func (fake *FakeThemeService) GetCurrentThemeReturnsOnCall(i int, result1 domain.Theme) {
	fake.getCurrentThemeMutex.Lock()
	defer fake.getCurrentThemeMutex.Unlock()
	fake.GetCurrentThemeStub = nil
	if fake.getCurrentThemeReturnsOnCall == nil {
		fake.getCurrentThemeReturnsOnCall = make(map[int]struct {
			result1 domain.Theme
		})
	}
	fake.getCurrentThemeReturnsOnCall[i] = struct {
		result1 domain.Theme
	}{result1}
}

func (fake *FakeThemeService) GetCurrentThemeName() string {
	fake.getCurrentThemeNameMutex.Lock()
	ret, specificReturn := fake.getCurrentThemeNameReturnsOnCall[len(fake.getCurrentThemeNameArgsForCall)]
	fake.getCurrentThemeNameArgsForCall = append(fake.getCurrentThemeNameArgsForCall, struct {
	}{})
	stub := fake.GetCurrentThemeNameStub
	fakeReturns := fake.getCurrentThemeNameReturns
	fake.recordInvocation("GetCurrentThemeName", []interface{}{})
	fake.getCurrentThemeNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeThemeService) GetCurrentThemeNameCallCount() int {
	fake.getCurrentThemeNameMutex.RLock()
	defer fake.getCurrentThemeNameMutex.RUnlock()
	return len(fake.getCurrentThemeNameArgsForCall)
}

func (fake *FakeThemeService) GetCurrentThemeNameCalls(stub func() string) {
	fake.getCurrentThemeNameMutex.Lock()
	defer fake.getCurrentThemeNameMutex.Unlock()
	fake.GetCurrentThemeNameStub = stub
}

func (fake *FakeThemeService) GetCurrentThemeNameReturns(result1 string) {
	fake.getCurrentThemeNameMutex.Lock()
	defer fake.getCurrentThemeNameMutex.Unlock()
	fake.GetCurrentThemeNameStub = nil
	fake.getCurrentThemeNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeThemeService) GetCurrentThemeNameReturnsOnCall(i int, result1 string) {
	fake.getCurrentThemeNameMutex.Lock()
	defer fake.getCurrentThemeNameMutex.Unlock()
	fake.GetCurrentThemeNameStub = nil
	if fake.getCurrentThemeNameReturnsOnCall == nil {
		fake.getCurrentThemeNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCurrentThemeNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeThemeService) ListThemes() []string {
	fake.listThemesMutex.Lock()
	ret, specificReturn := fake.listThemesReturnsOnCall[len(fake.listThemesArgsForCall)]
	fake.listThemesArgsForCall = append(fake.listThemesArgsForCall, struct {
	}{})
	stub := fake.ListThemesStub
	fakeReturns := fake.listThemesReturns
	fake.recordInvocation("ListThemes", []interface{}{})
	fake.listThemesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeThemeService) ListThemesCallCount() int {
	fake.listThemesMutex.RLock()
	defer fake.listThemesMutex.RUnlock()
	return len(fake.listThemesArgsForCall)
}

func (fake *FakeThemeService) ListThemesCalls(stub func() []string) {
	fake.listThemesMutex.Lock()
	defer fake.listThemesMutex.Unlock()
	fake.ListThemesStub = stub
}

func (fake *FakeThemeService) ListThemesReturns(result1 []string) {
	fake.listThemesMutex.Lock()
	defer fake.listThemesMutex.Unlock()
	fake.ListThemesStub = nil
	fake.listThemesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeThemeService) ListThemesReturnsOnCall(i int, result1 []string) {
	fake.listThemesMutex.Lock()
	defer fake.listThemesMutex.Unlock()
	fake.ListThemesStub = nil
	if fake.listThemesReturnsOnCall == nil {
		fake.listThemesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.listThemesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeThemeService) SetTheme(arg1 string) error {
	fake.setThemeMutex.Lock()
	ret, specificReturn := fake.setThemeReturnsOnCall[len(fake.setThemeArgsForCall)]
	fake.setThemeArgsForCall = append(fake.setThemeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetThemeStub
	fakeReturns := fake.setThemeReturns
	fake.recordInvocation("SetTheme", []interface{}{arg1})
	fake.setThemeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeThemeService) SetThemeCallCount() int {
	fake.setThemeMutex.RLock()
	defer fake.setThemeMutex.RUnlock()
	return len(fake.setThemeArgsForCall)
}

func (fake *FakeThemeService) SetThemeCalls(stub func(string) error) {
	fake.setThemeMutex.Lock()
	defer fake.setThemeMutex.Unlock()
	fake.SetThemeStub = stub
}

func (fake *FakeThemeService) SetThemeArgsForCall(i int) string {
	fake.setThemeMutex.RLock()
	defer fake.setThemeMutex.RUnlock()
	argsForCall := fake.setThemeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeThemeService) SetThemeReturns(result1 error) {
	fake.setThemeMutex.Lock()
	defer fake.setThemeMutex.Unlock()
	fake.SetThemeStub = nil
	fake.setThemeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeThemeService) SetThemeReturnsOnCall(i int, result1 error) {
	fake.setThemeMutex.Lock()
	defer fake.setThemeMutex.Unlock()
	fake.SetThemeStub = nil
	if fake.setThemeReturnsOnCall == nil {
		fake.setThemeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setThemeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeThemeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeThemeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ThemeService = new(FakeThemeService)
