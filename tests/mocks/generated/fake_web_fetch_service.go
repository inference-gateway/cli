// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeWebFetchService struct {
	ClearCacheStub        func()
	clearCacheMutex       sync.RWMutex
	clearCacheArgsForCall []struct {
	}
	FetchContentStub        func(context.Context, string) (*domain.FetchResult, error)
	fetchContentMutex       sync.RWMutex
	fetchContentArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fetchContentReturns struct {
		result1 *domain.FetchResult
		result2 error
	}
	fetchContentReturnsOnCall map[int]struct {
		result1 *domain.FetchResult
		result2 error
	}
	GetCacheStatsStub        func() map[string]any
	getCacheStatsMutex       sync.RWMutex
	getCacheStatsArgsForCall []struct {
	}
	getCacheStatsReturns struct {
		result1 map[string]any
	}
	getCacheStatsReturnsOnCall map[int]struct {
		result1 map[string]any
	}
	ValidateURLStub        func(string) error
	validateURLMutex       sync.RWMutex
	validateURLArgsForCall []struct {
		arg1 string
	}
	validateURLReturns struct {
		result1 error
	}
	validateURLReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWebFetchService) ClearCache() {
	fake.clearCacheMutex.Lock()
	fake.clearCacheArgsForCall = append(fake.clearCacheArgsForCall, struct {
	}{})
	stub := fake.ClearCacheStub
	fake.recordInvocation("ClearCache", []interface{}{})
	fake.clearCacheMutex.Unlock()
	if stub != nil {
		fake.ClearCacheStub()
	}
}

func (fake *FakeWebFetchService) ClearCacheCallCount() int {
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	return len(fake.clearCacheArgsForCall)
}

func (fake *FakeWebFetchService) ClearCacheCalls(stub func()) {
	fake.clearCacheMutex.Lock()
	defer fake.clearCacheMutex.Unlock()
	fake.ClearCacheStub = stub
}

func (fake *FakeWebFetchService) FetchContent(arg1 context.Context, arg2 string) (*domain.FetchResult, error) {
	fake.fetchContentMutex.Lock()
	ret, specificReturn := fake.fetchContentReturnsOnCall[len(fake.fetchContentArgsForCall)]
	fake.fetchContentArgsForCall = append(fake.fetchContentArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FetchContentStub
	fakeReturns := fake.fetchContentReturns
	fake.recordInvocation("FetchContent", []interface{}{arg1, arg2})
	fake.fetchContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWebFetchService) FetchContentCallCount() int {
	fake.fetchContentMutex.RLock()
	defer fake.fetchContentMutex.RUnlock()
	return len(fake.fetchContentArgsForCall)
}

func (fake *FakeWebFetchService) FetchContentCalls(stub func(context.Context, string) (*domain.FetchResult, error)) {
	fake.fetchContentMutex.Lock()
	defer fake.fetchContentMutex.Unlock()
	fake.FetchContentStub = stub
}

func (fake *FakeWebFetchService) FetchContentArgsForCall(i int) (context.Context, string) {
	fake.fetchContentMutex.RLock()
	defer fake.fetchContentMutex.RUnlock()
	argsForCall := fake.fetchContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWebFetchService) FetchContentReturns(result1 *domain.FetchResult, result2 error) {
	fake.fetchContentMutex.Lock()
	defer fake.fetchContentMutex.Unlock()
	fake.FetchContentStub = nil
	fake.fetchContentReturns = struct {
		result1 *domain.FetchResult
		result2 error
	}{result1, result2}
}

func (fake *FakeWebFetchService) FetchContentReturnsOnCall(i int, result1 *domain.FetchResult, result2 error) {
	fake.fetchContentMutex.Lock()
	defer fake.fetchContentMutex.Unlock()
	fake.FetchContentStub = nil
	if fake.fetchContentReturnsOnCall == nil {
		fake.fetchContentReturnsOnCall = make(map[int]struct {
			result1 *domain.FetchResult
			result2 error
		})
	}
	fake.fetchContentReturnsOnCall[i] = struct {
		result1 *domain.FetchResult
		result2 error
	}{result1, result2}
}

func (fake *FakeWebFetchService) GetCacheStats() map[string]any {
	fake.getCacheStatsMutex.Lock()
	ret, specificReturn := fake.getCacheStatsReturnsOnCall[len(fake.getCacheStatsArgsForCall)]
	fake.getCacheStatsArgsForCall = append(fake.getCacheStatsArgsForCall, struct {
	}{})
	stub := fake.GetCacheStatsStub
	fakeReturns := fake.getCacheStatsReturns
	fake.recordInvocation("GetCacheStats", []interface{}{})
	fake.getCacheStatsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWebFetchService) GetCacheStatsCallCount() int {
	fake.getCacheStatsMutex.RLock()
	defer fake.getCacheStatsMutex.RUnlock()
	return len(fake.getCacheStatsArgsForCall)
}

func (fake *FakeWebFetchService) GetCacheStatsCalls(stub func() map[string]any) {
	fake.getCacheStatsMutex.Lock()
	defer fake.getCacheStatsMutex.Unlock()
	fake.GetCacheStatsStub = stub
}

func (fake *FakeWebFetchService) GetCacheStatsReturns(result1 map[string]any) {
	fake.getCacheStatsMutex.Lock()
	defer fake.getCacheStatsMutex.Unlock()
	fake.GetCacheStatsStub = nil
	fake.getCacheStatsReturns = struct {
		result1 map[string]any
	}{result1}
}

func (fake *FakeWebFetchService) GetCacheStatsReturnsOnCall(i int, result1 map[string]any) {
	fake.getCacheStatsMutex.Lock()
	defer fake.getCacheStatsMutex.Unlock()
	fake.GetCacheStatsStub = nil
	if fake.getCacheStatsReturnsOnCall == nil {
		fake.getCacheStatsReturnsOnCall = make(map[int]struct {
			result1 map[string]any
		})
	}
	fake.getCacheStatsReturnsOnCall[i] = struct {
		result1 map[string]any
	}{result1}
}

func (fake *FakeWebFetchService) ValidateURL(arg1 string) error {
	fake.validateURLMutex.Lock()
	ret, specificReturn := fake.validateURLReturnsOnCall[len(fake.validateURLArgsForCall)]
	fake.validateURLArgsForCall = append(fake.validateURLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateURLStub
	fakeReturns := fake.validateURLReturns
	fake.recordInvocation("ValidateURL", []interface{}{arg1})
	fake.validateURLMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWebFetchService) ValidateURLCallCount() int {
	fake.validateURLMutex.RLock()
	defer fake.validateURLMutex.RUnlock()
	return len(fake.validateURLArgsForCall)
}

func (fake *FakeWebFetchService) ValidateURLCalls(stub func(string) error) {
	fake.validateURLMutex.Lock()
	defer fake.validateURLMutex.Unlock()
	fake.ValidateURLStub = stub
}

func (fake *FakeWebFetchService) ValidateURLArgsForCall(i int) string {
	fake.validateURLMutex.RLock()
	defer fake.validateURLMutex.RUnlock()
	argsForCall := fake.validateURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWebFetchService) ValidateURLReturns(result1 error) {
	fake.validateURLMutex.Lock()
	defer fake.validateURLMutex.Unlock()
	fake.ValidateURLStub = nil
	fake.validateURLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWebFetchService) ValidateURLReturnsOnCall(i int, result1 error) {
	fake.validateURLMutex.Lock()
	defer fake.validateURLMutex.Unlock()
	fake.ValidateURLStub = nil
	if fake.validateURLReturnsOnCall == nil {
		fake.validateURLReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateURLReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWebFetchService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWebFetchService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.WebFetchService = new(FakeWebFetchService)
