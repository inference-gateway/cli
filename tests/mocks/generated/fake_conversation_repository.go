// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
	"github.com/inference-gateway/sdk"
)

type FakeConversationRepository struct {
	AddMessageStub        func(domain.ConversationEntry) error
	addMessageMutex       sync.RWMutex
	addMessageArgsForCall []struct {
		arg1 domain.ConversationEntry
	}
	addMessageReturns struct {
		result1 error
	}
	addMessageReturnsOnCall map[int]struct {
		result1 error
	}
	AddTokenUsageStub        func(int, int, int) error
	addTokenUsageMutex       sync.RWMutex
	addTokenUsageArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 int
	}
	addTokenUsageReturns struct {
		result1 error
	}
	addTokenUsageReturnsOnCall map[int]struct {
		result1 error
	}
	ClearStub        func() error
	clearMutex       sync.RWMutex
	clearArgsForCall []struct {
	}
	clearReturns struct {
		result1 error
	}
	clearReturnsOnCall map[int]struct {
		result1 error
	}
	ExportStub        func(domain.ExportFormat) ([]byte, error)
	exportMutex       sync.RWMutex
	exportArgsForCall []struct {
		arg1 domain.ExportFormat
	}
	exportReturns struct {
		result1 []byte
		result2 error
	}
	exportReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetMessageCountStub        func() int
	getMessageCountMutex       sync.RWMutex
	getMessageCountArgsForCall []struct {
	}
	getMessageCountReturns struct {
		result1 int
	}
	getMessageCountReturnsOnCall map[int]struct {
		result1 int
	}
	GetMessagesStub        func() []domain.ConversationEntry
	getMessagesMutex       sync.RWMutex
	getMessagesArgsForCall []struct {
	}
	getMessagesReturns struct {
		result1 []domain.ConversationEntry
	}
	getMessagesReturnsOnCall map[int]struct {
		result1 []domain.ConversationEntry
	}
	GetSessionTokensStub        func() domain.SessionTokenStats
	getSessionTokensMutex       sync.RWMutex
	getSessionTokensArgsForCall []struct {
	}
	getSessionTokensReturns struct {
		result1 domain.SessionTokenStats
	}
	getSessionTokensReturnsOnCall map[int]struct {
		result1 domain.SessionTokenStats
	}
	UpdateLastMessageStub        func(string) error
	updateLastMessageMutex       sync.RWMutex
	updateLastMessageArgsForCall []struct {
		arg1 string
	}
	updateLastMessageReturns struct {
		result1 error
	}
	updateLastMessageReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateLastMessageToolCallsStub        func(*[]sdk.ChatCompletionMessageToolCall) error
	updateLastMessageToolCallsMutex       sync.RWMutex
	updateLastMessageToolCallsArgsForCall []struct {
		arg1 *[]sdk.ChatCompletionMessageToolCall
	}
	updateLastMessageToolCallsReturns struct {
		result1 error
	}
	updateLastMessageToolCallsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConversationRepository) AddMessage(arg1 domain.ConversationEntry) error {
	fake.addMessageMutex.Lock()
	ret, specificReturn := fake.addMessageReturnsOnCall[len(fake.addMessageArgsForCall)]
	fake.addMessageArgsForCall = append(fake.addMessageArgsForCall, struct {
		arg1 domain.ConversationEntry
	}{arg1})
	stub := fake.AddMessageStub
	fakeReturns := fake.addMessageReturns
	fake.recordInvocation("AddMessage", []interface{}{arg1})
	fake.addMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) AddMessageCallCount() int {
	fake.addMessageMutex.RLock()
	defer fake.addMessageMutex.RUnlock()
	return len(fake.addMessageArgsForCall)
}

func (fake *FakeConversationRepository) AddMessageCalls(stub func(domain.ConversationEntry) error) {
	fake.addMessageMutex.Lock()
	defer fake.addMessageMutex.Unlock()
	fake.AddMessageStub = stub
}

func (fake *FakeConversationRepository) AddMessageArgsForCall(i int) domain.ConversationEntry {
	fake.addMessageMutex.RLock()
	defer fake.addMessageMutex.RUnlock()
	argsForCall := fake.addMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConversationRepository) AddMessageReturns(result1 error) {
	fake.addMessageMutex.Lock()
	defer fake.addMessageMutex.Unlock()
	fake.AddMessageStub = nil
	fake.addMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) AddMessageReturnsOnCall(i int, result1 error) {
	fake.addMessageMutex.Lock()
	defer fake.addMessageMutex.Unlock()
	fake.AddMessageStub = nil
	if fake.addMessageReturnsOnCall == nil {
		fake.addMessageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addMessageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) AddTokenUsage(arg1 int, arg2 int, arg3 int) error {
	fake.addTokenUsageMutex.Lock()
	ret, specificReturn := fake.addTokenUsageReturnsOnCall[len(fake.addTokenUsageArgsForCall)]
	fake.addTokenUsageArgsForCall = append(fake.addTokenUsageArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.AddTokenUsageStub
	fakeReturns := fake.addTokenUsageReturns
	fake.recordInvocation("AddTokenUsage", []interface{}{arg1, arg2, arg3})
	fake.addTokenUsageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) AddTokenUsageCallCount() int {
	fake.addTokenUsageMutex.RLock()
	defer fake.addTokenUsageMutex.RUnlock()
	return len(fake.addTokenUsageArgsForCall)
}

func (fake *FakeConversationRepository) AddTokenUsageCalls(stub func(int, int, int) error) {
	fake.addTokenUsageMutex.Lock()
	defer fake.addTokenUsageMutex.Unlock()
	fake.AddTokenUsageStub = stub
}

func (fake *FakeConversationRepository) AddTokenUsageArgsForCall(i int) (int, int, int) {
	fake.addTokenUsageMutex.RLock()
	defer fake.addTokenUsageMutex.RUnlock()
	argsForCall := fake.addTokenUsageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeConversationRepository) AddTokenUsageReturns(result1 error) {
	fake.addTokenUsageMutex.Lock()
	defer fake.addTokenUsageMutex.Unlock()
	fake.AddTokenUsageStub = nil
	fake.addTokenUsageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) AddTokenUsageReturnsOnCall(i int, result1 error) {
	fake.addTokenUsageMutex.Lock()
	defer fake.addTokenUsageMutex.Unlock()
	fake.AddTokenUsageStub = nil
	if fake.addTokenUsageReturnsOnCall == nil {
		fake.addTokenUsageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addTokenUsageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) Clear() error {
	fake.clearMutex.Lock()
	ret, specificReturn := fake.clearReturnsOnCall[len(fake.clearArgsForCall)]
	fake.clearArgsForCall = append(fake.clearArgsForCall, struct {
	}{})
	stub := fake.ClearStub
	fakeReturns := fake.clearReturns
	fake.recordInvocation("Clear", []interface{}{})
	fake.clearMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) ClearCallCount() int {
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	return len(fake.clearArgsForCall)
}

func (fake *FakeConversationRepository) ClearCalls(stub func() error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = stub
}

func (fake *FakeConversationRepository) ClearReturns(result1 error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = nil
	fake.clearReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) ClearReturnsOnCall(i int, result1 error) {
	fake.clearMutex.Lock()
	defer fake.clearMutex.Unlock()
	fake.ClearStub = nil
	if fake.clearReturnsOnCall == nil {
		fake.clearReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) Export(arg1 domain.ExportFormat) ([]byte, error) {
	fake.exportMutex.Lock()
	ret, specificReturn := fake.exportReturnsOnCall[len(fake.exportArgsForCall)]
	fake.exportArgsForCall = append(fake.exportArgsForCall, struct {
		arg1 domain.ExportFormat
	}{arg1})
	stub := fake.ExportStub
	fakeReturns := fake.exportReturns
	fake.recordInvocation("Export", []interface{}{arg1})
	fake.exportMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConversationRepository) ExportCallCount() int {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	return len(fake.exportArgsForCall)
}

func (fake *FakeConversationRepository) ExportCalls(stub func(domain.ExportFormat) ([]byte, error)) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = stub
}

func (fake *FakeConversationRepository) ExportArgsForCall(i int) domain.ExportFormat {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	argsForCall := fake.exportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConversationRepository) ExportReturns(result1 []byte, result2 error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = nil
	fake.exportReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeConversationRepository) ExportReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = nil
	if fake.exportReturnsOnCall == nil {
		fake.exportReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.exportReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeConversationRepository) GetMessageCount() int {
	fake.getMessageCountMutex.Lock()
	ret, specificReturn := fake.getMessageCountReturnsOnCall[len(fake.getMessageCountArgsForCall)]
	fake.getMessageCountArgsForCall = append(fake.getMessageCountArgsForCall, struct {
	}{})
	stub := fake.GetMessageCountStub
	fakeReturns := fake.getMessageCountReturns
	fake.recordInvocation("GetMessageCount", []interface{}{})
	fake.getMessageCountMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) GetMessageCountCallCount() int {
	fake.getMessageCountMutex.RLock()
	defer fake.getMessageCountMutex.RUnlock()
	return len(fake.getMessageCountArgsForCall)
}

func (fake *FakeConversationRepository) GetMessageCountCalls(stub func() int) {
	fake.getMessageCountMutex.Lock()
	defer fake.getMessageCountMutex.Unlock()
	fake.GetMessageCountStub = stub
}

func (fake *FakeConversationRepository) GetMessageCountReturns(result1 int) {
	fake.getMessageCountMutex.Lock()
	defer fake.getMessageCountMutex.Unlock()
	fake.GetMessageCountStub = nil
	fake.getMessageCountReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeConversationRepository) GetMessageCountReturnsOnCall(i int, result1 int) {
	fake.getMessageCountMutex.Lock()
	defer fake.getMessageCountMutex.Unlock()
	fake.GetMessageCountStub = nil
	if fake.getMessageCountReturnsOnCall == nil {
		fake.getMessageCountReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getMessageCountReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeConversationRepository) GetMessages() []domain.ConversationEntry {
	fake.getMessagesMutex.Lock()
	ret, specificReturn := fake.getMessagesReturnsOnCall[len(fake.getMessagesArgsForCall)]
	fake.getMessagesArgsForCall = append(fake.getMessagesArgsForCall, struct {
	}{})
	stub := fake.GetMessagesStub
	fakeReturns := fake.getMessagesReturns
	fake.recordInvocation("GetMessages", []interface{}{})
	fake.getMessagesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) GetMessagesCallCount() int {
	fake.getMessagesMutex.RLock()
	defer fake.getMessagesMutex.RUnlock()
	return len(fake.getMessagesArgsForCall)
}

func (fake *FakeConversationRepository) GetMessagesCalls(stub func() []domain.ConversationEntry) {
	fake.getMessagesMutex.Lock()
	defer fake.getMessagesMutex.Unlock()
	fake.GetMessagesStub = stub
}

func (fake *FakeConversationRepository) GetMessagesReturns(result1 []domain.ConversationEntry) {
	fake.getMessagesMutex.Lock()
	defer fake.getMessagesMutex.Unlock()
	fake.GetMessagesStub = nil
	fake.getMessagesReturns = struct {
		result1 []domain.ConversationEntry
	}{result1}
}

func (fake *FakeConversationRepository) GetMessagesReturnsOnCall(i int, result1 []domain.ConversationEntry) {
	fake.getMessagesMutex.Lock()
	defer fake.getMessagesMutex.Unlock()
	fake.GetMessagesStub = nil
	if fake.getMessagesReturnsOnCall == nil {
		fake.getMessagesReturnsOnCall = make(map[int]struct {
			result1 []domain.ConversationEntry
		})
	}
	fake.getMessagesReturnsOnCall[i] = struct {
		result1 []domain.ConversationEntry
	}{result1}
}

func (fake *FakeConversationRepository) GetSessionTokens() domain.SessionTokenStats {
	fake.getSessionTokensMutex.Lock()
	ret, specificReturn := fake.getSessionTokensReturnsOnCall[len(fake.getSessionTokensArgsForCall)]
	fake.getSessionTokensArgsForCall = append(fake.getSessionTokensArgsForCall, struct {
	}{})
	stub := fake.GetSessionTokensStub
	fakeReturns := fake.getSessionTokensReturns
	fake.recordInvocation("GetSessionTokens", []interface{}{})
	fake.getSessionTokensMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) GetSessionTokensCallCount() int {
	fake.getSessionTokensMutex.RLock()
	defer fake.getSessionTokensMutex.RUnlock()
	return len(fake.getSessionTokensArgsForCall)
}

func (fake *FakeConversationRepository) GetSessionTokensCalls(stub func() domain.SessionTokenStats) {
	fake.getSessionTokensMutex.Lock()
	defer fake.getSessionTokensMutex.Unlock()
	fake.GetSessionTokensStub = stub
}

func (fake *FakeConversationRepository) GetSessionTokensReturns(result1 domain.SessionTokenStats) {
	fake.getSessionTokensMutex.Lock()
	defer fake.getSessionTokensMutex.Unlock()
	fake.GetSessionTokensStub = nil
	fake.getSessionTokensReturns = struct {
		result1 domain.SessionTokenStats
	}{result1}
}

func (fake *FakeConversationRepository) GetSessionTokensReturnsOnCall(i int, result1 domain.SessionTokenStats) {
	fake.getSessionTokensMutex.Lock()
	defer fake.getSessionTokensMutex.Unlock()
	fake.GetSessionTokensStub = nil
	if fake.getSessionTokensReturnsOnCall == nil {
		fake.getSessionTokensReturnsOnCall = make(map[int]struct {
			result1 domain.SessionTokenStats
		})
	}
	fake.getSessionTokensReturnsOnCall[i] = struct {
		result1 domain.SessionTokenStats
	}{result1}
}

func (fake *FakeConversationRepository) UpdateLastMessage(arg1 string) error {
	fake.updateLastMessageMutex.Lock()
	ret, specificReturn := fake.updateLastMessageReturnsOnCall[len(fake.updateLastMessageArgsForCall)]
	fake.updateLastMessageArgsForCall = append(fake.updateLastMessageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.UpdateLastMessageStub
	fakeReturns := fake.updateLastMessageReturns
	fake.recordInvocation("UpdateLastMessage", []interface{}{arg1})
	fake.updateLastMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) UpdateLastMessageCallCount() int {
	fake.updateLastMessageMutex.RLock()
	defer fake.updateLastMessageMutex.RUnlock()
	return len(fake.updateLastMessageArgsForCall)
}

func (fake *FakeConversationRepository) UpdateLastMessageCalls(stub func(string) error) {
	fake.updateLastMessageMutex.Lock()
	defer fake.updateLastMessageMutex.Unlock()
	fake.UpdateLastMessageStub = stub
}

func (fake *FakeConversationRepository) UpdateLastMessageArgsForCall(i int) string {
	fake.updateLastMessageMutex.RLock()
	defer fake.updateLastMessageMutex.RUnlock()
	argsForCall := fake.updateLastMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConversationRepository) UpdateLastMessageReturns(result1 error) {
	fake.updateLastMessageMutex.Lock()
	defer fake.updateLastMessageMutex.Unlock()
	fake.UpdateLastMessageStub = nil
	fake.updateLastMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) UpdateLastMessageReturnsOnCall(i int, result1 error) {
	fake.updateLastMessageMutex.Lock()
	defer fake.updateLastMessageMutex.Unlock()
	fake.UpdateLastMessageStub = nil
	if fake.updateLastMessageReturnsOnCall == nil {
		fake.updateLastMessageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateLastMessageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) UpdateLastMessageToolCalls(arg1 *[]sdk.ChatCompletionMessageToolCall) error {
	fake.updateLastMessageToolCallsMutex.Lock()
	ret, specificReturn := fake.updateLastMessageToolCallsReturnsOnCall[len(fake.updateLastMessageToolCallsArgsForCall)]
	fake.updateLastMessageToolCallsArgsForCall = append(fake.updateLastMessageToolCallsArgsForCall, struct {
		arg1 *[]sdk.ChatCompletionMessageToolCall
	}{arg1})
	stub := fake.UpdateLastMessageToolCallsStub
	fakeReturns := fake.updateLastMessageToolCallsReturns
	fake.recordInvocation("UpdateLastMessageToolCalls", []interface{}{arg1})
	fake.updateLastMessageToolCallsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConversationRepository) UpdateLastMessageToolCallsCallCount() int {
	fake.updateLastMessageToolCallsMutex.RLock()
	defer fake.updateLastMessageToolCallsMutex.RUnlock()
	return len(fake.updateLastMessageToolCallsArgsForCall)
}

func (fake *FakeConversationRepository) UpdateLastMessageToolCallsCalls(stub func(*[]sdk.ChatCompletionMessageToolCall) error) {
	fake.updateLastMessageToolCallsMutex.Lock()
	defer fake.updateLastMessageToolCallsMutex.Unlock()
	fake.UpdateLastMessageToolCallsStub = stub
}

func (fake *FakeConversationRepository) UpdateLastMessageToolCallsArgsForCall(i int) *[]sdk.ChatCompletionMessageToolCall {
	fake.updateLastMessageToolCallsMutex.RLock()
	defer fake.updateLastMessageToolCallsMutex.RUnlock()
	argsForCall := fake.updateLastMessageToolCallsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConversationRepository) UpdateLastMessageToolCallsReturns(result1 error) {
	fake.updateLastMessageToolCallsMutex.Lock()
	defer fake.updateLastMessageToolCallsMutex.Unlock()
	fake.UpdateLastMessageToolCallsStub = nil
	fake.updateLastMessageToolCallsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) UpdateLastMessageToolCallsReturnsOnCall(i int, result1 error) {
	fake.updateLastMessageToolCallsMutex.Lock()
	defer fake.updateLastMessageToolCallsMutex.Unlock()
	fake.UpdateLastMessageToolCallsStub = nil
	if fake.updateLastMessageToolCallsReturnsOnCall == nil {
		fake.updateLastMessageToolCallsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateLastMessageToolCallsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConversationRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConversationRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ConversationRepository = new(FakeConversationRepository)
