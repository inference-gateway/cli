// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"context"
	"sync"

	"github.com/inference-gateway/adk/types"
	"github.com/inference-gateway/cli/internal/domain"
)

type FakeA2ADirectService struct {
	QueryStub        func(context.Context, string) (*types.AgentCard, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	queryReturns struct {
		result1 *types.AgentCard
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 *types.AgentCard
		result2 error
	}
	SubmitTaskStub        func(context.Context, string, types.Task) (*types.Task, error)
	submitTaskMutex       sync.RWMutex
	submitTaskArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 types.Task
	}
	submitTaskReturns struct {
		result1 *types.Task
		result2 error
	}
	submitTaskReturnsOnCall map[int]struct {
		result1 *types.Task
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeA2ADirectService) Query(arg1 context.Context, arg2 string) (*types.AgentCard, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.QueryStub
	fakeReturns := fake.queryReturns
	fake.recordInvocation("Query", []interface{}{arg1, arg2})
	fake.queryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2ADirectService) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeA2ADirectService) QueryCalls(stub func(context.Context, string) (*types.AgentCard, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *FakeA2ADirectService) QueryArgsForCall(i int) (context.Context, string) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2ADirectService) QueryReturns(result1 *types.AgentCard, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 *types.AgentCard
		result2 error
	}{result1, result2}
}

func (fake *FakeA2ADirectService) QueryReturnsOnCall(i int, result1 *types.AgentCard, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 *types.AgentCard
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 *types.AgentCard
		result2 error
	}{result1, result2}
}

func (fake *FakeA2ADirectService) SubmitTask(arg1 context.Context, arg2 string, arg3 types.Task) (*types.Task, error) {
	fake.submitTaskMutex.Lock()
	ret, specificReturn := fake.submitTaskReturnsOnCall[len(fake.submitTaskArgsForCall)]
	fake.submitTaskArgsForCall = append(fake.submitTaskArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 types.Task
	}{arg1, arg2, arg3})
	stub := fake.SubmitTaskStub
	fakeReturns := fake.submitTaskReturns
	fake.recordInvocation("SubmitTask", []interface{}{arg1, arg2, arg3})
	fake.submitTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2ADirectService) SubmitTaskCallCount() int {
	fake.submitTaskMutex.RLock()
	defer fake.submitTaskMutex.RUnlock()
	return len(fake.submitTaskArgsForCall)
}

func (fake *FakeA2ADirectService) SubmitTaskCalls(stub func(context.Context, string, types.Task) (*types.Task, error)) {
	fake.submitTaskMutex.Lock()
	defer fake.submitTaskMutex.Unlock()
	fake.SubmitTaskStub = stub
}

func (fake *FakeA2ADirectService) SubmitTaskArgsForCall(i int) (context.Context, string, types.Task) {
	fake.submitTaskMutex.RLock()
	defer fake.submitTaskMutex.RUnlock()
	argsForCall := fake.submitTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeA2ADirectService) SubmitTaskReturns(result1 *types.Task, result2 error) {
	fake.submitTaskMutex.Lock()
	defer fake.submitTaskMutex.Unlock()
	fake.SubmitTaskStub = nil
	fake.submitTaskReturns = struct {
		result1 *types.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeA2ADirectService) SubmitTaskReturnsOnCall(i int, result1 *types.Task, result2 error) {
	fake.submitTaskMutex.Lock()
	defer fake.submitTaskMutex.Unlock()
	fake.SubmitTaskStub = nil
	if fake.submitTaskReturnsOnCall == nil {
		fake.submitTaskReturnsOnCall = make(map[int]struct {
			result1 *types.Task
			result2 error
		})
	}
	fake.submitTaskReturnsOnCall[i] = struct {
		result1 *types.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeA2ADirectService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeA2ADirectService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.A2ADirectService = new(FakeA2ADirectService)
