// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeConfigService struct {
	GetAPIKeyStub        func() string
	getAPIKeyMutex       sync.RWMutex
	getAPIKeyArgsForCall []struct {
	}
	getAPIKeyReturns struct {
		result1 string
	}
	getAPIKeyReturnsOnCall map[int]struct {
		result1 string
	}
	GetDefaultModelStub        func() string
	getDefaultModelMutex       sync.RWMutex
	getDefaultModelArgsForCall []struct {
	}
	getDefaultModelReturns struct {
		result1 string
	}
	getDefaultModelReturnsOnCall map[int]struct {
		result1 string
	}
	GetGatewayURLStub        func() string
	getGatewayURLMutex       sync.RWMutex
	getGatewayURLArgsForCall []struct {
	}
	getGatewayURLReturns struct {
		result1 string
	}
	getGatewayURLReturnsOnCall map[int]struct {
		result1 string
	}
	GetOutputDirectoryStub        func() string
	getOutputDirectoryMutex       sync.RWMutex
	getOutputDirectoryArgsForCall []struct {
	}
	getOutputDirectoryReturns struct {
		result1 string
	}
	getOutputDirectoryReturnsOnCall map[int]struct {
		result1 string
	}
	GetProtectedPathsStub        func() []string
	getProtectedPathsMutex       sync.RWMutex
	getProtectedPathsArgsForCall []struct {
	}
	getProtectedPathsReturns struct {
		result1 []string
	}
	getProtectedPathsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetSandboxDirectoriesStub        func() []string
	getSandboxDirectoriesMutex       sync.RWMutex
	getSandboxDirectoriesArgsForCall []struct {
	}
	getSandboxDirectoriesReturns struct {
		result1 []string
	}
	getSandboxDirectoriesReturnsOnCall map[int]struct {
		result1 []string
	}
	GetSystemPromptStub        func() string
	getSystemPromptMutex       sync.RWMutex
	getSystemPromptArgsForCall []struct {
	}
	getSystemPromptReturns struct {
		result1 string
	}
	getSystemPromptReturnsOnCall map[int]struct {
		result1 string
	}
	GetTimeoutStub        func() int
	getTimeoutMutex       sync.RWMutex
	getTimeoutArgsForCall []struct {
	}
	getTimeoutReturns struct {
		result1 int
	}
	getTimeoutReturnsOnCall map[int]struct {
		result1 int
	}
	IsApprovalRequiredStub        func(string) bool
	isApprovalRequiredMutex       sync.RWMutex
	isApprovalRequiredArgsForCall []struct {
		arg1 string
	}
	isApprovalRequiredReturns struct {
		result1 bool
	}
	isApprovalRequiredReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigService) GetAPIKey() string {
	fake.getAPIKeyMutex.Lock()
	ret, specificReturn := fake.getAPIKeyReturnsOnCall[len(fake.getAPIKeyArgsForCall)]
	fake.getAPIKeyArgsForCall = append(fake.getAPIKeyArgsForCall, struct {
	}{})
	stub := fake.GetAPIKeyStub
	fakeReturns := fake.getAPIKeyReturns
	fake.recordInvocation("GetAPIKey", []interface{}{})
	fake.getAPIKeyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetAPIKeyCallCount() int {
	fake.getAPIKeyMutex.RLock()
	defer fake.getAPIKeyMutex.RUnlock()
	return len(fake.getAPIKeyArgsForCall)
}

func (fake *FakeConfigService) GetAPIKeyCalls(stub func() string) {
	fake.getAPIKeyMutex.Lock()
	defer fake.getAPIKeyMutex.Unlock()
	fake.GetAPIKeyStub = stub
}

func (fake *FakeConfigService) GetAPIKeyReturns(result1 string) {
	fake.getAPIKeyMutex.Lock()
	defer fake.getAPIKeyMutex.Unlock()
	fake.GetAPIKeyStub = nil
	fake.getAPIKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetAPIKeyReturnsOnCall(i int, result1 string) {
	fake.getAPIKeyMutex.Lock()
	defer fake.getAPIKeyMutex.Unlock()
	fake.GetAPIKeyStub = nil
	if fake.getAPIKeyReturnsOnCall == nil {
		fake.getAPIKeyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAPIKeyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetDefaultModel() string {
	fake.getDefaultModelMutex.Lock()
	ret, specificReturn := fake.getDefaultModelReturnsOnCall[len(fake.getDefaultModelArgsForCall)]
	fake.getDefaultModelArgsForCall = append(fake.getDefaultModelArgsForCall, struct {
	}{})
	stub := fake.GetDefaultModelStub
	fakeReturns := fake.getDefaultModelReturns
	fake.recordInvocation("GetDefaultModel", []interface{}{})
	fake.getDefaultModelMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetDefaultModelCallCount() int {
	fake.getDefaultModelMutex.RLock()
	defer fake.getDefaultModelMutex.RUnlock()
	return len(fake.getDefaultModelArgsForCall)
}

func (fake *FakeConfigService) GetDefaultModelCalls(stub func() string) {
	fake.getDefaultModelMutex.Lock()
	defer fake.getDefaultModelMutex.Unlock()
	fake.GetDefaultModelStub = stub
}

func (fake *FakeConfigService) GetDefaultModelReturns(result1 string) {
	fake.getDefaultModelMutex.Lock()
	defer fake.getDefaultModelMutex.Unlock()
	fake.GetDefaultModelStub = nil
	fake.getDefaultModelReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetDefaultModelReturnsOnCall(i int, result1 string) {
	fake.getDefaultModelMutex.Lock()
	defer fake.getDefaultModelMutex.Unlock()
	fake.GetDefaultModelStub = nil
	if fake.getDefaultModelReturnsOnCall == nil {
		fake.getDefaultModelReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDefaultModelReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetGatewayURL() string {
	fake.getGatewayURLMutex.Lock()
	ret, specificReturn := fake.getGatewayURLReturnsOnCall[len(fake.getGatewayURLArgsForCall)]
	fake.getGatewayURLArgsForCall = append(fake.getGatewayURLArgsForCall, struct {
	}{})
	stub := fake.GetGatewayURLStub
	fakeReturns := fake.getGatewayURLReturns
	fake.recordInvocation("GetGatewayURL", []interface{}{})
	fake.getGatewayURLMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetGatewayURLCallCount() int {
	fake.getGatewayURLMutex.RLock()
	defer fake.getGatewayURLMutex.RUnlock()
	return len(fake.getGatewayURLArgsForCall)
}

func (fake *FakeConfigService) GetGatewayURLCalls(stub func() string) {
	fake.getGatewayURLMutex.Lock()
	defer fake.getGatewayURLMutex.Unlock()
	fake.GetGatewayURLStub = stub
}

func (fake *FakeConfigService) GetGatewayURLReturns(result1 string) {
	fake.getGatewayURLMutex.Lock()
	defer fake.getGatewayURLMutex.Unlock()
	fake.GetGatewayURLStub = nil
	fake.getGatewayURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetGatewayURLReturnsOnCall(i int, result1 string) {
	fake.getGatewayURLMutex.Lock()
	defer fake.getGatewayURLMutex.Unlock()
	fake.GetGatewayURLStub = nil
	if fake.getGatewayURLReturnsOnCall == nil {
		fake.getGatewayURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getGatewayURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetOutputDirectory() string {
	fake.getOutputDirectoryMutex.Lock()
	ret, specificReturn := fake.getOutputDirectoryReturnsOnCall[len(fake.getOutputDirectoryArgsForCall)]
	fake.getOutputDirectoryArgsForCall = append(fake.getOutputDirectoryArgsForCall, struct {
	}{})
	stub := fake.GetOutputDirectoryStub
	fakeReturns := fake.getOutputDirectoryReturns
	fake.recordInvocation("GetOutputDirectory", []interface{}{})
	fake.getOutputDirectoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetOutputDirectoryCallCount() int {
	fake.getOutputDirectoryMutex.RLock()
	defer fake.getOutputDirectoryMutex.RUnlock()
	return len(fake.getOutputDirectoryArgsForCall)
}

func (fake *FakeConfigService) GetOutputDirectoryCalls(stub func() string) {
	fake.getOutputDirectoryMutex.Lock()
	defer fake.getOutputDirectoryMutex.Unlock()
	fake.GetOutputDirectoryStub = stub
}

func (fake *FakeConfigService) GetOutputDirectoryReturns(result1 string) {
	fake.getOutputDirectoryMutex.Lock()
	defer fake.getOutputDirectoryMutex.Unlock()
	fake.GetOutputDirectoryStub = nil
	fake.getOutputDirectoryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetOutputDirectoryReturnsOnCall(i int, result1 string) {
	fake.getOutputDirectoryMutex.Lock()
	defer fake.getOutputDirectoryMutex.Unlock()
	fake.GetOutputDirectoryStub = nil
	if fake.getOutputDirectoryReturnsOnCall == nil {
		fake.getOutputDirectoryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getOutputDirectoryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetProtectedPaths() []string {
	fake.getProtectedPathsMutex.Lock()
	ret, specificReturn := fake.getProtectedPathsReturnsOnCall[len(fake.getProtectedPathsArgsForCall)]
	fake.getProtectedPathsArgsForCall = append(fake.getProtectedPathsArgsForCall, struct {
	}{})
	stub := fake.GetProtectedPathsStub
	fakeReturns := fake.getProtectedPathsReturns
	fake.recordInvocation("GetProtectedPaths", []interface{}{})
	fake.getProtectedPathsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetProtectedPathsCallCount() int {
	fake.getProtectedPathsMutex.RLock()
	defer fake.getProtectedPathsMutex.RUnlock()
	return len(fake.getProtectedPathsArgsForCall)
}

func (fake *FakeConfigService) GetProtectedPathsCalls(stub func() []string) {
	fake.getProtectedPathsMutex.Lock()
	defer fake.getProtectedPathsMutex.Unlock()
	fake.GetProtectedPathsStub = stub
}

func (fake *FakeConfigService) GetProtectedPathsReturns(result1 []string) {
	fake.getProtectedPathsMutex.Lock()
	defer fake.getProtectedPathsMutex.Unlock()
	fake.GetProtectedPathsStub = nil
	fake.getProtectedPathsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfigService) GetProtectedPathsReturnsOnCall(i int, result1 []string) {
	fake.getProtectedPathsMutex.Lock()
	defer fake.getProtectedPathsMutex.Unlock()
	fake.GetProtectedPathsStub = nil
	if fake.getProtectedPathsReturnsOnCall == nil {
		fake.getProtectedPathsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getProtectedPathsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfigService) GetSandboxDirectories() []string {
	fake.getSandboxDirectoriesMutex.Lock()
	ret, specificReturn := fake.getSandboxDirectoriesReturnsOnCall[len(fake.getSandboxDirectoriesArgsForCall)]
	fake.getSandboxDirectoriesArgsForCall = append(fake.getSandboxDirectoriesArgsForCall, struct {
	}{})
	stub := fake.GetSandboxDirectoriesStub
	fakeReturns := fake.getSandboxDirectoriesReturns
	fake.recordInvocation("GetSandboxDirectories", []interface{}{})
	fake.getSandboxDirectoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetSandboxDirectoriesCallCount() int {
	fake.getSandboxDirectoriesMutex.RLock()
	defer fake.getSandboxDirectoriesMutex.RUnlock()
	return len(fake.getSandboxDirectoriesArgsForCall)
}

func (fake *FakeConfigService) GetSandboxDirectoriesCalls(stub func() []string) {
	fake.getSandboxDirectoriesMutex.Lock()
	defer fake.getSandboxDirectoriesMutex.Unlock()
	fake.GetSandboxDirectoriesStub = stub
}

func (fake *FakeConfigService) GetSandboxDirectoriesReturns(result1 []string) {
	fake.getSandboxDirectoriesMutex.Lock()
	defer fake.getSandboxDirectoriesMutex.Unlock()
	fake.GetSandboxDirectoriesStub = nil
	fake.getSandboxDirectoriesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfigService) GetSandboxDirectoriesReturnsOnCall(i int, result1 []string) {
	fake.getSandboxDirectoriesMutex.Lock()
	defer fake.getSandboxDirectoriesMutex.Unlock()
	fake.GetSandboxDirectoriesStub = nil
	if fake.getSandboxDirectoriesReturnsOnCall == nil {
		fake.getSandboxDirectoriesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getSandboxDirectoriesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfigService) GetSystemPrompt() string {
	fake.getSystemPromptMutex.Lock()
	ret, specificReturn := fake.getSystemPromptReturnsOnCall[len(fake.getSystemPromptArgsForCall)]
	fake.getSystemPromptArgsForCall = append(fake.getSystemPromptArgsForCall, struct {
	}{})
	stub := fake.GetSystemPromptStub
	fakeReturns := fake.getSystemPromptReturns
	fake.recordInvocation("GetSystemPrompt", []interface{}{})
	fake.getSystemPromptMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetSystemPromptCallCount() int {
	fake.getSystemPromptMutex.RLock()
	defer fake.getSystemPromptMutex.RUnlock()
	return len(fake.getSystemPromptArgsForCall)
}

func (fake *FakeConfigService) GetSystemPromptCalls(stub func() string) {
	fake.getSystemPromptMutex.Lock()
	defer fake.getSystemPromptMutex.Unlock()
	fake.GetSystemPromptStub = stub
}

func (fake *FakeConfigService) GetSystemPromptReturns(result1 string) {
	fake.getSystemPromptMutex.Lock()
	defer fake.getSystemPromptMutex.Unlock()
	fake.GetSystemPromptStub = nil
	fake.getSystemPromptReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetSystemPromptReturnsOnCall(i int, result1 string) {
	fake.getSystemPromptMutex.Lock()
	defer fake.getSystemPromptMutex.Unlock()
	fake.GetSystemPromptStub = nil
	if fake.getSystemPromptReturnsOnCall == nil {
		fake.getSystemPromptReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getSystemPromptReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfigService) GetTimeout() int {
	fake.getTimeoutMutex.Lock()
	ret, specificReturn := fake.getTimeoutReturnsOnCall[len(fake.getTimeoutArgsForCall)]
	fake.getTimeoutArgsForCall = append(fake.getTimeoutArgsForCall, struct {
	}{})
	stub := fake.GetTimeoutStub
	fakeReturns := fake.getTimeoutReturns
	fake.recordInvocation("GetTimeout", []interface{}{})
	fake.getTimeoutMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) GetTimeoutCallCount() int {
	fake.getTimeoutMutex.RLock()
	defer fake.getTimeoutMutex.RUnlock()
	return len(fake.getTimeoutArgsForCall)
}

func (fake *FakeConfigService) GetTimeoutCalls(stub func() int) {
	fake.getTimeoutMutex.Lock()
	defer fake.getTimeoutMutex.Unlock()
	fake.GetTimeoutStub = stub
}

func (fake *FakeConfigService) GetTimeoutReturns(result1 int) {
	fake.getTimeoutMutex.Lock()
	defer fake.getTimeoutMutex.Unlock()
	fake.GetTimeoutStub = nil
	fake.getTimeoutReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeConfigService) GetTimeoutReturnsOnCall(i int, result1 int) {
	fake.getTimeoutMutex.Lock()
	defer fake.getTimeoutMutex.Unlock()
	fake.GetTimeoutStub = nil
	if fake.getTimeoutReturnsOnCall == nil {
		fake.getTimeoutReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getTimeoutReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeConfigService) IsApprovalRequired(arg1 string) bool {
	fake.isApprovalRequiredMutex.Lock()
	ret, specificReturn := fake.isApprovalRequiredReturnsOnCall[len(fake.isApprovalRequiredArgsForCall)]
	fake.isApprovalRequiredArgsForCall = append(fake.isApprovalRequiredArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsApprovalRequiredStub
	fakeReturns := fake.isApprovalRequiredReturns
	fake.recordInvocation("IsApprovalRequired", []interface{}{arg1})
	fake.isApprovalRequiredMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigService) IsApprovalRequiredCallCount() int {
	fake.isApprovalRequiredMutex.RLock()
	defer fake.isApprovalRequiredMutex.RUnlock()
	return len(fake.isApprovalRequiredArgsForCall)
}

func (fake *FakeConfigService) IsApprovalRequiredCalls(stub func(string) bool) {
	fake.isApprovalRequiredMutex.Lock()
	defer fake.isApprovalRequiredMutex.Unlock()
	fake.IsApprovalRequiredStub = stub
}

func (fake *FakeConfigService) IsApprovalRequiredArgsForCall(i int) string {
	fake.isApprovalRequiredMutex.RLock()
	defer fake.isApprovalRequiredMutex.RUnlock()
	argsForCall := fake.isApprovalRequiredArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfigService) IsApprovalRequiredReturns(result1 bool) {
	fake.isApprovalRequiredMutex.Lock()
	defer fake.isApprovalRequiredMutex.Unlock()
	fake.IsApprovalRequiredStub = nil
	fake.isApprovalRequiredReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConfigService) IsApprovalRequiredReturnsOnCall(i int, result1 bool) {
	fake.isApprovalRequiredMutex.Lock()
	defer fake.isApprovalRequiredMutex.Unlock()
	fake.IsApprovalRequiredStub = nil
	if fake.isApprovalRequiredReturnsOnCall == nil {
		fake.isApprovalRequiredReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isApprovalRequiredReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConfigService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ConfigService = new(FakeConfigService)
