// Code generated by counterfeiter. DO NOT EDIT.
package generated

import (
	"sync"

	"github.com/inference-gateway/cli/internal/ui"
	"github.com/inference-gateway/cli/internal/ui/shared"
)

type FakeHelpBarComponent struct {
	IsEnabledStub        func() bool
	isEnabledMutex       sync.RWMutex
	isEnabledArgsForCall []struct {
	}
	isEnabledReturns struct {
		result1 bool
	}
	isEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	RenderStub        func() string
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
	}
	renderReturns struct {
		result1 string
	}
	renderReturnsOnCall map[int]struct {
		result1 string
	}
	SetEnabledStub        func(bool)
	setEnabledMutex       sync.RWMutex
	setEnabledArgsForCall []struct {
		arg1 bool
	}
	SetHeightStub        func(int)
	setHeightMutex       sync.RWMutex
	setHeightArgsForCall []struct {
		arg1 int
	}
	SetShortcutsStub        func([]shared.KeyShortcut)
	setShortcutsMutex       sync.RWMutex
	setShortcutsArgsForCall []struct {
		arg1 []shared.KeyShortcut
	}
	SetWidthStub        func(int)
	setWidthMutex       sync.RWMutex
	setWidthArgsForCall []struct {
		arg1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelpBarComponent) IsEnabled() bool {
	fake.isEnabledMutex.Lock()
	ret, specificReturn := fake.isEnabledReturnsOnCall[len(fake.isEnabledArgsForCall)]
	fake.isEnabledArgsForCall = append(fake.isEnabledArgsForCall, struct {
	}{})
	stub := fake.IsEnabledStub
	fakeReturns := fake.isEnabledReturns
	fake.recordInvocation("IsEnabled", []interface{}{})
	fake.isEnabledMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHelpBarComponent) IsEnabledCallCount() int {
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	return len(fake.isEnabledArgsForCall)
}

func (fake *FakeHelpBarComponent) IsEnabledCalls(stub func() bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = stub
}

func (fake *FakeHelpBarComponent) IsEnabledReturns(result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	fake.isEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHelpBarComponent) IsEnabledReturnsOnCall(i int, result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	if fake.isEnabledReturnsOnCall == nil {
		fake.isEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHelpBarComponent) Render() string {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
	}{})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHelpBarComponent) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeHelpBarComponent) RenderCalls(stub func() string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeHelpBarComponent) RenderReturns(result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeHelpBarComponent) RenderReturnsOnCall(i int, result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeHelpBarComponent) SetEnabled(arg1 bool) {
	fake.setEnabledMutex.Lock()
	fake.setEnabledArgsForCall = append(fake.setEnabledArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.SetEnabledStub
	fake.recordInvocation("SetEnabled", []interface{}{arg1})
	fake.setEnabledMutex.Unlock()
	if stub != nil {
		fake.SetEnabledStub(arg1)
	}
}

func (fake *FakeHelpBarComponent) SetEnabledCallCount() int {
	fake.setEnabledMutex.RLock()
	defer fake.setEnabledMutex.RUnlock()
	return len(fake.setEnabledArgsForCall)
}

func (fake *FakeHelpBarComponent) SetEnabledCalls(stub func(bool)) {
	fake.setEnabledMutex.Lock()
	defer fake.setEnabledMutex.Unlock()
	fake.SetEnabledStub = stub
}

func (fake *FakeHelpBarComponent) SetEnabledArgsForCall(i int) bool {
	fake.setEnabledMutex.RLock()
	defer fake.setEnabledMutex.RUnlock()
	argsForCall := fake.setEnabledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHelpBarComponent) SetHeight(arg1 int) {
	fake.setHeightMutex.Lock()
	fake.setHeightArgsForCall = append(fake.setHeightArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetHeightStub
	fake.recordInvocation("SetHeight", []interface{}{arg1})
	fake.setHeightMutex.Unlock()
	if stub != nil {
		fake.SetHeightStub(arg1)
	}
}

func (fake *FakeHelpBarComponent) SetHeightCallCount() int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	return len(fake.setHeightArgsForCall)
}

func (fake *FakeHelpBarComponent) SetHeightCalls(stub func(int)) {
	fake.setHeightMutex.Lock()
	defer fake.setHeightMutex.Unlock()
	fake.SetHeightStub = stub
}

func (fake *FakeHelpBarComponent) SetHeightArgsForCall(i int) int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	argsForCall := fake.setHeightArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHelpBarComponent) SetShortcuts(arg1 []shared.KeyShortcut) {
	var arg1Copy []shared.KeyShortcut
	if arg1 != nil {
		arg1Copy = make([]shared.KeyShortcut, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setShortcutsMutex.Lock()
	fake.setShortcutsArgsForCall = append(fake.setShortcutsArgsForCall, struct {
		arg1 []shared.KeyShortcut
	}{arg1Copy})
	stub := fake.SetShortcutsStub
	fake.recordInvocation("SetShortcuts", []interface{}{arg1Copy})
	fake.setShortcutsMutex.Unlock()
	if stub != nil {
		fake.SetShortcutsStub(arg1)
	}
}

func (fake *FakeHelpBarComponent) SetShortcutsCallCount() int {
	fake.setShortcutsMutex.RLock()
	defer fake.setShortcutsMutex.RUnlock()
	return len(fake.setShortcutsArgsForCall)
}

func (fake *FakeHelpBarComponent) SetShortcutsCalls(stub func([]shared.KeyShortcut)) {
	fake.setShortcutsMutex.Lock()
	defer fake.setShortcutsMutex.Unlock()
	fake.SetShortcutsStub = stub
}

func (fake *FakeHelpBarComponent) SetShortcutsArgsForCall(i int) []shared.KeyShortcut {
	fake.setShortcutsMutex.RLock()
	defer fake.setShortcutsMutex.RUnlock()
	argsForCall := fake.setShortcutsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHelpBarComponent) SetWidth(arg1 int) {
	fake.setWidthMutex.Lock()
	fake.setWidthArgsForCall = append(fake.setWidthArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetWidthStub
	fake.recordInvocation("SetWidth", []interface{}{arg1})
	fake.setWidthMutex.Unlock()
	if stub != nil {
		fake.SetWidthStub(arg1)
	}
}

func (fake *FakeHelpBarComponent) SetWidthCallCount() int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	return len(fake.setWidthArgsForCall)
}

func (fake *FakeHelpBarComponent) SetWidthCalls(stub func(int)) {
	fake.setWidthMutex.Lock()
	defer fake.setWidthMutex.Unlock()
	fake.SetWidthStub = stub
}

func (fake *FakeHelpBarComponent) SetWidthArgsForCall(i int) int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	argsForCall := fake.setWidthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHelpBarComponent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHelpBarComponent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.HelpBarComponent = new(FakeHelpBarComponent)
