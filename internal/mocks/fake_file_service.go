// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeFileService struct {
	GetFileInfoStub        func(string) (domain.FileInfo, error)
	getFileInfoMutex       sync.RWMutex
	getFileInfoArgsForCall []struct {
		arg1 string
	}
	getFileInfoReturns struct {
		result1 domain.FileInfo
		result2 error
	}
	getFileInfoReturnsOnCall map[int]struct {
		result1 domain.FileInfo
		result2 error
	}
	ListProjectFilesStub        func() ([]string, error)
	listProjectFilesMutex       sync.RWMutex
	listProjectFilesArgsForCall []struct {
	}
	listProjectFilesReturns struct {
		result1 []string
		result2 error
	}
	listProjectFilesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ReadFileStub        func(string) (string, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 string
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ReadFileLinesStub        func(string, int, int) (string, error)
	readFileLinesMutex       sync.RWMutex
	readFileLinesArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	readFileLinesReturns struct {
		result1 string
		result2 error
	}
	readFileLinesReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ValidateFileStub        func(string) error
	validateFileMutex       sync.RWMutex
	validateFileArgsForCall []struct {
		arg1 string
	}
	validateFileReturns struct {
		result1 error
	}
	validateFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileService) GetFileInfo(arg1 string) (domain.FileInfo, error) {
	fake.getFileInfoMutex.Lock()
	ret, specificReturn := fake.getFileInfoReturnsOnCall[len(fake.getFileInfoArgsForCall)]
	fake.getFileInfoArgsForCall = append(fake.getFileInfoArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetFileInfoStub
	fakeReturns := fake.getFileInfoReturns
	fake.recordInvocation("GetFileInfo", []interface{}{arg1})
	fake.getFileInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileService) GetFileInfoCallCount() int {
	fake.getFileInfoMutex.RLock()
	defer fake.getFileInfoMutex.RUnlock()
	return len(fake.getFileInfoArgsForCall)
}

func (fake *FakeFileService) GetFileInfoCalls(stub func(string) (domain.FileInfo, error)) {
	fake.getFileInfoMutex.Lock()
	defer fake.getFileInfoMutex.Unlock()
	fake.GetFileInfoStub = stub
}

func (fake *FakeFileService) GetFileInfoArgsForCall(i int) string {
	fake.getFileInfoMutex.RLock()
	defer fake.getFileInfoMutex.RUnlock()
	argsForCall := fake.getFileInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileService) GetFileInfoReturns(result1 domain.FileInfo, result2 error) {
	fake.getFileInfoMutex.Lock()
	defer fake.getFileInfoMutex.Unlock()
	fake.GetFileInfoStub = nil
	fake.getFileInfoReturns = struct {
		result1 domain.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) GetFileInfoReturnsOnCall(i int, result1 domain.FileInfo, result2 error) {
	fake.getFileInfoMutex.Lock()
	defer fake.getFileInfoMutex.Unlock()
	fake.GetFileInfoStub = nil
	if fake.getFileInfoReturnsOnCall == nil {
		fake.getFileInfoReturnsOnCall = make(map[int]struct {
			result1 domain.FileInfo
			result2 error
		})
	}
	fake.getFileInfoReturnsOnCall[i] = struct {
		result1 domain.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ListProjectFiles() ([]string, error) {
	fake.listProjectFilesMutex.Lock()
	ret, specificReturn := fake.listProjectFilesReturnsOnCall[len(fake.listProjectFilesArgsForCall)]
	fake.listProjectFilesArgsForCall = append(fake.listProjectFilesArgsForCall, struct {
	}{})
	stub := fake.ListProjectFilesStub
	fakeReturns := fake.listProjectFilesReturns
	fake.recordInvocation("ListProjectFiles", []interface{}{})
	fake.listProjectFilesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileService) ListProjectFilesCallCount() int {
	fake.listProjectFilesMutex.RLock()
	defer fake.listProjectFilesMutex.RUnlock()
	return len(fake.listProjectFilesArgsForCall)
}

func (fake *FakeFileService) ListProjectFilesCalls(stub func() ([]string, error)) {
	fake.listProjectFilesMutex.Lock()
	defer fake.listProjectFilesMutex.Unlock()
	fake.ListProjectFilesStub = stub
}

func (fake *FakeFileService) ListProjectFilesReturns(result1 []string, result2 error) {
	fake.listProjectFilesMutex.Lock()
	defer fake.listProjectFilesMutex.Unlock()
	fake.ListProjectFilesStub = nil
	fake.listProjectFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ListProjectFilesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listProjectFilesMutex.Lock()
	defer fake.listProjectFilesMutex.Unlock()
	fake.ListProjectFilesStub = nil
	if fake.listProjectFilesReturnsOnCall == nil {
		fake.listProjectFilesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listProjectFilesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ReadFile(arg1 string) (string, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileService) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeFileService) ReadFileCalls(stub func(string) (string, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeFileService) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileService) ReadFileReturns(result1 string, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ReadFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ReadFileLines(arg1 string, arg2 int, arg3 int) (string, error) {
	fake.readFileLinesMutex.Lock()
	ret, specificReturn := fake.readFileLinesReturnsOnCall[len(fake.readFileLinesArgsForCall)]
	fake.readFileLinesArgsForCall = append(fake.readFileLinesArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ReadFileLinesStub
	fakeReturns := fake.readFileLinesReturns
	fake.recordInvocation("ReadFileLines", []interface{}{arg1, arg2, arg3})
	fake.readFileLinesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileService) ReadFileLinesCallCount() int {
	fake.readFileLinesMutex.RLock()
	defer fake.readFileLinesMutex.RUnlock()
	return len(fake.readFileLinesArgsForCall)
}

func (fake *FakeFileService) ReadFileLinesCalls(stub func(string, int, int) (string, error)) {
	fake.readFileLinesMutex.Lock()
	defer fake.readFileLinesMutex.Unlock()
	fake.ReadFileLinesStub = stub
}

func (fake *FakeFileService) ReadFileLinesArgsForCall(i int) (string, int, int) {
	fake.readFileLinesMutex.RLock()
	defer fake.readFileLinesMutex.RUnlock()
	argsForCall := fake.readFileLinesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileService) ReadFileLinesReturns(result1 string, result2 error) {
	fake.readFileLinesMutex.Lock()
	defer fake.readFileLinesMutex.Unlock()
	fake.ReadFileLinesStub = nil
	fake.readFileLinesReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ReadFileLinesReturnsOnCall(i int, result1 string, result2 error) {
	fake.readFileLinesMutex.Lock()
	defer fake.readFileLinesMutex.Unlock()
	fake.ReadFileLinesStub = nil
	if fake.readFileLinesReturnsOnCall == nil {
		fake.readFileLinesReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readFileLinesReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileService) ValidateFile(arg1 string) error {
	fake.validateFileMutex.Lock()
	ret, specificReturn := fake.validateFileReturnsOnCall[len(fake.validateFileArgsForCall)]
	fake.validateFileArgsForCall = append(fake.validateFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateFileStub
	fakeReturns := fake.validateFileReturns
	fake.recordInvocation("ValidateFile", []interface{}{arg1})
	fake.validateFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileService) ValidateFileCallCount() int {
	fake.validateFileMutex.RLock()
	defer fake.validateFileMutex.RUnlock()
	return len(fake.validateFileArgsForCall)
}

func (fake *FakeFileService) ValidateFileCalls(stub func(string) error) {
	fake.validateFileMutex.Lock()
	defer fake.validateFileMutex.Unlock()
	fake.ValidateFileStub = stub
}

func (fake *FakeFileService) ValidateFileArgsForCall(i int) string {
	fake.validateFileMutex.RLock()
	defer fake.validateFileMutex.RUnlock()
	argsForCall := fake.validateFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileService) ValidateFileReturns(result1 error) {
	fake.validateFileMutex.Lock()
	defer fake.validateFileMutex.Unlock()
	fake.ValidateFileStub = nil
	fake.validateFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileService) ValidateFileReturnsOnCall(i int, result1 error) {
	fake.validateFileMutex.Lock()
	defer fake.validateFileMutex.Unlock()
	fake.ValidateFileStub = nil
	if fake.validateFileReturnsOnCall == nil {
		fake.validateFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.FileService = new(FakeFileService)
