// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/inference-gateway/cli/internal/ui"
)

type FakeStatusComponent struct {
	ClearStatusStub        func()
	clearStatusMutex       sync.RWMutex
	clearStatusArgsForCall []struct {
	}
	HasSavedStateStub        func() bool
	hasSavedStateMutex       sync.RWMutex
	hasSavedStateArgsForCall []struct {
	}
	hasSavedStateReturns struct {
		result1 bool
	}
	hasSavedStateReturnsOnCall map[int]struct {
		result1 bool
	}
	IsShowingErrorStub        func() bool
	isShowingErrorMutex       sync.RWMutex
	isShowingErrorArgsForCall []struct {
	}
	isShowingErrorReturns struct {
		result1 bool
	}
	isShowingErrorReturnsOnCall map[int]struct {
		result1 bool
	}
	IsShowingSpinnerStub        func() bool
	isShowingSpinnerMutex       sync.RWMutex
	isShowingSpinnerArgsForCall []struct {
	}
	isShowingSpinnerReturns struct {
		result1 bool
	}
	isShowingSpinnerReturnsOnCall map[int]struct {
		result1 bool
	}
	RenderStub        func() string
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
	}
	renderReturns struct {
		result1 string
	}
	renderReturnsOnCall map[int]struct {
		result1 string
	}
	RestoreSavedStateStub        func() tea.Cmd
	restoreSavedStateMutex       sync.RWMutex
	restoreSavedStateArgsForCall []struct {
	}
	restoreSavedStateReturns struct {
		result1 tea.Cmd
	}
	restoreSavedStateReturnsOnCall map[int]struct {
		result1 tea.Cmd
	}
	SaveCurrentStateStub        func()
	saveCurrentStateMutex       sync.RWMutex
	saveCurrentStateArgsForCall []struct {
	}
	SetHeightStub        func(int)
	setHeightMutex       sync.RWMutex
	setHeightArgsForCall []struct {
		arg1 int
	}
	SetTokenUsageStub        func(string)
	setTokenUsageMutex       sync.RWMutex
	setTokenUsageArgsForCall []struct {
		arg1 string
	}
	SetWidthStub        func(int)
	setWidthMutex       sync.RWMutex
	setWidthArgsForCall []struct {
		arg1 int
	}
	ShowErrorStub        func(string)
	showErrorMutex       sync.RWMutex
	showErrorArgsForCall []struct {
		arg1 string
	}
	ShowSpinnerStub        func(string)
	showSpinnerMutex       sync.RWMutex
	showSpinnerArgsForCall []struct {
		arg1 string
	}
	ShowStatusStub        func(string)
	showStatusMutex       sync.RWMutex
	showStatusArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStatusComponent) ClearStatus() {
	fake.clearStatusMutex.Lock()
	fake.clearStatusArgsForCall = append(fake.clearStatusArgsForCall, struct {
	}{})
	stub := fake.ClearStatusStub
	fake.recordInvocation("ClearStatus", []interface{}{})
	fake.clearStatusMutex.Unlock()
	if stub != nil {
		fake.ClearStatusStub()
	}
}

func (fake *FakeStatusComponent) ClearStatusCallCount() int {
	fake.clearStatusMutex.RLock()
	defer fake.clearStatusMutex.RUnlock()
	return len(fake.clearStatusArgsForCall)
}

func (fake *FakeStatusComponent) ClearStatusCalls(stub func()) {
	fake.clearStatusMutex.Lock()
	defer fake.clearStatusMutex.Unlock()
	fake.ClearStatusStub = stub
}

func (fake *FakeStatusComponent) HasSavedState() bool {
	fake.hasSavedStateMutex.Lock()
	ret, specificReturn := fake.hasSavedStateReturnsOnCall[len(fake.hasSavedStateArgsForCall)]
	fake.hasSavedStateArgsForCall = append(fake.hasSavedStateArgsForCall, struct {
	}{})
	stub := fake.HasSavedStateStub
	fakeReturns := fake.hasSavedStateReturns
	fake.recordInvocation("HasSavedState", []interface{}{})
	fake.hasSavedStateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStatusComponent) HasSavedStateCallCount() int {
	fake.hasSavedStateMutex.RLock()
	defer fake.hasSavedStateMutex.RUnlock()
	return len(fake.hasSavedStateArgsForCall)
}

func (fake *FakeStatusComponent) HasSavedStateCalls(stub func() bool) {
	fake.hasSavedStateMutex.Lock()
	defer fake.hasSavedStateMutex.Unlock()
	fake.HasSavedStateStub = stub
}

func (fake *FakeStatusComponent) HasSavedStateReturns(result1 bool) {
	fake.hasSavedStateMutex.Lock()
	defer fake.hasSavedStateMutex.Unlock()
	fake.HasSavedStateStub = nil
	fake.hasSavedStateReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStatusComponent) HasSavedStateReturnsOnCall(i int, result1 bool) {
	fake.hasSavedStateMutex.Lock()
	defer fake.hasSavedStateMutex.Unlock()
	fake.HasSavedStateStub = nil
	if fake.hasSavedStateReturnsOnCall == nil {
		fake.hasSavedStateReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasSavedStateReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStatusComponent) IsShowingError() bool {
	fake.isShowingErrorMutex.Lock()
	ret, specificReturn := fake.isShowingErrorReturnsOnCall[len(fake.isShowingErrorArgsForCall)]
	fake.isShowingErrorArgsForCall = append(fake.isShowingErrorArgsForCall, struct {
	}{})
	stub := fake.IsShowingErrorStub
	fakeReturns := fake.isShowingErrorReturns
	fake.recordInvocation("IsShowingError", []interface{}{})
	fake.isShowingErrorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStatusComponent) IsShowingErrorCallCount() int {
	fake.isShowingErrorMutex.RLock()
	defer fake.isShowingErrorMutex.RUnlock()
	return len(fake.isShowingErrorArgsForCall)
}

func (fake *FakeStatusComponent) IsShowingErrorCalls(stub func() bool) {
	fake.isShowingErrorMutex.Lock()
	defer fake.isShowingErrorMutex.Unlock()
	fake.IsShowingErrorStub = stub
}

func (fake *FakeStatusComponent) IsShowingErrorReturns(result1 bool) {
	fake.isShowingErrorMutex.Lock()
	defer fake.isShowingErrorMutex.Unlock()
	fake.IsShowingErrorStub = nil
	fake.isShowingErrorReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStatusComponent) IsShowingErrorReturnsOnCall(i int, result1 bool) {
	fake.isShowingErrorMutex.Lock()
	defer fake.isShowingErrorMutex.Unlock()
	fake.IsShowingErrorStub = nil
	if fake.isShowingErrorReturnsOnCall == nil {
		fake.isShowingErrorReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isShowingErrorReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStatusComponent) IsShowingSpinner() bool {
	fake.isShowingSpinnerMutex.Lock()
	ret, specificReturn := fake.isShowingSpinnerReturnsOnCall[len(fake.isShowingSpinnerArgsForCall)]
	fake.isShowingSpinnerArgsForCall = append(fake.isShowingSpinnerArgsForCall, struct {
	}{})
	stub := fake.IsShowingSpinnerStub
	fakeReturns := fake.isShowingSpinnerReturns
	fake.recordInvocation("IsShowingSpinner", []interface{}{})
	fake.isShowingSpinnerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStatusComponent) IsShowingSpinnerCallCount() int {
	fake.isShowingSpinnerMutex.RLock()
	defer fake.isShowingSpinnerMutex.RUnlock()
	return len(fake.isShowingSpinnerArgsForCall)
}

func (fake *FakeStatusComponent) IsShowingSpinnerCalls(stub func() bool) {
	fake.isShowingSpinnerMutex.Lock()
	defer fake.isShowingSpinnerMutex.Unlock()
	fake.IsShowingSpinnerStub = stub
}

func (fake *FakeStatusComponent) IsShowingSpinnerReturns(result1 bool) {
	fake.isShowingSpinnerMutex.Lock()
	defer fake.isShowingSpinnerMutex.Unlock()
	fake.IsShowingSpinnerStub = nil
	fake.isShowingSpinnerReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStatusComponent) IsShowingSpinnerReturnsOnCall(i int, result1 bool) {
	fake.isShowingSpinnerMutex.Lock()
	defer fake.isShowingSpinnerMutex.Unlock()
	fake.IsShowingSpinnerStub = nil
	if fake.isShowingSpinnerReturnsOnCall == nil {
		fake.isShowingSpinnerReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isShowingSpinnerReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStatusComponent) Render() string {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
	}{})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStatusComponent) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeStatusComponent) RenderCalls(stub func() string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeStatusComponent) RenderReturns(result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStatusComponent) RenderReturnsOnCall(i int, result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStatusComponent) RestoreSavedState() tea.Cmd {
	fake.restoreSavedStateMutex.Lock()
	ret, specificReturn := fake.restoreSavedStateReturnsOnCall[len(fake.restoreSavedStateArgsForCall)]
	fake.restoreSavedStateArgsForCall = append(fake.restoreSavedStateArgsForCall, struct {
	}{})
	stub := fake.RestoreSavedStateStub
	fakeReturns := fake.restoreSavedStateReturns
	fake.recordInvocation("RestoreSavedState", []interface{}{})
	fake.restoreSavedStateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStatusComponent) RestoreSavedStateCallCount() int {
	fake.restoreSavedStateMutex.RLock()
	defer fake.restoreSavedStateMutex.RUnlock()
	return len(fake.restoreSavedStateArgsForCall)
}

func (fake *FakeStatusComponent) RestoreSavedStateCalls(stub func() tea.Cmd) {
	fake.restoreSavedStateMutex.Lock()
	defer fake.restoreSavedStateMutex.Unlock()
	fake.RestoreSavedStateStub = stub
}

func (fake *FakeStatusComponent) RestoreSavedStateReturns(result1 tea.Cmd) {
	fake.restoreSavedStateMutex.Lock()
	defer fake.restoreSavedStateMutex.Unlock()
	fake.RestoreSavedStateStub = nil
	fake.restoreSavedStateReturns = struct {
		result1 tea.Cmd
	}{result1}
}

func (fake *FakeStatusComponent) RestoreSavedStateReturnsOnCall(i int, result1 tea.Cmd) {
	fake.restoreSavedStateMutex.Lock()
	defer fake.restoreSavedStateMutex.Unlock()
	fake.RestoreSavedStateStub = nil
	if fake.restoreSavedStateReturnsOnCall == nil {
		fake.restoreSavedStateReturnsOnCall = make(map[int]struct {
			result1 tea.Cmd
		})
	}
	fake.restoreSavedStateReturnsOnCall[i] = struct {
		result1 tea.Cmd
	}{result1}
}

func (fake *FakeStatusComponent) SaveCurrentState() {
	fake.saveCurrentStateMutex.Lock()
	fake.saveCurrentStateArgsForCall = append(fake.saveCurrentStateArgsForCall, struct {
	}{})
	stub := fake.SaveCurrentStateStub
	fake.recordInvocation("SaveCurrentState", []interface{}{})
	fake.saveCurrentStateMutex.Unlock()
	if stub != nil {
		fake.SaveCurrentStateStub()
	}
}

func (fake *FakeStatusComponent) SaveCurrentStateCallCount() int {
	fake.saveCurrentStateMutex.RLock()
	defer fake.saveCurrentStateMutex.RUnlock()
	return len(fake.saveCurrentStateArgsForCall)
}

func (fake *FakeStatusComponent) SaveCurrentStateCalls(stub func()) {
	fake.saveCurrentStateMutex.Lock()
	defer fake.saveCurrentStateMutex.Unlock()
	fake.SaveCurrentStateStub = stub
}

func (fake *FakeStatusComponent) SetHeight(arg1 int) {
	fake.setHeightMutex.Lock()
	fake.setHeightArgsForCall = append(fake.setHeightArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetHeightStub
	fake.recordInvocation("SetHeight", []interface{}{arg1})
	fake.setHeightMutex.Unlock()
	if stub != nil {
		fake.SetHeightStub(arg1)
	}
}

func (fake *FakeStatusComponent) SetHeightCallCount() int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	return len(fake.setHeightArgsForCall)
}

func (fake *FakeStatusComponent) SetHeightCalls(stub func(int)) {
	fake.setHeightMutex.Lock()
	defer fake.setHeightMutex.Unlock()
	fake.SetHeightStub = stub
}

func (fake *FakeStatusComponent) SetHeightArgsForCall(i int) int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	argsForCall := fake.setHeightArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusComponent) SetTokenUsage(arg1 string) {
	fake.setTokenUsageMutex.Lock()
	fake.setTokenUsageArgsForCall = append(fake.setTokenUsageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetTokenUsageStub
	fake.recordInvocation("SetTokenUsage", []interface{}{arg1})
	fake.setTokenUsageMutex.Unlock()
	if stub != nil {
		fake.SetTokenUsageStub(arg1)
	}
}

func (fake *FakeStatusComponent) SetTokenUsageCallCount() int {
	fake.setTokenUsageMutex.RLock()
	defer fake.setTokenUsageMutex.RUnlock()
	return len(fake.setTokenUsageArgsForCall)
}

func (fake *FakeStatusComponent) SetTokenUsageCalls(stub func(string)) {
	fake.setTokenUsageMutex.Lock()
	defer fake.setTokenUsageMutex.Unlock()
	fake.SetTokenUsageStub = stub
}

func (fake *FakeStatusComponent) SetTokenUsageArgsForCall(i int) string {
	fake.setTokenUsageMutex.RLock()
	defer fake.setTokenUsageMutex.RUnlock()
	argsForCall := fake.setTokenUsageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusComponent) SetWidth(arg1 int) {
	fake.setWidthMutex.Lock()
	fake.setWidthArgsForCall = append(fake.setWidthArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetWidthStub
	fake.recordInvocation("SetWidth", []interface{}{arg1})
	fake.setWidthMutex.Unlock()
	if stub != nil {
		fake.SetWidthStub(arg1)
	}
}

func (fake *FakeStatusComponent) SetWidthCallCount() int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	return len(fake.setWidthArgsForCall)
}

func (fake *FakeStatusComponent) SetWidthCalls(stub func(int)) {
	fake.setWidthMutex.Lock()
	defer fake.setWidthMutex.Unlock()
	fake.SetWidthStub = stub
}

func (fake *FakeStatusComponent) SetWidthArgsForCall(i int) int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	argsForCall := fake.setWidthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusComponent) ShowError(arg1 string) {
	fake.showErrorMutex.Lock()
	fake.showErrorArgsForCall = append(fake.showErrorArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ShowErrorStub
	fake.recordInvocation("ShowError", []interface{}{arg1})
	fake.showErrorMutex.Unlock()
	if stub != nil {
		fake.ShowErrorStub(arg1)
	}
}

func (fake *FakeStatusComponent) ShowErrorCallCount() int {
	fake.showErrorMutex.RLock()
	defer fake.showErrorMutex.RUnlock()
	return len(fake.showErrorArgsForCall)
}

func (fake *FakeStatusComponent) ShowErrorCalls(stub func(string)) {
	fake.showErrorMutex.Lock()
	defer fake.showErrorMutex.Unlock()
	fake.ShowErrorStub = stub
}

func (fake *FakeStatusComponent) ShowErrorArgsForCall(i int) string {
	fake.showErrorMutex.RLock()
	defer fake.showErrorMutex.RUnlock()
	argsForCall := fake.showErrorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusComponent) ShowSpinner(arg1 string) {
	fake.showSpinnerMutex.Lock()
	fake.showSpinnerArgsForCall = append(fake.showSpinnerArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ShowSpinnerStub
	fake.recordInvocation("ShowSpinner", []interface{}{arg1})
	fake.showSpinnerMutex.Unlock()
	if stub != nil {
		fake.ShowSpinnerStub(arg1)
	}
}

func (fake *FakeStatusComponent) ShowSpinnerCallCount() int {
	fake.showSpinnerMutex.RLock()
	defer fake.showSpinnerMutex.RUnlock()
	return len(fake.showSpinnerArgsForCall)
}

func (fake *FakeStatusComponent) ShowSpinnerCalls(stub func(string)) {
	fake.showSpinnerMutex.Lock()
	defer fake.showSpinnerMutex.Unlock()
	fake.ShowSpinnerStub = stub
}

func (fake *FakeStatusComponent) ShowSpinnerArgsForCall(i int) string {
	fake.showSpinnerMutex.RLock()
	defer fake.showSpinnerMutex.RUnlock()
	argsForCall := fake.showSpinnerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusComponent) ShowStatus(arg1 string) {
	fake.showStatusMutex.Lock()
	fake.showStatusArgsForCall = append(fake.showStatusArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ShowStatusStub
	fake.recordInvocation("ShowStatus", []interface{}{arg1})
	fake.showStatusMutex.Unlock()
	if stub != nil {
		fake.ShowStatusStub(arg1)
	}
}

func (fake *FakeStatusComponent) ShowStatusCallCount() int {
	fake.showStatusMutex.RLock()
	defer fake.showStatusMutex.RUnlock()
	return len(fake.showStatusArgsForCall)
}

func (fake *FakeStatusComponent) ShowStatusCalls(stub func(string)) {
	fake.showStatusMutex.Lock()
	defer fake.showStatusMutex.Unlock()
	fake.ShowStatusStub = stub
}

func (fake *FakeStatusComponent) ShowStatusArgsForCall(i int) string {
	fake.showStatusMutex.RLock()
	defer fake.showStatusMutex.RUnlock()
	argsForCall := fake.showStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStatusComponent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStatusComponent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.StatusComponent = new(FakeStatusComponent)
