// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeToolFactory struct {
	CreateToolStub        func(string) (domain.Tool, error)
	createToolMutex       sync.RWMutex
	createToolArgsForCall []struct {
		arg1 string
	}
	createToolReturns struct {
		result1 domain.Tool
		result2 error
	}
	createToolReturnsOnCall map[int]struct {
		result1 domain.Tool
		result2 error
	}
	ListAvailableToolsStub        func() []string
	listAvailableToolsMutex       sync.RWMutex
	listAvailableToolsArgsForCall []struct {
	}
	listAvailableToolsReturns struct {
		result1 []string
	}
	listAvailableToolsReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeToolFactory) CreateTool(arg1 string) (domain.Tool, error) {
	fake.createToolMutex.Lock()
	ret, specificReturn := fake.createToolReturnsOnCall[len(fake.createToolArgsForCall)]
	fake.createToolArgsForCall = append(fake.createToolArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateToolStub
	fakeReturns := fake.createToolReturns
	fake.recordInvocation("CreateTool", []interface{}{arg1})
	fake.createToolMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeToolFactory) CreateToolCallCount() int {
	fake.createToolMutex.RLock()
	defer fake.createToolMutex.RUnlock()
	return len(fake.createToolArgsForCall)
}

func (fake *FakeToolFactory) CreateToolCalls(stub func(string) (domain.Tool, error)) {
	fake.createToolMutex.Lock()
	defer fake.createToolMutex.Unlock()
	fake.CreateToolStub = stub
}

func (fake *FakeToolFactory) CreateToolArgsForCall(i int) string {
	fake.createToolMutex.RLock()
	defer fake.createToolMutex.RUnlock()
	argsForCall := fake.createToolArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeToolFactory) CreateToolReturns(result1 domain.Tool, result2 error) {
	fake.createToolMutex.Lock()
	defer fake.createToolMutex.Unlock()
	fake.CreateToolStub = nil
	fake.createToolReturns = struct {
		result1 domain.Tool
		result2 error
	}{result1, result2}
}

func (fake *FakeToolFactory) CreateToolReturnsOnCall(i int, result1 domain.Tool, result2 error) {
	fake.createToolMutex.Lock()
	defer fake.createToolMutex.Unlock()
	fake.CreateToolStub = nil
	if fake.createToolReturnsOnCall == nil {
		fake.createToolReturnsOnCall = make(map[int]struct {
			result1 domain.Tool
			result2 error
		})
	}
	fake.createToolReturnsOnCall[i] = struct {
		result1 domain.Tool
		result2 error
	}{result1, result2}
}

func (fake *FakeToolFactory) ListAvailableTools() []string {
	fake.listAvailableToolsMutex.Lock()
	ret, specificReturn := fake.listAvailableToolsReturnsOnCall[len(fake.listAvailableToolsArgsForCall)]
	fake.listAvailableToolsArgsForCall = append(fake.listAvailableToolsArgsForCall, struct {
	}{})
	stub := fake.ListAvailableToolsStub
	fakeReturns := fake.listAvailableToolsReturns
	fake.recordInvocation("ListAvailableTools", []interface{}{})
	fake.listAvailableToolsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeToolFactory) ListAvailableToolsCallCount() int {
	fake.listAvailableToolsMutex.RLock()
	defer fake.listAvailableToolsMutex.RUnlock()
	return len(fake.listAvailableToolsArgsForCall)
}

func (fake *FakeToolFactory) ListAvailableToolsCalls(stub func() []string) {
	fake.listAvailableToolsMutex.Lock()
	defer fake.listAvailableToolsMutex.Unlock()
	fake.ListAvailableToolsStub = stub
}

func (fake *FakeToolFactory) ListAvailableToolsReturns(result1 []string) {
	fake.listAvailableToolsMutex.Lock()
	defer fake.listAvailableToolsMutex.Unlock()
	fake.ListAvailableToolsStub = nil
	fake.listAvailableToolsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeToolFactory) ListAvailableToolsReturnsOnCall(i int, result1 []string) {
	fake.listAvailableToolsMutex.Lock()
	defer fake.listAvailableToolsMutex.Unlock()
	fake.ListAvailableToolsStub = nil
	if fake.listAvailableToolsReturnsOnCall == nil {
		fake.listAvailableToolsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.listAvailableToolsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeToolFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeToolFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.ToolFactory = new(FakeToolFactory)
