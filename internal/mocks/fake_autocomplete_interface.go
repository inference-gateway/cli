// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/inference-gateway/cli/internal/ui/shared"
)

type FakeAutocompleteInterface struct {
	GetSelectedShortcutStub        func() string
	getSelectedShortcutMutex       sync.RWMutex
	getSelectedShortcutArgsForCall []struct {
	}
	getSelectedShortcutReturns struct {
		result1 string
	}
	getSelectedShortcutReturnsOnCall map[int]struct {
		result1 string
	}
	HandleKeyStub        func(tea.KeyMsg) (bool, string)
	handleKeyMutex       sync.RWMutex
	handleKeyArgsForCall []struct {
		arg1 tea.KeyMsg
	}
	handleKeyReturns struct {
		result1 bool
		result2 string
	}
	handleKeyReturnsOnCall map[int]struct {
		result1 bool
		result2 string
	}
	HideStub        func()
	hideMutex       sync.RWMutex
	hideArgsForCall []struct {
	}
	IsVisibleStub        func() bool
	isVisibleMutex       sync.RWMutex
	isVisibleArgsForCall []struct {
	}
	isVisibleReturns struct {
		result1 bool
	}
	isVisibleReturnsOnCall map[int]struct {
		result1 bool
	}
	RenderStub        func() string
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
	}
	renderReturns struct {
		result1 string
	}
	renderReturnsOnCall map[int]struct {
		result1 string
	}
	SetWidthStub        func(int)
	setWidthMutex       sync.RWMutex
	setWidthArgsForCall []struct {
		arg1 int
	}
	UpdateStub        func(string, int)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 string
		arg2 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAutocompleteInterface) GetSelectedShortcut() string {
	fake.getSelectedShortcutMutex.Lock()
	ret, specificReturn := fake.getSelectedShortcutReturnsOnCall[len(fake.getSelectedShortcutArgsForCall)]
	fake.getSelectedShortcutArgsForCall = append(fake.getSelectedShortcutArgsForCall, struct {
	}{})
	stub := fake.GetSelectedShortcutStub
	fakeReturns := fake.getSelectedShortcutReturns
	fake.recordInvocation("GetSelectedShortcut", []interface{}{})
	fake.getSelectedShortcutMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAutocompleteInterface) GetSelectedShortcutCallCount() int {
	fake.getSelectedShortcutMutex.RLock()
	defer fake.getSelectedShortcutMutex.RUnlock()
	return len(fake.getSelectedShortcutArgsForCall)
}

func (fake *FakeAutocompleteInterface) GetSelectedShortcutCalls(stub func() string) {
	fake.getSelectedShortcutMutex.Lock()
	defer fake.getSelectedShortcutMutex.Unlock()
	fake.GetSelectedShortcutStub = stub
}

func (fake *FakeAutocompleteInterface) GetSelectedShortcutReturns(result1 string) {
	fake.getSelectedShortcutMutex.Lock()
	defer fake.getSelectedShortcutMutex.Unlock()
	fake.GetSelectedShortcutStub = nil
	fake.getSelectedShortcutReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAutocompleteInterface) GetSelectedShortcutReturnsOnCall(i int, result1 string) {
	fake.getSelectedShortcutMutex.Lock()
	defer fake.getSelectedShortcutMutex.Unlock()
	fake.GetSelectedShortcutStub = nil
	if fake.getSelectedShortcutReturnsOnCall == nil {
		fake.getSelectedShortcutReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getSelectedShortcutReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAutocompleteInterface) HandleKey(arg1 tea.KeyMsg) (bool, string) {
	fake.handleKeyMutex.Lock()
	ret, specificReturn := fake.handleKeyReturnsOnCall[len(fake.handleKeyArgsForCall)]
	fake.handleKeyArgsForCall = append(fake.handleKeyArgsForCall, struct {
		arg1 tea.KeyMsg
	}{arg1})
	stub := fake.HandleKeyStub
	fakeReturns := fake.handleKeyReturns
	fake.recordInvocation("HandleKey", []interface{}{arg1})
	fake.handleKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAutocompleteInterface) HandleKeyCallCount() int {
	fake.handleKeyMutex.RLock()
	defer fake.handleKeyMutex.RUnlock()
	return len(fake.handleKeyArgsForCall)
}

func (fake *FakeAutocompleteInterface) HandleKeyCalls(stub func(tea.KeyMsg) (bool, string)) {
	fake.handleKeyMutex.Lock()
	defer fake.handleKeyMutex.Unlock()
	fake.HandleKeyStub = stub
}

func (fake *FakeAutocompleteInterface) HandleKeyArgsForCall(i int) tea.KeyMsg {
	fake.handleKeyMutex.RLock()
	defer fake.handleKeyMutex.RUnlock()
	argsForCall := fake.handleKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAutocompleteInterface) HandleKeyReturns(result1 bool, result2 string) {
	fake.handleKeyMutex.Lock()
	defer fake.handleKeyMutex.Unlock()
	fake.HandleKeyStub = nil
	fake.handleKeyReturns = struct {
		result1 bool
		result2 string
	}{result1, result2}
}

func (fake *FakeAutocompleteInterface) HandleKeyReturnsOnCall(i int, result1 bool, result2 string) {
	fake.handleKeyMutex.Lock()
	defer fake.handleKeyMutex.Unlock()
	fake.HandleKeyStub = nil
	if fake.handleKeyReturnsOnCall == nil {
		fake.handleKeyReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 string
		})
	}
	fake.handleKeyReturnsOnCall[i] = struct {
		result1 bool
		result2 string
	}{result1, result2}
}

func (fake *FakeAutocompleteInterface) Hide() {
	fake.hideMutex.Lock()
	fake.hideArgsForCall = append(fake.hideArgsForCall, struct {
	}{})
	stub := fake.HideStub
	fake.recordInvocation("Hide", []interface{}{})
	fake.hideMutex.Unlock()
	if stub != nil {
		fake.HideStub()
	}
}

func (fake *FakeAutocompleteInterface) HideCallCount() int {
	fake.hideMutex.RLock()
	defer fake.hideMutex.RUnlock()
	return len(fake.hideArgsForCall)
}

func (fake *FakeAutocompleteInterface) HideCalls(stub func()) {
	fake.hideMutex.Lock()
	defer fake.hideMutex.Unlock()
	fake.HideStub = stub
}

func (fake *FakeAutocompleteInterface) IsVisible() bool {
	fake.isVisibleMutex.Lock()
	ret, specificReturn := fake.isVisibleReturnsOnCall[len(fake.isVisibleArgsForCall)]
	fake.isVisibleArgsForCall = append(fake.isVisibleArgsForCall, struct {
	}{})
	stub := fake.IsVisibleStub
	fakeReturns := fake.isVisibleReturns
	fake.recordInvocation("IsVisible", []interface{}{})
	fake.isVisibleMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAutocompleteInterface) IsVisibleCallCount() int {
	fake.isVisibleMutex.RLock()
	defer fake.isVisibleMutex.RUnlock()
	return len(fake.isVisibleArgsForCall)
}

func (fake *FakeAutocompleteInterface) IsVisibleCalls(stub func() bool) {
	fake.isVisibleMutex.Lock()
	defer fake.isVisibleMutex.Unlock()
	fake.IsVisibleStub = stub
}

func (fake *FakeAutocompleteInterface) IsVisibleReturns(result1 bool) {
	fake.isVisibleMutex.Lock()
	defer fake.isVisibleMutex.Unlock()
	fake.IsVisibleStub = nil
	fake.isVisibleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeAutocompleteInterface) IsVisibleReturnsOnCall(i int, result1 bool) {
	fake.isVisibleMutex.Lock()
	defer fake.isVisibleMutex.Unlock()
	fake.IsVisibleStub = nil
	if fake.isVisibleReturnsOnCall == nil {
		fake.isVisibleReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isVisibleReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeAutocompleteInterface) Render() string {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
	}{})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAutocompleteInterface) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeAutocompleteInterface) RenderCalls(stub func() string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeAutocompleteInterface) RenderReturns(result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAutocompleteInterface) RenderReturnsOnCall(i int, result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAutocompleteInterface) SetWidth(arg1 int) {
	fake.setWidthMutex.Lock()
	fake.setWidthArgsForCall = append(fake.setWidthArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetWidthStub
	fake.recordInvocation("SetWidth", []interface{}{arg1})
	fake.setWidthMutex.Unlock()
	if stub != nil {
		fake.SetWidthStub(arg1)
	}
}

func (fake *FakeAutocompleteInterface) SetWidthCallCount() int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	return len(fake.setWidthArgsForCall)
}

func (fake *FakeAutocompleteInterface) SetWidthCalls(stub func(int)) {
	fake.setWidthMutex.Lock()
	defer fake.setWidthMutex.Unlock()
	fake.SetWidthStub = stub
}

func (fake *FakeAutocompleteInterface) SetWidthArgsForCall(i int) int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	argsForCall := fake.setWidthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAutocompleteInterface) Update(arg1 string, arg2 int) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	stub := fake.UpdateStub
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if stub != nil {
		fake.UpdateStub(arg1, arg2)
	}
}

func (fake *FakeAutocompleteInterface) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeAutocompleteInterface) UpdateCalls(stub func(string, int)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeAutocompleteInterface) UpdateArgsForCall(i int) (string, int) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAutocompleteInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSelectedShortcutMutex.RLock()
	defer fake.getSelectedShortcutMutex.RUnlock()
	fake.handleKeyMutex.RLock()
	defer fake.handleKeyMutex.RUnlock()
	fake.hideMutex.RLock()
	defer fake.hideMutex.RUnlock()
	fake.isVisibleMutex.RLock()
	defer fake.isVisibleMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAutocompleteInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shared.AutocompleteInterface = new(FakeAutocompleteInterface)
