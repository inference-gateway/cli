// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/cli/internal/domain"
)

type FakeTool struct {
	DefinitionStub        func() domain.ToolDefinition
	definitionMutex       sync.RWMutex
	definitionArgsForCall []struct {
	}
	definitionReturns struct {
		result1 domain.ToolDefinition
	}
	definitionReturnsOnCall map[int]struct {
		result1 domain.ToolDefinition
	}
	ExecuteStub        func(context.Context, map[string]any) (*domain.ToolExecutionResult, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 context.Context
		arg2 map[string]any
	}
	executeReturns struct {
		result1 *domain.ToolExecutionResult
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 *domain.ToolExecutionResult
		result2 error
	}
	IsEnabledStub        func() bool
	isEnabledMutex       sync.RWMutex
	isEnabledArgsForCall []struct {
	}
	isEnabledReturns struct {
		result1 bool
	}
	isEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	ValidateStub        func(map[string]any) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 map[string]any
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTool) Definition() domain.ToolDefinition {
	fake.definitionMutex.Lock()
	ret, specificReturn := fake.definitionReturnsOnCall[len(fake.definitionArgsForCall)]
	fake.definitionArgsForCall = append(fake.definitionArgsForCall, struct {
	}{})
	stub := fake.DefinitionStub
	fakeReturns := fake.definitionReturns
	fake.recordInvocation("Definition", []interface{}{})
	fake.definitionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTool) DefinitionCallCount() int {
	fake.definitionMutex.RLock()
	defer fake.definitionMutex.RUnlock()
	return len(fake.definitionArgsForCall)
}

func (fake *FakeTool) DefinitionCalls(stub func() domain.ToolDefinition) {
	fake.definitionMutex.Lock()
	defer fake.definitionMutex.Unlock()
	fake.DefinitionStub = stub
}

func (fake *FakeTool) DefinitionReturns(result1 domain.ToolDefinition) {
	fake.definitionMutex.Lock()
	defer fake.definitionMutex.Unlock()
	fake.DefinitionStub = nil
	fake.definitionReturns = struct {
		result1 domain.ToolDefinition
	}{result1}
}

func (fake *FakeTool) DefinitionReturnsOnCall(i int, result1 domain.ToolDefinition) {
	fake.definitionMutex.Lock()
	defer fake.definitionMutex.Unlock()
	fake.DefinitionStub = nil
	if fake.definitionReturnsOnCall == nil {
		fake.definitionReturnsOnCall = make(map[int]struct {
			result1 domain.ToolDefinition
		})
	}
	fake.definitionReturnsOnCall[i] = struct {
		result1 domain.ToolDefinition
	}{result1}
}

func (fake *FakeTool) Execute(arg1 context.Context, arg2 map[string]any) (*domain.ToolExecutionResult, error) {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 context.Context
		arg2 map[string]any
	}{arg1, arg2})
	stub := fake.ExecuteStub
	fakeReturns := fake.executeReturns
	fake.recordInvocation("Execute", []interface{}{arg1, arg2})
	fake.executeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTool) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeTool) ExecuteCalls(stub func(context.Context, map[string]any) (*domain.ToolExecutionResult, error)) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *FakeTool) ExecuteArgsForCall(i int) (context.Context, map[string]any) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTool) ExecuteReturns(result1 *domain.ToolExecutionResult, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 *domain.ToolExecutionResult
		result2 error
	}{result1, result2}
}

func (fake *FakeTool) ExecuteReturnsOnCall(i int, result1 *domain.ToolExecutionResult, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 *domain.ToolExecutionResult
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 *domain.ToolExecutionResult
		result2 error
	}{result1, result2}
}

func (fake *FakeTool) IsEnabled() bool {
	fake.isEnabledMutex.Lock()
	ret, specificReturn := fake.isEnabledReturnsOnCall[len(fake.isEnabledArgsForCall)]
	fake.isEnabledArgsForCall = append(fake.isEnabledArgsForCall, struct {
	}{})
	stub := fake.IsEnabledStub
	fakeReturns := fake.isEnabledReturns
	fake.recordInvocation("IsEnabled", []interface{}{})
	fake.isEnabledMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTool) IsEnabledCallCount() int {
	fake.isEnabledMutex.RLock()
	defer fake.isEnabledMutex.RUnlock()
	return len(fake.isEnabledArgsForCall)
}

func (fake *FakeTool) IsEnabledCalls(stub func() bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = stub
}

func (fake *FakeTool) IsEnabledReturns(result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	fake.isEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTool) IsEnabledReturnsOnCall(i int, result1 bool) {
	fake.isEnabledMutex.Lock()
	defer fake.isEnabledMutex.Unlock()
	fake.IsEnabledStub = nil
	if fake.isEnabledReturnsOnCall == nil {
		fake.isEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeTool) Validate(arg1 map[string]any) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 map[string]any
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTool) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeTool) ValidateCalls(stub func(map[string]any) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakeTool) ValidateArgsForCall(i int) map[string]any {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTool) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTool) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.Tool = new(FakeTool)
