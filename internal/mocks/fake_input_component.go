// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/inference-gateway/cli/internal/ui"
)

type FakeInputComponent struct {
	CanHandleStub        func(tea.KeyMsg) bool
	canHandleMutex       sync.RWMutex
	canHandleArgsForCall []struct {
		arg1 tea.KeyMsg
	}
	canHandleReturns struct {
		result1 bool
	}
	canHandleReturnsOnCall map[int]struct {
		result1 bool
	}
	ClearInputStub        func()
	clearInputMutex       sync.RWMutex
	clearInputArgsForCall []struct {
	}
	GetCursorStub        func() int
	getCursorMutex       sync.RWMutex
	getCursorArgsForCall []struct {
	}
	getCursorReturns struct {
		result1 int
	}
	getCursorReturnsOnCall map[int]struct {
		result1 int
	}
	GetInputStub        func() string
	getInputMutex       sync.RWMutex
	getInputArgsForCall []struct {
	}
	getInputReturns struct {
		result1 string
	}
	getInputReturnsOnCall map[int]struct {
		result1 string
	}
	HandleKeyStub        func(tea.KeyMsg) (tea.Model, tea.Cmd)
	handleKeyMutex       sync.RWMutex
	handleKeyArgsForCall []struct {
		arg1 tea.KeyMsg
	}
	handleKeyReturns struct {
		result1 tea.Model
		result2 tea.Cmd
	}
	handleKeyReturnsOnCall map[int]struct {
		result1 tea.Model
		result2 tea.Cmd
	}
	IsAutocompleteVisibleStub        func() bool
	isAutocompleteVisibleMutex       sync.RWMutex
	isAutocompleteVisibleArgsForCall []struct {
	}
	isAutocompleteVisibleReturns struct {
		result1 bool
	}
	isAutocompleteVisibleReturnsOnCall map[int]struct {
		result1 bool
	}
	NavigateHistoryDownStub        func()
	navigateHistoryDownMutex       sync.RWMutex
	navigateHistoryDownArgsForCall []struct {
	}
	NavigateHistoryUpStub        func()
	navigateHistoryUpMutex       sync.RWMutex
	navigateHistoryUpArgsForCall []struct {
	}
	RenderStub        func() string
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
	}
	renderReturns struct {
		result1 string
	}
	renderReturnsOnCall map[int]struct {
		result1 string
	}
	SetCursorStub        func(int)
	setCursorMutex       sync.RWMutex
	setCursorArgsForCall []struct {
		arg1 int
	}
	SetHeightStub        func(int)
	setHeightMutex       sync.RWMutex
	setHeightArgsForCall []struct {
		arg1 int
	}
	SetPlaceholderStub        func(string)
	setPlaceholderMutex       sync.RWMutex
	setPlaceholderArgsForCall []struct {
		arg1 string
	}
	SetTextStub        func(string)
	setTextMutex       sync.RWMutex
	setTextArgsForCall []struct {
		arg1 string
	}
	SetWidthStub        func(int)
	setWidthMutex       sync.RWMutex
	setWidthArgsForCall []struct {
		arg1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInputComponent) CanHandle(arg1 tea.KeyMsg) bool {
	fake.canHandleMutex.Lock()
	ret, specificReturn := fake.canHandleReturnsOnCall[len(fake.canHandleArgsForCall)]
	fake.canHandleArgsForCall = append(fake.canHandleArgsForCall, struct {
		arg1 tea.KeyMsg
	}{arg1})
	stub := fake.CanHandleStub
	fakeReturns := fake.canHandleReturns
	fake.recordInvocation("CanHandle", []interface{}{arg1})
	fake.canHandleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInputComponent) CanHandleCallCount() int {
	fake.canHandleMutex.RLock()
	defer fake.canHandleMutex.RUnlock()
	return len(fake.canHandleArgsForCall)
}

func (fake *FakeInputComponent) CanHandleCalls(stub func(tea.KeyMsg) bool) {
	fake.canHandleMutex.Lock()
	defer fake.canHandleMutex.Unlock()
	fake.CanHandleStub = stub
}

func (fake *FakeInputComponent) CanHandleArgsForCall(i int) tea.KeyMsg {
	fake.canHandleMutex.RLock()
	defer fake.canHandleMutex.RUnlock()
	argsForCall := fake.canHandleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) CanHandleReturns(result1 bool) {
	fake.canHandleMutex.Lock()
	defer fake.canHandleMutex.Unlock()
	fake.CanHandleStub = nil
	fake.canHandleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInputComponent) CanHandleReturnsOnCall(i int, result1 bool) {
	fake.canHandleMutex.Lock()
	defer fake.canHandleMutex.Unlock()
	fake.CanHandleStub = nil
	if fake.canHandleReturnsOnCall == nil {
		fake.canHandleReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.canHandleReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInputComponent) ClearInput() {
	fake.clearInputMutex.Lock()
	fake.clearInputArgsForCall = append(fake.clearInputArgsForCall, struct {
	}{})
	stub := fake.ClearInputStub
	fake.recordInvocation("ClearInput", []interface{}{})
	fake.clearInputMutex.Unlock()
	if stub != nil {
		fake.ClearInputStub()
	}
}

func (fake *FakeInputComponent) ClearInputCallCount() int {
	fake.clearInputMutex.RLock()
	defer fake.clearInputMutex.RUnlock()
	return len(fake.clearInputArgsForCall)
}

func (fake *FakeInputComponent) ClearInputCalls(stub func()) {
	fake.clearInputMutex.Lock()
	defer fake.clearInputMutex.Unlock()
	fake.ClearInputStub = stub
}

func (fake *FakeInputComponent) GetCursor() int {
	fake.getCursorMutex.Lock()
	ret, specificReturn := fake.getCursorReturnsOnCall[len(fake.getCursorArgsForCall)]
	fake.getCursorArgsForCall = append(fake.getCursorArgsForCall, struct {
	}{})
	stub := fake.GetCursorStub
	fakeReturns := fake.getCursorReturns
	fake.recordInvocation("GetCursor", []interface{}{})
	fake.getCursorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInputComponent) GetCursorCallCount() int {
	fake.getCursorMutex.RLock()
	defer fake.getCursorMutex.RUnlock()
	return len(fake.getCursorArgsForCall)
}

func (fake *FakeInputComponent) GetCursorCalls(stub func() int) {
	fake.getCursorMutex.Lock()
	defer fake.getCursorMutex.Unlock()
	fake.GetCursorStub = stub
}

func (fake *FakeInputComponent) GetCursorReturns(result1 int) {
	fake.getCursorMutex.Lock()
	defer fake.getCursorMutex.Unlock()
	fake.GetCursorStub = nil
	fake.getCursorReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeInputComponent) GetCursorReturnsOnCall(i int, result1 int) {
	fake.getCursorMutex.Lock()
	defer fake.getCursorMutex.Unlock()
	fake.GetCursorStub = nil
	if fake.getCursorReturnsOnCall == nil {
		fake.getCursorReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getCursorReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeInputComponent) GetInput() string {
	fake.getInputMutex.Lock()
	ret, specificReturn := fake.getInputReturnsOnCall[len(fake.getInputArgsForCall)]
	fake.getInputArgsForCall = append(fake.getInputArgsForCall, struct {
	}{})
	stub := fake.GetInputStub
	fakeReturns := fake.getInputReturns
	fake.recordInvocation("GetInput", []interface{}{})
	fake.getInputMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInputComponent) GetInputCallCount() int {
	fake.getInputMutex.RLock()
	defer fake.getInputMutex.RUnlock()
	return len(fake.getInputArgsForCall)
}

func (fake *FakeInputComponent) GetInputCalls(stub func() string) {
	fake.getInputMutex.Lock()
	defer fake.getInputMutex.Unlock()
	fake.GetInputStub = stub
}

func (fake *FakeInputComponent) GetInputReturns(result1 string) {
	fake.getInputMutex.Lock()
	defer fake.getInputMutex.Unlock()
	fake.GetInputStub = nil
	fake.getInputReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInputComponent) GetInputReturnsOnCall(i int, result1 string) {
	fake.getInputMutex.Lock()
	defer fake.getInputMutex.Unlock()
	fake.GetInputStub = nil
	if fake.getInputReturnsOnCall == nil {
		fake.getInputReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getInputReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInputComponent) HandleKey(arg1 tea.KeyMsg) (tea.Model, tea.Cmd) {
	fake.handleKeyMutex.Lock()
	ret, specificReturn := fake.handleKeyReturnsOnCall[len(fake.handleKeyArgsForCall)]
	fake.handleKeyArgsForCall = append(fake.handleKeyArgsForCall, struct {
		arg1 tea.KeyMsg
	}{arg1})
	stub := fake.HandleKeyStub
	fakeReturns := fake.handleKeyReturns
	fake.recordInvocation("HandleKey", []interface{}{arg1})
	fake.handleKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInputComponent) HandleKeyCallCount() int {
	fake.handleKeyMutex.RLock()
	defer fake.handleKeyMutex.RUnlock()
	return len(fake.handleKeyArgsForCall)
}

func (fake *FakeInputComponent) HandleKeyCalls(stub func(tea.KeyMsg) (tea.Model, tea.Cmd)) {
	fake.handleKeyMutex.Lock()
	defer fake.handleKeyMutex.Unlock()
	fake.HandleKeyStub = stub
}

func (fake *FakeInputComponent) HandleKeyArgsForCall(i int) tea.KeyMsg {
	fake.handleKeyMutex.RLock()
	defer fake.handleKeyMutex.RUnlock()
	argsForCall := fake.handleKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) HandleKeyReturns(result1 tea.Model, result2 tea.Cmd) {
	fake.handleKeyMutex.Lock()
	defer fake.handleKeyMutex.Unlock()
	fake.HandleKeyStub = nil
	fake.handleKeyReturns = struct {
		result1 tea.Model
		result2 tea.Cmd
	}{result1, result2}
}

func (fake *FakeInputComponent) HandleKeyReturnsOnCall(i int, result1 tea.Model, result2 tea.Cmd) {
	fake.handleKeyMutex.Lock()
	defer fake.handleKeyMutex.Unlock()
	fake.HandleKeyStub = nil
	if fake.handleKeyReturnsOnCall == nil {
		fake.handleKeyReturnsOnCall = make(map[int]struct {
			result1 tea.Model
			result2 tea.Cmd
		})
	}
	fake.handleKeyReturnsOnCall[i] = struct {
		result1 tea.Model
		result2 tea.Cmd
	}{result1, result2}
}

func (fake *FakeInputComponent) IsAutocompleteVisible() bool {
	fake.isAutocompleteVisibleMutex.Lock()
	ret, specificReturn := fake.isAutocompleteVisibleReturnsOnCall[len(fake.isAutocompleteVisibleArgsForCall)]
	fake.isAutocompleteVisibleArgsForCall = append(fake.isAutocompleteVisibleArgsForCall, struct {
	}{})
	stub := fake.IsAutocompleteVisibleStub
	fakeReturns := fake.isAutocompleteVisibleReturns
	fake.recordInvocation("IsAutocompleteVisible", []interface{}{})
	fake.isAutocompleteVisibleMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInputComponent) IsAutocompleteVisibleCallCount() int {
	fake.isAutocompleteVisibleMutex.RLock()
	defer fake.isAutocompleteVisibleMutex.RUnlock()
	return len(fake.isAutocompleteVisibleArgsForCall)
}

func (fake *FakeInputComponent) IsAutocompleteVisibleCalls(stub func() bool) {
	fake.isAutocompleteVisibleMutex.Lock()
	defer fake.isAutocompleteVisibleMutex.Unlock()
	fake.IsAutocompleteVisibleStub = stub
}

func (fake *FakeInputComponent) IsAutocompleteVisibleReturns(result1 bool) {
	fake.isAutocompleteVisibleMutex.Lock()
	defer fake.isAutocompleteVisibleMutex.Unlock()
	fake.IsAutocompleteVisibleStub = nil
	fake.isAutocompleteVisibleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInputComponent) IsAutocompleteVisibleReturnsOnCall(i int, result1 bool) {
	fake.isAutocompleteVisibleMutex.Lock()
	defer fake.isAutocompleteVisibleMutex.Unlock()
	fake.IsAutocompleteVisibleStub = nil
	if fake.isAutocompleteVisibleReturnsOnCall == nil {
		fake.isAutocompleteVisibleReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isAutocompleteVisibleReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeInputComponent) NavigateHistoryDown() {
	fake.navigateHistoryDownMutex.Lock()
	fake.navigateHistoryDownArgsForCall = append(fake.navigateHistoryDownArgsForCall, struct {
	}{})
	stub := fake.NavigateHistoryDownStub
	fake.recordInvocation("NavigateHistoryDown", []interface{}{})
	fake.navigateHistoryDownMutex.Unlock()
	if stub != nil {
		fake.NavigateHistoryDownStub()
	}
}

func (fake *FakeInputComponent) NavigateHistoryDownCallCount() int {
	fake.navigateHistoryDownMutex.RLock()
	defer fake.navigateHistoryDownMutex.RUnlock()
	return len(fake.navigateHistoryDownArgsForCall)
}

func (fake *FakeInputComponent) NavigateHistoryDownCalls(stub func()) {
	fake.navigateHistoryDownMutex.Lock()
	defer fake.navigateHistoryDownMutex.Unlock()
	fake.NavigateHistoryDownStub = stub
}

func (fake *FakeInputComponent) NavigateHistoryUp() {
	fake.navigateHistoryUpMutex.Lock()
	fake.navigateHistoryUpArgsForCall = append(fake.navigateHistoryUpArgsForCall, struct {
	}{})
	stub := fake.NavigateHistoryUpStub
	fake.recordInvocation("NavigateHistoryUp", []interface{}{})
	fake.navigateHistoryUpMutex.Unlock()
	if stub != nil {
		fake.NavigateHistoryUpStub()
	}
}

func (fake *FakeInputComponent) NavigateHistoryUpCallCount() int {
	fake.navigateHistoryUpMutex.RLock()
	defer fake.navigateHistoryUpMutex.RUnlock()
	return len(fake.navigateHistoryUpArgsForCall)
}

func (fake *FakeInputComponent) NavigateHistoryUpCalls(stub func()) {
	fake.navigateHistoryUpMutex.Lock()
	defer fake.navigateHistoryUpMutex.Unlock()
	fake.NavigateHistoryUpStub = stub
}

func (fake *FakeInputComponent) Render() string {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
	}{})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInputComponent) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeInputComponent) RenderCalls(stub func() string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeInputComponent) RenderReturns(result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeInputComponent) RenderReturnsOnCall(i int, result1 string) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeInputComponent) SetCursor(arg1 int) {
	fake.setCursorMutex.Lock()
	fake.setCursorArgsForCall = append(fake.setCursorArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetCursorStub
	fake.recordInvocation("SetCursor", []interface{}{arg1})
	fake.setCursorMutex.Unlock()
	if stub != nil {
		fake.SetCursorStub(arg1)
	}
}

func (fake *FakeInputComponent) SetCursorCallCount() int {
	fake.setCursorMutex.RLock()
	defer fake.setCursorMutex.RUnlock()
	return len(fake.setCursorArgsForCall)
}

func (fake *FakeInputComponent) SetCursorCalls(stub func(int)) {
	fake.setCursorMutex.Lock()
	defer fake.setCursorMutex.Unlock()
	fake.SetCursorStub = stub
}

func (fake *FakeInputComponent) SetCursorArgsForCall(i int) int {
	fake.setCursorMutex.RLock()
	defer fake.setCursorMutex.RUnlock()
	argsForCall := fake.setCursorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) SetHeight(arg1 int) {
	fake.setHeightMutex.Lock()
	fake.setHeightArgsForCall = append(fake.setHeightArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetHeightStub
	fake.recordInvocation("SetHeight", []interface{}{arg1})
	fake.setHeightMutex.Unlock()
	if stub != nil {
		fake.SetHeightStub(arg1)
	}
}

func (fake *FakeInputComponent) SetHeightCallCount() int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	return len(fake.setHeightArgsForCall)
}

func (fake *FakeInputComponent) SetHeightCalls(stub func(int)) {
	fake.setHeightMutex.Lock()
	defer fake.setHeightMutex.Unlock()
	fake.SetHeightStub = stub
}

func (fake *FakeInputComponent) SetHeightArgsForCall(i int) int {
	fake.setHeightMutex.RLock()
	defer fake.setHeightMutex.RUnlock()
	argsForCall := fake.setHeightArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) SetPlaceholder(arg1 string) {
	fake.setPlaceholderMutex.Lock()
	fake.setPlaceholderArgsForCall = append(fake.setPlaceholderArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetPlaceholderStub
	fake.recordInvocation("SetPlaceholder", []interface{}{arg1})
	fake.setPlaceholderMutex.Unlock()
	if stub != nil {
		fake.SetPlaceholderStub(arg1)
	}
}

func (fake *FakeInputComponent) SetPlaceholderCallCount() int {
	fake.setPlaceholderMutex.RLock()
	defer fake.setPlaceholderMutex.RUnlock()
	return len(fake.setPlaceholderArgsForCall)
}

func (fake *FakeInputComponent) SetPlaceholderCalls(stub func(string)) {
	fake.setPlaceholderMutex.Lock()
	defer fake.setPlaceholderMutex.Unlock()
	fake.SetPlaceholderStub = stub
}

func (fake *FakeInputComponent) SetPlaceholderArgsForCall(i int) string {
	fake.setPlaceholderMutex.RLock()
	defer fake.setPlaceholderMutex.RUnlock()
	argsForCall := fake.setPlaceholderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) SetText(arg1 string) {
	fake.setTextMutex.Lock()
	fake.setTextArgsForCall = append(fake.setTextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetTextStub
	fake.recordInvocation("SetText", []interface{}{arg1})
	fake.setTextMutex.Unlock()
	if stub != nil {
		fake.SetTextStub(arg1)
	}
}

func (fake *FakeInputComponent) SetTextCallCount() int {
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	return len(fake.setTextArgsForCall)
}

func (fake *FakeInputComponent) SetTextCalls(stub func(string)) {
	fake.setTextMutex.Lock()
	defer fake.setTextMutex.Unlock()
	fake.SetTextStub = stub
}

func (fake *FakeInputComponent) SetTextArgsForCall(i int) string {
	fake.setTextMutex.RLock()
	defer fake.setTextMutex.RUnlock()
	argsForCall := fake.setTextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) SetWidth(arg1 int) {
	fake.setWidthMutex.Lock()
	fake.setWidthArgsForCall = append(fake.setWidthArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SetWidthStub
	fake.recordInvocation("SetWidth", []interface{}{arg1})
	fake.setWidthMutex.Unlock()
	if stub != nil {
		fake.SetWidthStub(arg1)
	}
}

func (fake *FakeInputComponent) SetWidthCallCount() int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	return len(fake.setWidthArgsForCall)
}

func (fake *FakeInputComponent) SetWidthCalls(stub func(int)) {
	fake.setWidthMutex.Lock()
	defer fake.setWidthMutex.Unlock()
	fake.SetWidthStub = stub
}

func (fake *FakeInputComponent) SetWidthArgsForCall(i int) int {
	fake.setWidthMutex.RLock()
	defer fake.setWidthMutex.RUnlock()
	argsForCall := fake.setWidthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInputComponent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInputComponent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ui.InputComponent = new(FakeInputComponent)
